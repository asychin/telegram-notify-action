# ü§ñ AI Integration Rules for telegram-notify-action

## üìã Mission Statement
Automatically analyze user repositories and intelligently integrate `telegram-notify-action@v3` with optimal configuration based on project structure, existing workflows, and user preferences.

## üîó Source & Usage Information

### üìç **Original Repository**
- **GitHub**: https://github.com/asychin/telegram-notify-action
- **Latest Version**: v3.1.0
- **Action Marketplace**: https://github.com/marketplace/actions/telegram-notify-action

### üìÑ **Get These Rules**
```bash
# Download latest AI integration rules
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules

# Or view in browser
https://github.com/asychin/telegram-notify-action/blob/main/.ai-integration-rules
```

### üß† **For AI Systems**
These rules should be used by AI assistants (ChatGPT, Claude, Copilot, etc.) when users request:

**üÜï NEW INTEGRATION:**
- "Add Telegram notifications to my project"
- "Integrate telegram-notify-action into my workflows"  
- "Set up GitHub Actions notifications"
- "Add deployment notifications"

**üîç EXISTING INTEGRATION AUDIT:**
- "Check my telegram-notify-action setup"
- "Fix errors in my Telegram notifications"
- "Update my old telegram notifications"
- "Review my workflow files for issues"
- "My notifications aren't working properly"

üö® **MANDATORY PROCESS:**

**üìã For NEW integrations:**
1. **NEVER** generate code immediately
2. **ALWAYS** start with full questionnaire from Step 2
3. **WAIT** for complete user responses
4. **NEVER** suggest infrastructure monitoring (database, API, server health checks, etc.)
5. **THEN** generate customized integration
6. This prevents the common problem of generating incorrect integrations

**üîç For EXISTING integration audit:**
1. **FIRST** analyze existing telegram-notify-action code
2. **IDENTIFY** all errors against current rules (v3.1.0)
3. **ASK** user about desired improvements (questionnaire)
4. **PROVIDE** detailed error report with fixes
5. **GENERATE** corrected code with explanations

### üìö **Documentation Links**
- **Full Documentation**: https://github.com/asychin/telegram-notify-action/tree/main/docs
- **English Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/en/README.md
- **Russian Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/ru/README.md
- **Chinese Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/zh/README.md
- **Template System**: https://github.com/asychin/telegram-notify-action/blob/main/docs/en/TEMPLATE-SYSTEM.md
- **Examples**: https://github.com/asychin/telegram-notify-action/tree/main/examples

### üöÄ **Quick Start Reference**
```yaml
# Basic integration example
- name: üì¢ Notify Telegram
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    template: success
    message: "Deployment completed!"
```

### ‚ö†Ô∏è **Important Notes**
- Always use specific version tags (e.g., `@v3.1.0`) not `@main`
- These rules are updated with each major release
- Check repository for latest template variables and features
- Verify examples compatibility with current version

---

## üîç Repository Analysis Phase

### 1. Repository Structure Analysis
```yaml
analyze_repository:
  project_type:
    - detect: package.json ‚Üí Node.js project
    - detect: requirements.txt/pyproject.toml ‚Üí Python project  
    - detect: pom.xml/build.gradle ‚Üí Java project
    - detect: go.mod ‚Üí Go project
    - detect: Cargo.toml ‚Üí Rust project
    - detect: composer.json ‚Üí PHP project
    - detect: Dockerfile ‚Üí Containerized project
  
  deployment_indicators:
    - check: .github/workflows/*.yml ‚Üí existing CI/CD
    - check: docker-compose.yml ‚Üí local/staging deployment
    - check: k8s/*.yml ‚Üí Kubernetes deployment
    - check: terraform/*.tf ‚Üí Infrastructure as Code
    - check: ansible/*.yml ‚Üí Configuration management
```

### 2. Existing Workflow Analysis
```yaml
workflow_analysis:
  scan_workflows:  
    - path: .github/workflows/
    - identify_jobs: [build, test, deploy, release]
    - detect_triggers: [push, pull_request, release, workflow_dispatch]
    - find_secrets: [TELEGRAM_*, *_TOKEN, *_CHAT_ID]
    - analyze_steps: [checkout, build, docker, deploy]
  
  deployment_patterns:
    simple_deploy: 
      - single job deployment
      - basic build ‚Üí deploy flow
    complex_deploy:
      - multi-stage deployment (build ‚Üí test ‚Üí deploy)
      - matrix deployments
      - environment-specific deployments
    advanced_deploy:
      - progressive deployments
      - rollback capabilities
      - health checks
```

## üí¨ User Interaction Questionnaire

### 1. Core Integration Questions
```yaml
user_questions:
  notification_preference:
    question: "üîî How detailed should your Telegram notifications be?"
    options:
      - basic: "Simple success/failure notifications"
      - detailed: "Include commit info, branch, and duration"
      - dynamic: "Real-time updates with progress tracking"
      - comprehensive: "Full deployment pipeline with statistics"
  
  visual_preference:
    question: "üé® Do you want emojis and visual formatting?"
    options:
      - minimal: "Text-only notifications"
      - standard: "Basic emojis for status"
      - rich: "Rich emojis and formatting"
      - animated: "Progress bars and dynamic indicators"
  
  update_style:
    question: "üì± How should notifications be delivered?"
    options:
      - separate: "Send separate messages for each stage"
      - update: "Update single message with progress"
      - thread: "Use threaded messages in topics"
      - hybrid: "Combine updates with final summary"
```

### 2. Technical Configuration Questions
```yaml
technical_questions:
  deployment_environments:
    question: "üåç Which environments do you deploy to?"
    detect_from: [workflow branches, environment secrets]
    options: [development, staging, production, feature-branches]
  
  notification_triggers:
    question: "‚ö° When should notifications be sent?"
    options:
      - all_events: "Every push, PR, and deployment"
      - deployments_only: "Only deployment workflows"  
      - failures_only: "Only failures and errors"
      - custom: "Specific events and conditions"
  
  file_attachments:
    question: "üìé Should notifications include file attachments?"  
    detect_artifacts: [build logs, test reports, coverage reports]
    options:
      - none: "No file attachments"
      - logs: "Include build/deployment logs"
      - reports: "Include test and coverage reports"
      - screenshots: "Include UI test screenshots"
```

## üß† Intelligence Rules

### 1. Smart Configuration Detection
```yaml
smart_detection:
  secrets_analysis:
    existing_telegram:
      - scan: repository secrets for TELEGRAM_*
      - detect: organization-level telegram configs
      - identify: multi-environment setups
    
    missing_secrets:
      - generate: setup instructions
      - suggest: naming conventions (TELEGRAM_BOT_TOKEN_{ENV})
      - create: environment-specific variables
  
  workflow_optimization:
    job_placement:
      - start_notifications: first job with needs: []
      - progress_notifications: after critical jobs
      - final_notifications: always() condition jobs
    
    conditional_logic:
      - success_path: when all jobs succeed  
      - failure_path: when any job fails
      - partial_success: when some matrix jobs fail
```

### 2. Template Selection Algorithm
```yaml
template_selection:
  basic_project:
    triggers: [simple workflow, < 3 jobs]
    recommended_templates: [success, error, warning, info]
    approach: "Use simple success/error templates with custom messages"
    example: "template: success + customMessage in template_vars"
  
  deployment_project:  
    triggers: [build + deploy jobs, CI/CD pipeline]
    recommended_templates: [deploy, success, error]
    approach: "Use deploy template for main deployments, success/error for steps"
    example: "template: deploy with deployStatus, customMessage variables"
  
  testing_project:
    triggers: [test suites, coverage reports]
    recommended_templates: [test, success, error]
    approach: "Use test template for test results, success/error for completion"
    example: "template: test with testStatus, coverage variables"
  
  release_project:
    triggers: [release workflows, tagging]
    recommended_templates: [release, success, error]
    approach: "Use release template for releases, success/error for build steps"
    example: "template: release (automatic variables from release events)"

  monitoring_project:
    triggers: [health checks, alerts, reporting]
    recommended_templates: [warning, error, info]
    approach: "Use warning for alerts, error for critical issues, info for reports"
    example: "Custom messages with detailed monitoring data"
    
  complex_progressive:
    triggers: [matrix builds, multi-stage deployments]
    recommended_templates: [info, deploy, success, error]
    approach: "Progressive notifications with message updates (message_id)"
    example: "Start with info, update with deploy/success/error, use message_id"

  monitoring_system:
    triggers: [health checks, system monitoring, scheduled tasks]
    recommended_templates: [warning, error, info]
    approach: "Scheduled monitoring with custom messages and critical alerting"
    example: "Cron-based health checks with conditional critical alerts"
    
  progressive_deployment:
    triggers: [complex CI/CD pipelines, multi-stage deployments]
    recommended_templates: [info, deploy, success, error]
    approach: "Single message updates with progress tracking"
    example: "Start notification ‚Üí update progress ‚Üí final result, all same message_id"
```

## üõ†Ô∏è Implementation Strategies

### 1. Non-Disruptive Integration
```yaml
integration_approach:
  minimal_changes:
    - add notification steps without modifying existing logic
    - use conditional notifications (success/failure only)
    - preserve existing workflow structure
  
  enhanced_integration:
    - add progress tracking between existing jobs
    - implement dynamic message updates
    - include deployment statistics and timing
  
  comprehensive_overhaul:
    - restructure workflows for optimal notification flow
    - implement advanced features (file uploads, keyboards)
    - add monitoring and alerting capabilities
```

### 2. Configuration Templates

#### A. Simple Integration (Basic Projects)
```yaml
simple_integration:
  add_to_existing_job:
    - name: üì¢ Notify Deployment Status
      if: always()
      uses: asychin/telegram-notify-action@v3
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        template: ${{ job.status == 'success' && 'success' || 'error' }}
        message: ${{ job.status == 'success' && 'Deployment completed!' || 'Deployment failed!' }}
```

#### B. Dynamic Integration (Advanced Projects)  
```yaml
dynamic_integration:
  start_notification:
    job: notify-start
    capture: message_id, start_time
    template: deployment start with progress bar
  
  progress_updates:
    jobs: [build, test, deploy]  
    action: update existing message
    template: progress with stage completion
  
  final_notification:
    job: notify-complete
    condition: always()
    template: comprehensive summary with timings
```

#### C. Progressive Deployment Integration (Recommended)
```yaml
progressive_deployment:
  # Step 1: Start notification with message_id capture
  start_notification:
    - name: üì¢ Start Deployment Notification
      id: start_notification
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message: |
          üöÄ <b>Deployment Started</b>
          
          <b>üìã Repository:</b> ${{ github.repository }}
          <b>üåø Branch:</b> ${{ github.ref_name }}
          <b>üë§ Actor:</b> ${{ github.actor }}
          
          üìä <b>Progress:</b> <code>‚óè‚óè‚óã‚óã‚óã‚óã‚óã‚óã‚óã‚óã 20%</code>
          
          üîç <b>Status:</b> Starting deployment...

  # Step 2: Update same message during build
  update_build:
    - name: üì¢ Update - Build Stage
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.start_notification.outputs.message_id }}
        message: |
          üöÄ <b>Deployment Progress</b>
          
          <b>üìã Repository:</b> ${{ github.repository }}
          <b>üåø Branch:</b> ${{ github.ref_name }}
          <b>üë§ Actor:</b> ${{ github.actor }}
          
          üìä <b>Progress:</b> <code>‚óè‚óè‚óè‚óè‚óè‚óè‚óã‚óã‚óã‚óã 60%</code>
          
          üîß <b>Status:</b> Building application...

  # Step 3: Final update with result
  final_notification:
    - name: üì¢ Final Result
      if: always()
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.start_notification.outputs.message_id }}
        template: ${{ job.status == 'success' && 'deploy' || 'error' }}
        template_vars: |
          {
            "deployStatus": "${{ job.status == 'success' && 'successful' || 'failed' }}",
            "customMessage": "Deployment ${{ job.status == 'success' && 'completed successfully!' || 'failed!' }}"
          }
```

#### D. Monitoring System Integration (Recommended)
```yaml
monitoring_system:
  # Scheduled health checks
  health_monitoring:
    name: üîç System Health Check
    on:
      schedule:
        - cron: "*/15 * * * *"  # Every 15 minutes
      workflow_dispatch:
    
    jobs:
      health_check:
        runs-on: ubuntu-latest
        steps:
          - name: üè• Check System Health
            id: health_check
            run: |
              # Your health check logic here
              echo "status=healthy" >> $GITHUB_OUTPUT
              echo "response_time=245" >> $GITHUB_OUTPUT
              echo "error_count=0" >> $GITHUB_OUTPUT

          - name: üì¢ Health Status Report
            uses: asychin/telegram-notify-action@v3.1.0
            with:
              telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
              chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
              template: info
              template_vars: |
                {
                  "customMessage": "üè• System Health: ${{ steps.health_check.outputs.status }}\nüìä Response Time: ${{ steps.health_check.outputs.response_time }}ms\nüö® Errors: ${{ steps.health_check.outputs.error_count }}"
                }

          - name: üö® Critical Alert
            if: steps.health_check.outputs.status != 'healthy'
            uses: asychin/telegram-notify-action@v3.1.0
            with:
              telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
              chat_id: ${{ secrets.TELEGRAM_ALERT_CHAT_ID }}
              template: error
              template_vars: |
                {
                  "customMessage": "üö® CRITICAL SYSTEM ALERT\n\nüí• Health Check Failed\n‚è∞ Time: $(date)\nüîó Repository: ${{ github.repository }}"
                }
              inline_keyboard: |
                [
                  [
                    {"text": "üîß Fix Now", "url": "${{ github.server_url }}/${{ github.repository }}/actions"},
                    {"text": "üìä Logs", "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}
                  ]
                ]

  # Weekly summary report
  weekly_report:
    name: üìä Weekly System Report
    on:
      schedule:
        - cron: "0 9 * * 1"  # Every Monday at 9 AM
    
    jobs:
      generate_report:
        runs-on: ubuntu-latest
        steps:
          - name: üìä Generate Weekly Stats
            id: stats
            run: |
              echo "uptime=99.8" >> $GITHUB_OUTPUT
              echo "avg_response=180" >> $GITHUB_OUTPUT
              echo "incidents=2" >> $GITHUB_OUTPUT

          - name: üìà Weekly Report
            uses: asychin/telegram-notify-action@v3.1.0
            with:
              telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
              chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
              message: |
                üìä <b>Weekly System Report</b>
                <i>$(date -d 'last monday' '+%Y-%m-%d') - $(date -d 'sunday' '+%Y-%m-%d')</i>

                üéØ <b>Uptime:</b> ${{ steps.stats.outputs.uptime }}%
                ‚ö° <b>Avg Response:</b> ${{ steps.stats.outputs.avg_response }}ms
                üö® <b>Incidents:</b> ${{ steps.stats.outputs.incidents }}

                üåø <b>Environment:</b> <code>${{ github.ref_name }}</code>

                ${{ steps.stats.outputs.uptime >= 99.5 && 'üéâ Excellent system performance this week!' || '‚ö†Ô∏è System performance needs attention.' }}
```

#### E. Enterprise Integration (Complex Projects)
```yaml
enterprise_integration:
  features:
    - progressive deployment notifications (message updates)
    - comprehensive monitoring systems (scheduled checks)
    - multi-environment support with conditional logic
    - service-specific progress tracking  
    - failure analysis and debugging info
    - rollback notifications with action buttons
    - health check integration with alerting
    - custom keyboards for manual actions
```

## üìö Documentation Integration

### 1. Auto-Documentation Analysis
```yaml
documentation_check:
  read_current_docs:
    - fetch: latest README.md from telegram-notify-action
    - parse: available templates and variables
    - extract: latest features and breaking changes
    - verify: example compatibility with user's setup
  
  version_compatibility:
    - check: action.yml for current version (v3)
    - validate: deprecated features in user's existing setup
    - suggest: migration paths for older versions
    - warn: about breaking changes
```

### 2. Context-Aware Examples
```yaml
example_generation:
  based_on_project_type:
    node_js:
      - npm install/build examples
      - package.json version in notifications
      - test coverage integration
    
    docker:
      - container build notifications
      - image size and layer information
      - registry push confirmations
    
    kubernetes:
      - deployment status tracking
      - pod health notifications  
      - rollout progress updates
```

## üîí Security and Best Practices

### 1. Secrets Management Rules
```yaml
security_rules:
  token_setup:
    - never: expose tokens in code or logs
    - always: use repository/organization secrets
    - suggest: environment-specific token naming
    - validate: token permissions and chat access
  
  data_privacy:
    - avoid: sensitive data in notifications (passwords, keys)
    - sanitize: error messages and logs
    - limit: information exposure in public repositories
```

### 2. Workflow Security
```yaml
workflow_security:
  permissions:
    - minimal: only required permissions for each job
    - secure: use specific action versions (@v3, not @main)
    - validate: third-party action usage
  
  error_handling:
    - graceful: failure handling without breaking pipelines
    - informative: error messages without sensitive data
    - recoverable: continue-on-error for non-critical notifications
```

## üß™ Testing and Validation

### 1. Integration Testing Strategy
```yaml
testing_approach:
  dry_run:
    - simulate: notification sending without actual Telegram calls
    - validate: message formatting and variable substitution
    - check: conditional logic and job dependencies
  
  staging_test:
    - test: with actual Telegram bot in test environment
    - verify: message delivery and formatting
    - validate: file attachments and special features
  
  production_validation:
    - gradual: rollout with limited notifications
    - monitor: delivery success and error rates
    - feedback: user experience and preferences
```

### 2. Quality Assurance Rules
```yaml
quality_rules:
  message_quality:
    - readable: clear and informative messages
    - actionable: include relevant links and context
    - timely: sent at appropriate workflow stages
  
  performance_impact:
    - minimal: workflow execution time increase
    - reliable: handle Telegram API rate limits
    - resilient: graceful degradation on service issues
```

## üéØ Success Metrics and Monitoring

### 1. Integration Success Criteria
```yaml
success_metrics:
  technical:
    - workflow_completion: no broken pipelines
    - notification_delivery: > 95% success rate
    - user_satisfaction: positive feedback on usefulness
  
  adoption:
    - feature_usage: utilization of advanced features
    - customization: user-specific template modifications
    - retention: continued usage over time
```

### 2. Continuous Improvement
```yaml
improvement_cycle:
  feedback_collection:
    - monitor: common configuration patterns
    - analyze: frequent customization requests  
    - identify: missing features or templates
  
  template_evolution:
    - update: templates based on usage patterns
    - add: new variables for common use cases
    - optimize: message formatting for different project types
```

## üöÄ Deployment Automation

### 1. Auto-PR Generation
```yaml
automated_integration:
  pr_creation:
    title: "üîî Add Telegram Notifications with telegram-notify-action"
    description: |
      This PR adds intelligent Telegram notifications to your workflows using telegram-notify-action@v3.
      
      ## üìã What's Added:
      - [x] Deployment success/failure notifications
      - [x] Real-time progress updates  
      - [x] Rich formatting with emojis
      - [x] Secure secrets configuration
      
      ## ‚öôÔ∏è Configuration Required:
      1. Add `TELEGRAM_BOT_TOKEN` to repository secrets
      2. Add `TELEGRAM_CHAT_ID` to repository secrets
      3. Review and customize notification preferences
      
      ## üß™ Testing:
      - Notifications will be sent to specified chat
      - Use test deployments to verify configuration
    
    files_modified:
      - .github/workflows/*.yml
      - README.md (optional documentation update)
    
    review_checklist:
      - [ ] Secrets are properly configured
      - [ ] Notification timing is appropriate  
      - [ ] Message content is relevant
      - [ ] No sensitive data in notifications
```

## üìñ How to Use These Rules

### ü§ñ **For AI Assistants**
When a user requests Telegram notifications integration:

1. **Check for existing `.ai-integration-rules`** in their repository
2. **If found**: Use their customized rules (they may have modified these)
3. **If not found**: Apply these standard rules from telegram-notify-action repository

### üë®‚Äçüíª **For Developers** 
```bash
# Add these rules to your repository for consistent AI integration
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules

# Customize the rules for your specific project needs
# AI assistants will use your customized version when helping with integrations
```

### üîÑ **Keeping Rules Updated**
```bash
# Check for updates (compare versions)
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules | head -10

# Update to latest version  
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules
```

### üéØ **AI Usage Instructions**

#### **Step 1: Repository Analysis**
- Scan project structure and existing workflows
- Identify deployment patterns and CI/CD setup
- Check for existing Telegram integration

#### **Step 2: MANDATORY User Questionnaire**
üö® **CRITICAL:** Before generating ANY code, AI MUST ask ALL questions and wait for user responses.

**üî¥ STOP HERE - DO NOT PROCEED WITHOUT USER ANSWERS!**

**üìù Answer Format:** User must respond with [y] for YES or [n] for NO in brackets for each question.
**Example:** "1. [y]  2. [n]  3. [y]  4. [n]..." or on separate lines with numbers.

Ask the user these REQUIRED questions:

**üìã Notification Types (answer [y] or [n] for each):**
1. "üî® Do you want build/compilation result notifications?" [ ]
2. "üöÄ Do you want deployment status notifications?" [ ]
3. "üß™ Do you want test result notifications?" [ ]
4. "üè∑Ô∏è Do you want release announcement notifications?" [ ]
5. "üîÑ Do you want pull request update notifications?" [ ]

**üé® Notification Style:**
6. "üìä Do you want detailed notifications with metrics and timings?" [ ]
   (If [n], will use standard format with basic status + commit info)
7. "üé≠ Do you want rich formatting with lots of emojis?" [ ]
   (If [n], will use minimal text-only format)

**‚öôÔ∏è Technical Setup:**
8. "üè¢ Do you want notifications for Production environment?" [ ]
9. "üß™ Do you want notifications for Staging environment?" [ ]
10. "üíª Do you want notifications for Development environment?" [ ]
11. "üåø Do you want notifications for all feature branches?" [ ]

12. "üîê Do you already have Telegram bot TOKEN and CHAT_ID?" [ ]
    (If [n], I'll provide setup instructions)

**‚ö° Delivery Method:**
13. "üì® Do you want progressive updates (single message that updates)?" [ ]
    (If [n], will send separate messages for each event)

**üîç Repository Monitoring:**
14. "üìä Do you want notifications for GitHub Actions workflow results?" [ ]
    (Build, test, deploy pipeline status notifications)
15. "üîÑ Do you want notifications for Pull Request activity?" [ ]
    (PR opened, merged, reviewed, code changes)
16. "üêõ Do you want notifications for GitHub Issues activity?" [ ]
    (New issues, comments, label changes, assignments)
17. "üè∑Ô∏è Do you want notifications for Releases and Tags?" [ ]
    (New releases, pre-releases, tag creation)
18. "üìà Do you want weekly/monthly repository summary reports?" [ ]
    (Commit statistics, PR metrics, issue resolution stats)

**üéØ Advanced Features:**
19. "üöÄ Do you want interactive action buttons in messages?" [ ]
    (Buttons for: View PR, Approve, Merge, Rerun Workflow, Create Issue)
20. "üìä Do you want real-time progress bars during CI/CD?" [ ]
    (Visual progress: Build ‚óè‚óè‚óè‚óã‚óã ‚Üí Test ‚óè‚óè‚óè‚óè‚óã ‚Üí Deploy ‚óè‚óè‚óè‚óè‚óè)
21. "üåç Do you want different notification rules per environment?" [ ]
    (Production: all alerts, Staging: important only, Dev: minimal)
22. "üìé Do you want file attachments?" [ ]
    (Attach build logs, test reports, coverage reports to messages)

**üö® WAIT FOR ALL ANSWERS BEFORE PROCEEDING TO STEP 3!**

### **üö´ FORBIDDEN: What AI Must NEVER Suggest**

**‚ùå NEVER suggest these types of monitoring (outside project scope):**
- Database connection checks
- API response time monitoring  
- Server health monitoring
- System resource monitoring (CPU, memory, disk)
- Application performance monitoring (APM)
- Security vulnerability scanning
- Infrastructure health checks
- Service availability monitoring
- Network monitoring
- Log analysis systems
- Scheduled system health checks (e.g., "every 15 minutes")
- External service monitoring

**üö® If user asks for these, respond:**
"That's outside the scope of telegram-notify-action, which focuses on GitHub repository events. For [specific monitoring type], I recommend using dedicated tools like Prometheus, Datadog, New Relic, or PagerDuty, then integrate their alerts with telegram-notify-action."

**‚úÖ ONLY suggest GitHub-related monitoring:**
- Workflow execution results (CI/CD pipeline status)
- Pull Request activity (opened, merged, reviewed)
- Issue and comment activity  
- Release notifications (published, created)
- Deployment status from GitHub Actions workflows
- Repository events (push, branch creation, repository settings)
- GitHub Actions job success/failure
- Scheduled **repository** reports (weekly stats, contributor activity)

**üéØ Remember: If it's not a GitHub event, don't suggest it!**

## üîç **EXISTING INTEGRATION AUDIT PROCESS**

### **When User Has Existing telegram-notify-action Code**

If user mentions existing implementation, provides files, or asks to "fix/check/update" notifications:

#### **Audit Step 1: Comprehensive Code Analysis**

**üîç MANDATORY: Analyze ALL provided files for these errors:**

1. **‚ùå Template Validation Errors:**
   - Non-existent templates: `deployment_start`, `monitoring_report`, `critical_alert`, etc.
   - ONLY valid: `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`

2. **‚ùå Deprecated Parameter Errors:**
   - `message_thread_id` parameter (removed in v3.0+)
   - Old version references (`@v1`, `@v2`, `@main`)
   - Deprecated input names from older versions

3. **‚ùå Format Errors:**
   ```yaml
   # WRONG - bash style
   template_vars: |
     status=success
     message=Hello
   
   # CORRECT - JSON format  
   template_vars: |
     {
       "status": "success",
       "message": "Hello"
     }
   ```

4. **‚ùå Parameter Conflict Errors:**
   ```yaml
   # WRONG - both template and message
   template: deploy
   message: "Custom message"
   
   # CORRECT - either template OR message
   template: deploy
   template_vars: |
     {"customMessage": "Details"}
   ```

5. **‚ùå Variable Scope Errors:**
   ```yaml
   # WRONG - template variables in JSON/shell context
   template_vars: |
     {
       "msg": "Repository {{repository}}"
     }
   run: echo "{{repository}}"
   
   # CORRECT - GitHub variables in JSON/shell
   template_vars: |
     {
       "msg": "Repository ${{ github.repository }}"
     }
   run: echo "${{ github.repository }}"
   ```

6. **‚ùå Syntax Errors:**
   - Handlebars/Mustache syntax: `{{#if}}`, `{{#each}}`
   - Invalid YAML structure
   - Missing required parameters

#### **Audit Step 2: Documentation Cross-Reference**

**üìö MANDATORY: Read ALL documentation before audit:**

üö® **CRITICAL:** AI MUST read and understand these docs before analyzing user code:

1. **Template System Documentation:**
   ```bash
   https://github.com/asychin/telegram-notify-action/blob/main/docs/en/TEMPLATE-SYSTEM.md
   ```
   - Full list of available variables
   - Template variable vs GitHub variable usage rules
   - Examples of correct variable usage

2. **Main Documentation (All Languages):**
   ```bash
   https://github.com/asychin/telegram-notify-action/blob/main/docs/en/README.md
   https://github.com/asychin/telegram-notify-action/blob/main/docs/ru/README.md  
   https://github.com/asychin/telegram-notify-action/blob/main/docs/zh/README.md
   ```
   - Current parameters and their usage
   - Deprecated features and migration paths
   - Version compatibility information

3. **Examples Repository:**
   ```bash
   https://github.com/asychin/telegram-notify-action/tree/main/examples
   ```
   - Current best practices
   - Correct implementation patterns
   - Real-world usage examples

4. **Validation Steps:**
   - Cross-reference used variables with documented variables
   - Check if custom variables are passed via `template_vars`
   - Compare used features against current version capabilities
   - Identify deprecated/removed features
   - Validate YAML structure and parameter combinations

#### **Audit Step 3: Error Report Generation**

**üìã MANDATORY: Create detailed error report:**

```markdown
# üîç Telegram-Notify-Action Audit Report

## ‚ùå Errors Found: [X] issues

### 1. Template Errors ([count])
- Line X: `template: deployment_start` ‚Üí Use `template: deploy`
- Line Y: `template: monitoring_report` ‚Üí Use custom `message:` instead

### 2. Parameter Errors ([count])  
- Line X: `message_thread_id` ‚Üí Remove (deprecated in v3.0+)
- Line Y: `@v2` ‚Üí Update to `@v3.1.0`

### 3. Format Errors ([count])
- Line X: bash-style template_vars ‚Üí Convert to JSON format
- Line Y: template + message conflict ‚Üí Choose one approach

[Continue for all error categories...]

## ‚úÖ Recommendations
1. Update to `asychin/telegram-notify-action@v3.1.0`
2. Replace custom templates with built-in templates
3. Convert template_vars to JSON format
4. Remove deprecated parameters
5. Fix variable scope issues

## üìã Next Steps
Would you like me to:
- [ ] Generate corrected versions of all files
- [ ] Explain each fix in detail  
- [ ] Update to different notification preferences
- [ ] Add new notification types
```

#### **Audit Step 4: User Preference Collection**

**After error report, ask user:**

1. "üîß Do you want to keep the same notification behavior, or would you like to improve it?"
2. "üìã Should I fix errors while maintaining current functionality, or redesign based on your preferences?"
3. If redesign: Use full questionnaire from Step 2
4. If maintain: Proceed with minimal fixes

#### **Audit Step 5: Generate Corrected Code**

**Based on audit and user preferences:**

1. **Create corrected versions** of all problematic files
2. **Show before/after comparisons** for each fix
3. **Explain reasoning** for each change
4. **Validate final result** against all rules
5. **Provide migration instructions**

### **Example Audit Interaction Flow**

```
üë§ User: "Check my telegram notifications, they have errors"
[Provides files with custom templates, deprecated parameters]

ü§ñ AI: "I'll audit your telegram-notify-action setup against v3.1.0 standards.

üîç **ANALYSIS COMPLETE - Found 15 errors:**

‚ùå **Template Errors (8):**
- monitoring.yaml:134: `template: monitoring_report` (doesn't exist)
- deployment.yaml:42: `template: deployment_start` (doesn't exist)  
[... detailed list ...]

‚ùå **Deprecated Parameters (4):**
- monitoring.yaml:133: `message_thread_id` (removed in v3.0+)
[... detailed list ...]

‚ùå **Format Errors (3):**
- Line 136: bash-style template_vars (should be JSON)
[... detailed list ...]

üìã **Recommendations:**
1. Replace custom templates with built-in: deploy, success, error
2. Remove message_thread_id parameters  
3. Convert template_vars to JSON format
4. Update to @v3.1.0

üîß **Next Steps:**
Do you want me to:
- [ ] Fix all errors while keeping same behavior
- [ ] Redesign notifications with better approach  
- [ ] Explain each fix in detail first"

üë§ User: "Fix all errors, keep same behavior"

ü§ñ AI: "Perfect! Here are your corrected files with explanations..."
[Provides fixed versions with before/after comparisons]
```

### **üîß Quick Audit Checklist for AI**

**Before providing audit results, verify ALL items:**

- [ ] **Templates:** All templates are built-in (`success`, `error`, `warning`, `info`, `deploy`, `test`, `release`)
- [ ] **Parameters:** No `message_thread_id` or other deprecated parameters  
- [ ] **Versions:** Using `@v3.1.0` or newer (not `@main`, `@v1`, `@v2`)
- [ ] **template_vars:** All in JSON format, no bash-style assignments
- [ ] **Conflicts:** No mixing of `template:` and `message:` parameters
- [ ] **Variable Scopes:** `{{}}` only in `message:`/`caption:` WITH `template:`, `${{}}` in JSON/shell
- [ ] **Syntax:** No Handlebars (`{{#if}}`, `{{#each}}`) or invalid YAML
- [ ] **Documentation:** Cross-referenced against current docs
- [ ] **Variables:** All used variables exist in documentation or passed via `template_vars`
- [ ] **Migration:** Provided clear upgrade path for deprecated features

### **üìä Audit Error Categories Priority**

**üî¥ Critical (Must Fix):**
- Non-existent templates 
- Deprecated parameters (`message_thread_id`)
- Wrong variable scopes
- Version references to non-existent versions

**üü° Important (Should Fix):**  
- template_vars format (bash ‚Üí JSON)
- Template + message conflicts
- Version updates (`@v2` ‚Üí `@v3.1.0`)

**üü¢ Minor (Nice to Fix):**
- Code formatting and organization
- Adding more informative messages
- Optimization of notification frequency

#### **Step 3: Generate Integration (ONLY after complete questionnaire)**
- **Parse user [y]/[n] answers:** Interpret each [y] as "YES, include this feature" and [n] as "NO, skip this"
- Apply appropriate template based on user answers  
- Create workflow files based on user responses
- Use ONLY built-in templates (success, error, warning, info, deploy, test, release)
- Generate workflow modifications with proper variable usage
- Ensure security best practices (secrets, permissions)
- Include setup instructions for secrets
- Generate test cases for notification validation
- Include troubleshooting guidance

#### **Step 4: MANDATORY Self-Check Before Delivery**
- ‚úÖ **Template Validation:** Only use `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- ‚úÖ **Parameter Check:** No `message_thread_id` or other deprecated parameters
- ‚úÖ **JSON Format:** All `template_vars` must be valid JSON format
- ‚úÖ **No Conflicts:** Never use `template:` and `message:` together
- ‚úÖ **Version Check:** Always use `@v3.1.0` or newer specific version
- ‚úÖ **GitHub Variables:** Use `${{ github.* }}` in `template_vars`, `inline_keyboard`, `run:` commands
- ‚úÖ **Template Variables:** Use `{{var}}` ONLY in `message:`/`caption:` WITH `template:`
- ‚úÖ **User Requirements:** Generated code matches ALL user questionnaire answers

### **üéØ Example of CORRECT AI Interaction Flow**

```
üë§ User: "Add Telegram notifications to my project"

ü§ñ AI: "I'll help you integrate telegram-notify-action! Please answer with [y] or [n] for each question:

üìã Notification Types:
1. üî® Do you want build/compilation result notifications? [ ]
2. üöÄ Do you want deployment status notifications? [ ]
3. üß™ Do you want test result notifications? [ ]
4. üè∑Ô∏è Do you want release announcement notifications? [ ]
5. üîÑ Do you want pull request update notifications? [ ]

üé® Notification Style:
6. üìä Do you want detailed notifications with metrics? [ ]
7. üé≠ Do you want rich formatting with lots of emojis? [ ]

‚öôÔ∏è Technical Setup:
8. üè¢ Do you want notifications for Production environment? [ ]
9. üß™ Do you want notifications for Staging environment? [ ]
10. üíª Do you want notifications for Development environment? [ ]
11. üåø Do you want notifications for all feature branches? [ ]
12. üîê Do you already have Telegram bot TOKEN and CHAT_ID? [ ]

‚ö° Delivery Method:
13. üì® Do you want progressive updates (single message)? [ ]

üîç Repository Monitoring:
14. üìä Do you want GitHub Actions workflow results? [ ]
15. üîÑ Do you want Pull Request activity notifications? [ ]
16. üêõ Do you want GitHub Issues activity notifications? [ ]
17. üè∑Ô∏è Do you want Releases and Tags notifications? [ ]
18. üìà Do you want weekly/monthly summary reports? [ ]

üéØ Advanced Features:
19. üöÄ Do you want interactive action buttons? [ ]
20. üìä Do you want real-time progress bars? [ ]
21. üåç Do you want different rules per environment? [ ]
22. üìé Do you want file attachments? [ ]"

üë§ User: "1.[y] 2.[y] 3.[y] 4.[n] 5.[y] 6.[n] 7.[y] 8.[y] 9.[n] 10.[n] 11.[n] 12.[y] 13.[y] 14.[y] 15.[y] 16.[n] 17.[n] 18.[n] 19.[y] 20.[y] 21.[n] 22.[n]"

ü§ñ AI: "Perfect! Based on your [y]/[n] answers, I'll create:
- ‚úÖ Build, deploy, test, and PR notifications
- ‚úÖ Rich emoji formatting with progressive updates
- ‚úÖ Production environment only
- ‚úÖ Interactive buttons and progress bars
- ‚ùå No release notifications or summary reports

I'll generate:
1. Progressive deployment workflow (single message updates)
2. GitHub Actions integration with progress bars
3. PR notification system with action buttons
4. Rich template formatting for better readability

[Generates CORRECT code with both deployment and monitoring workflows]"
```

### **‚ùå WRONG AI Behavior (What NOT to do)**

#### **üÜï New Integration Mistakes:**
```
üë§ User: "Add Telegram notifications to my project"

ü§ñ AI: "I'll create monitoring and deployment pipelines for you!"
[Immediately generates 1000+ lines with custom templates, deprecated parameters, wrong formats]

üë§ User: "This is wrong, you used non-existent templates!"

ü§ñ AI: "Let me fix that..." [More iterations]
```

#### **üîç Audit Mistakes:**
```
üë§ User: "Check my telegram notifications setup"
[Provides files with 15+ errors]

ü§ñ AI: "I see some issues. Here's the fixed version:"
[Provides corrected code without explaining what was wrong or why]

üë§ User: "What exactly was wrong? I don't understand the changes"

ü§ñ AI: [Tries to explain afterwards, confusing the user]
```

**üö® Problems with wrong audit approach:**
- No systematic error analysis
- Skipped documentation cross-reference
- No detailed error report
- Immediate code generation without explanation
- No user preference collection
- Missing before/after comparisons

#### **üö´ Infrastructure Monitoring Mistakes:**
```
üë§ User: "Set up Telegram notifications for my project"
[AI follows questionnaire correctly, user selects some GitHub events]

ü§ñ AI: "Great! I'll set that up. Also, would you like to add:
üìà N—É–∂–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã?
- Scheduled health checks (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
- API response time monitoring
- Database connection checks"

üë§ User: "This is wrong! The project is about GitHub events, not infrastructure!"
```

**üö® Problems with this approach:**
- Suggesting infrastructure monitoring despite clear project scope
- Ignoring the FORBIDDEN list in the rules
- Not understanding the difference between GitHub events and system monitoring
- Going beyond the defined scope of telegram-notify-action

**‚úÖ CORRECT approach:**
```
üë§ User: "Set up Telegram notifications for my project"

ü§ñ AI: [Follows questionnaire correctly, focuses ONLY on GitHub events]
"Based on your answers, I'll set up:
‚úÖ Pull Request notifications (opened, merged, reviewed)
‚úÖ Deployment status from GitHub Actions workflows  
‚úÖ Release announcements
‚úÖ Weekly repository activity reports

Note: For infrastructure monitoring (API health, database checks, etc.), 
I recommend dedicated tools like Prometheus or Datadog, which you can 
then integrate with telegram-notify-action for alerts."
```

### üìù **Integration Examples Reference**

#### **Quick Commands for AI**
```bash
# Get latest action version
curl -s https://api.github.com/repos/asychin/telegram-notify-action/releases/latest | grep '"tag_name"'

# Check template variables  
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/docs/en/TEMPLATE-SYSTEM.md

# View examples
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/examples/
```

### **üö® CRITICAL: Correct Integration Examples**

#### **‚úÖ CORRECT: Using Built-in Templates**
```yaml
# Deployment success with built-in template
- name: üì¢ Notify Deployment Success
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    template: deploy  # ‚úÖ Built-in template
    template_vars: |  # ‚úÖ JSON format
      {
        "customMessage": "Deployed to ${{ github.ref_name }}!",
        "deployStatus": "successful"
      }
```

#### **‚úÖ CORRECT: Custom Message (No Template)**
```yaml
# Custom message without template
- name: üì¢ Send Custom Notification  
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message: |  # ‚úÖ Custom message, no template
      üöÄ <b>Custom Deployment Started</b>
      
      <b>Repository:</b> ${{ github.repository }}
      <b>Branch:</b> ${{ github.ref_name }}
      <b>Commit:</b> ${{ github.sha }}
```

#### **‚úÖ CORRECT: Progressive Notifications**
```yaml
# 1. Start notification with message_id capture
- name: üì¢ Start Notification
  id: start_notification
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message: "üöÄ Deployment started..."

# 2. Update same message
- name: üì¢ Update Notification  
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message_id: ${{ steps.start_notification.outputs.message_id }}
    message: "‚úÖ Deployment completed!"
```

#### **‚ùå WRONG Examples (What NOT to do)**
```yaml
# ‚ùå WRONG: Non-existent template
template: deployment_start  # Does not exist!

# ‚ùå WRONG: Both template and message
template: deploy
message: "Custom message"  # Conflicts with template

# ‚ùå WRONG: Deprecated parameter
message_thread_id: ${{ vars.THREAD_ID }}  # Removed in v3

# ‚ùå WRONG: Bash-style template_vars
template_vars: |
  customMessage=Hello
  status=success

# ‚ùå WRONG: Handlebars syntax
message: |
  {{#if success}}
  ‚úÖ Success
  {{/if}}
```

---

## üö® **Critical Reminders**

### **Version Management**
- ‚ö†Ô∏è **Always** use specific version tags: `@v3.1.0` (not `@main` or `@latest`)
- üîÑ Update version references when new releases are available
- üìã Check CHANGELOG.md for breaking changes between versions

### **Variable Usage Rules** 
- üéØ Template variables (`{{var}}`) work ONLY in `message:`/`caption:` WITH `template:`
- ‚öôÔ∏è GitHub Actions variables (`${{var}}`) work in `template_vars:`, `inline_keyboard:`, `run:` commands
- üö´ Never mix template and GitHub Actions variable types

### **Available Templates (v3.1.0)**
- ‚úÖ **ONLY these templates exist:** `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- üö´ **DO NOT create custom templates** - they don't exist in the action
- üìã **For custom messages:** Use `message:` field WITHOUT `template:` parameter
- üîÑ **Template OR Message:** Never use both `template:` and `message:` together

### **Deprecated Parameters (v3.1.0)**
- ‚ùå **REMOVED:** `message_thread_id` parameter (no longer supported)
- ‚ùå **REMOVED:** Custom template support (only built-in templates work)
- ‚ùå **NOT SUPPORTED:** Handlebars syntax (`{{#if}}`, `{{#each}}`, etc.)

### **Template Variables JSON Format**
```yaml
# ‚úÖ CORRECT JSON format
template_vars: |
  {
    "customMessage": "Value with ${{ github.repository }}",
    "deployStatus": "successful",
    "version": "${{ github.ref_name }}"
  }

# ‚ùå WRONG bash-style assignment  
template_vars: |
  customMessage=Value
  deployStatus=successful
```

### **Security First**
- üîê Always use repository/organization secrets
- üö´ Never expose tokens in code or logs  
- üõ°Ô∏è Use minimal required permissions
- üîç Sanitize sensitive data in notifications

---

**Remember: This is an intelligent integration system. Always prioritize user experience, security, and non-disruptive implementation. The goal is to enhance existing workflows, not replace them.**

---

## üö® **COMMON AI INTEGRATION MISTAKES & SOLUTIONS**

### **‚ùå Mistake 1: Using Custom Templates**
```yaml
# WRONG
template: deployment_start
template: monitoring_report
template: custom_alert
```
**‚úÖ Solution:** Use ONLY built-in templates: `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`

### **‚ùå Mistake 2: Wrong template_vars Format**
```yaml
# WRONG - bash style
template_vars: |
  status=success
  message=Hello
```
**‚úÖ Solution:** Always use JSON format:
```yaml
template_vars: |
  {
    "status": "success", 
    "message": "Hello"
  }
```

### **‚ùå Mistake 3: Using Deprecated Parameters**
```yaml
# WRONG - removed in v3
message_thread_id: ${{ vars.THREAD_ID }}
```
**‚úÖ Solution:** Remove deprecated parameters completely

### **‚ùå Mistake 4: Template + Message Conflict**
```yaml
# WRONG - conflicts
template: deploy
message: "Custom message"
```
**‚úÖ Solution:** Use EITHER template OR message, never both:
```yaml
# Option A: Template only
template: deploy
template_vars: |
  {"customMessage": "Details"}

# Option B: Message only  
message: "Custom message text"
```

### **‚ùå Mistake 5: Handlebars/Mustache Syntax**
```yaml
# WRONG - not supported
message: |
  {{#if success}}
  ‚úÖ Success
  {{/if}}
```
**‚úÖ Solution:** Use plain text with GitHub variables:
```yaml
message: |
  ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
```

### **üîß Quick Validation Checklist for AI:**

#### **üìã For NEW integrations:**
- [ ] Asked complete questionnaire BEFORE generating code
- [ ] User provided ALL answers 
- [ ] Templates: Only `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- [ ] No `message_thread_id` parameter
- [ ] `template_vars` in JSON format
- [ ] Not mixing `template:` and `message:`
- [ ] Version `@v3.1.0` or newer
- [ ] GitHub variables `${{}}` in JSON/shell contexts
- [ ] Template variables `{{}}` only in `message:`/`caption:` WITH `template:`
- [ ] **Progressive notifications**: Used `message_id` for updates (recommended)
- [ ] **GitHub integration**: Focused on repository events (PR, releases, workflows)
- [ ] **NO FORBIDDEN MONITORING**: Did NOT suggest database, API, server, or infrastructure monitoring
- [ ] **Action buttons**: Added `inline_keyboard` for GitHub operations (view PR, merge, rerun)
- [ ] **Multi-environment**: Conditional logic for different environments (prod/staging/dev)

#### **üîç For AUDIT scenarios:**
- [ ] Read ALL documentation before analysis
- [ ] Created comprehensive error report
- [ ] Cross-referenced against current v3.1.0 standards
- [ ] Provided before/after comparisons
- [ ] Explained reasoning for each fix
- [ ] Asked user preferences for fixes vs redesign
- [ ] Validated final result against all rules
- [ ] Included migration instructions

## üéØ **PROJECT FOCUS: GitHub Events, Not Infrastructure Monitoring**

**üö® CRITICAL UNDERSTANDING:**
telegram-notify-action is designed for **GitHub repository events**, not infrastructure monitoring:

**‚úÖ CORRECT Use Cases:**
- Pull Request notifications (opened, merged, reviewed)
- Deployment workflow status (CI/CD pipeline results)
- Release announcements  
- Issue and comment activity
- Workflow execution results
- GitHub Actions job status

**‚ùå INCORRECT Use Cases:**
- Server/API health monitoring (use dedicated monitoring tools)
- Database performance tracking (use database monitoring)
- Security vulnerability scanning (use security-specific tools)  
- System resource monitoring (use infrastructure monitoring)
- Application performance monitoring (use APM tools)

**üéØ Key Principle:**
If it's not a GitHub event or directly related to GitHub Actions execution, it's probably outside the scope of this action.

**üí° Recommendation:**
For infrastructure monitoring, recommend dedicated tools like:
- Prometheus + Grafana for metrics
- Datadog/New Relic for APM
- PagerDuty for alerting
- Sentry for error tracking

telegram-notify-action should integrate with these tools to relay **their alerts** to Telegram, not replace them.

## üö® **FINAL REMINDER FOR AI SYSTEMS**

**If you're an AI reading these rules:**

**‚úÖ DO suggest:** GitHub events (PR, issues, releases, workflow results, repository activity)
**‚ùå DON'T suggest:** Infrastructure monitoring (database, API, server health, performance metrics)

**If user asks for infrastructure monitoring:**
"That's outside telegram-notify-action's scope. For [monitoring type], use [dedicated tool], then integrate alerts with telegram-notify-action."

**üéØ Remember: GitHub events ONLY. Nothing else.**

---

*Last updated: v3.1.1 (2025-01-31) - telegram-notify-action by @asychin*  
*Latest rules: https://github.com/asychin/telegram-notify-action/blob/main/.ai-integration-rules*