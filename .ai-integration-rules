# ü§ñ AI Integration Rules for telegram-notify-action

## üìã Mission Statement
Automatically analyze user repositories and intelligently integrate `telegram-notify-action@v3` with optimal configuration based on project structure, existing workflows, and user preferences.

## üîó Source & Usage Information

### üìç **Original Repository**
- **GitHub**: https://github.com/asychin/telegram-notify-action
- **Latest Version**: v3.2.5
- **Action Marketplace**: https://github.com/marketplace/actions/telegram-notify-action

### üìÑ **Get These Rules**
```bash
# Download latest AI integration rules
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules

# Or view in browser
https://github.com/asychin/telegram-notify-action/blob/main/.ai-integration-rules
```

### üß† **For AI Systems**
These rules should be used by AI assistants (ChatGPT, Claude, Copilot, etc.) when users request:

**üÜï NEW INTEGRATION:**
- "Add Telegram notifications to my project"
- "Integrate telegram-notify-action into my workflows"  
- "Set up GitHub Actions notifications"
- "Add deployment notifications"

**üîç EXISTING INTEGRATION AUDIT:**
- "Check my telegram-notify-action setup"
- "Fix errors in my Telegram notifications"
- "Update my old telegram notifications"
- "Review my workflow files for issues"
- "My notifications aren't working properly"

üö® **MANDATORY PROCESS:**

**üìã For NEW integrations:**
1. **NEVER** generate code immediately
2. **ALWAYS** start with full questionnaire from Step 2
3. **WAIT** for complete user responses
4. **NEVER** suggest infrastructure monitoring (database, API, server health checks, etc.)
5. **THEN** generate customized integration
6. This prevents the common problem of generating incorrect integrations

**üîç For EXISTING integration audit:**
1. **FIRST** analyze existing telegram-notify-action code
2. **IDENTIFY** all errors against current rules (v3.2.5)
3. **ASK** user about desired improvements (questionnaire)
4. **PROVIDE** detailed error report with fixes
5. **GENERATE** corrected code with explanations

### üìö **Documentation Links**
- **Full Documentation**: https://github.com/asychin/telegram-notify-action/tree/main/docs
- **English Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/en/README.md
- **Russian Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/ru/README.md
- **Chinese Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/zh/README.md
- **Template System**: https://github.com/asychin/telegram-notify-action/blob/main/docs/en/TEMPLATE-SYSTEM.md
- **Examples**: https://github.com/asychin/telegram-notify-action/tree/main/examples

### üöÄ **Quick Start Reference**
```yaml
# Basic integration example
- name: üì¢ Notify Telegram
  uses: asychin/telegram-notify-action@v3.2.5
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    template: success
    message: "Deployment completed!"
```

### ‚ö†Ô∏è **Important Notes**
- **RECOMMENDED:** Use `@v3.2.5` for COMPLETE security compliance (ZERO vulnerabilities)
- Always use specific version tags (e.g., `@v3.2.5`) not `@main`  
- **SECURITY:** v3.2.5 ELIMINATES ALL vulnerability and injection risks in workflows
- **COMPATIBILITY:** v3.2.1+ fixes JSON parsing errors for inline_keyboard
- These rules are updated with each major release
- Check repository for latest template variables and features

---

## üö® **CRITICAL SECURITY RULES - MANDATORY FOR ALL AI ASSISTANTS**

### ‚ùå **NEVER DO THESE (Shell Injection Risks):**

```yaml
# ‚ùå DANGEROUS: GitHub variables in heredoc
run: |
  cat > file.md << EOF
  Release: ${{ github.event.release.body }}  # ‚Üê SHELL INJECTION!
  EOF

# ‚ùå DANGEROUS: GitHub variables in template_vars JSON  
template_vars: |
  {
    "customMessage": "Repository ${{ github.repository }}"  # ‚Üê INJECTION!
  }

# ‚ùå DANGEROUS: Mixed variables in same context
message: |
  Repository: {{repository}}  # template variable
  Commit: ${{ github.sha }}   # GitHub variable - WRONG CONTEXT!
```

### ‚úÖ **ALWAYS DO THESE (Secure Patterns):**

```yaml
# ‚úÖ SAFE: Base64 encoding for dynamic content
run: |
  CONTENT_B64=$(echo '${{ toJSON(github.event.release.body) }}' | jq -r '.' | base64 -w 0)
  echo "content_b64=${CONTENT_B64}" >> $GITHUB_OUTPUT

# ‚úÖ SAFE: Static text in template_vars
template_vars: |
  {
    "customMessage": "Release published successfully"
  }

# ‚úÖ SAFE: echo commands instead of heredoc
run: |
  echo "Release Notes:" > file.md
  echo "${{ steps.safe-output.outputs.content_b64 }}" | base64 -d >> file.md

# ‚úÖ SAFE: Proper variable usage
message: |
  Repository: {{repository}}
  Branch: {{refName}}
template_vars: |
  {
    "deployStatus": "success"
  }
```

### üîç **SECURITY VERIFICATION:**
- **MANDATORY:** Run `scripts/security-audit.sh` after generating ANY workflow
- **AUTOMATED:** Security script detects all injection patterns automatically
- **VALIDATION:** Script checks heredoc, template_vars, and variable mixing
- **ZERO TOLERANCE:** Any security errors MUST be fixed before deployment

### üõ†Ô∏è **Security Audit Script Usage:**
```bash
# Create and run security audit (add to all AI integrations)
curl -o scripts/security-audit.sh https://raw.githubusercontent.com/asychin/telegram-notify-action/main/scripts/security-audit.sh
chmod +x scripts/security-audit.sh
./scripts/security-audit.sh

# Expected output for secure workflows:
# ‚úÖ No security vulnerabilities found!
# ‚úÖ All workflows follow security best practices
# ‚úÖ All variable usage is correct and safe
```

---

## üîç Repository Analysis Phase

### 1. Repository Structure Analysis
```yaml
analyze_repository:
  project_type:
    - detect: package.json ‚Üí Node.js project
    - detect: requirements.txt/pyproject.toml ‚Üí Python project  
    - detect: pom.xml/build.gradle ‚Üí Java project
    - detect: go.mod ‚Üí Go project
    - detect: Cargo.toml ‚Üí Rust project
    - detect: composer.json ‚Üí PHP project
    - detect: Dockerfile ‚Üí Containerized project
  
  deployment_indicators:
    - check: .github/workflows/*.yml ‚Üí existing CI/CD
    - check: docker-compose.yml ‚Üí local/staging deployment
    - check: k8s/*.yml ‚Üí Kubernetes deployment
    - check: terraform/*.tf ‚Üí Infrastructure as Code
    - check: ansible/*.yml ‚Üí Configuration management
```

### 2. Existing Workflow Analysis
```yaml
workflow_analysis:
  scan_workflows:  
    - path: .github/workflows/
    - identify_jobs: [build, test, deploy, release]
    - detect_triggers: [push, pull_request, release, workflow_dispatch]
    - find_secrets: [TELEGRAM_*, *_TOKEN, *_CHAT_ID]
    - analyze_steps: [checkout, build, docker, deploy]
  
  deployment_patterns:
    simple_deploy: 
      - single job deployment
      - basic build ‚Üí deploy flow
    complex_deploy:
      - multi-stage deployment (build ‚Üí test ‚Üí deploy)
      - matrix deployments
      - environment-specific deployments
    advanced_deploy:
      - progressive deployments
      - rollback capabilities
      - health checks
```

## üí¨ User Interaction Questionnaire

### 1. Core Integration Questions
```yaml
user_questions:
  notification_preference:
    question: "üîî How detailed should your Telegram notifications be?"
    options:
      - basic: "Simple success/failure notifications"
      - detailed: "Include commit info, branch, and duration"
      - dynamic: "Real-time updates with progress tracking"
      - comprehensive: "Full deployment pipeline with statistics"
  
  visual_preference:
    question: "üé® Do you want emojis and visual formatting?"
    options:
      - minimal: "Text-only notifications"
      - standard: "Basic emojis for status"
      - rich: "Rich emojis and formatting"
      - animated: "Progress bars and dynamic indicators"
  
  update_style:
    question: "üì± How should notifications be delivered?"
    options:
      - separate: "Send separate messages for each stage"
      - update: "Update single message with progress"
      - thread: "Use threaded messages in topics"
      - hybrid: "Combine updates with final summary"
```

### 2. Technical Configuration Questions
```yaml
technical_questions:
  deployment_environments:
    question: "üåç Which environments do you deploy to?"
    detect_from: [workflow branches, environment secrets]
    options: [development, staging, production, feature-branches]
  
  notification_triggers:
    question: "‚ö° When should notifications be sent?"
    options:
      - all_events: "Every push, PR, and deployment"
      - deployments_only: "Only deployment workflows"  
      - failures_only: "Only failures and errors"
      - custom: "Specific events and conditions"
  
  file_attachments:
    question: "üìé Should notifications include file attachments?"  
    detect_artifacts: [build logs, test reports, coverage reports]
    options:
      - none: "No file attachments"
      - logs: "Include build/deployment logs"
      - reports: "Include test and coverage reports"
      - screenshots: "Include UI test screenshots"
```

## üß† Intelligence Rules

### 1. Smart Configuration Detection
```yaml
smart_detection:
  secrets_analysis:
    existing_telegram:
      - scan: repository secrets for TELEGRAM_*
      - detect: organization-level telegram configs
      - identify: multi-environment setups
    
    missing_secrets:
      - generate: setup instructions
      - suggest: naming conventions (TELEGRAM_BOT_TOKEN_{ENV})
      - create: environment-specific variables
  
  workflow_optimization:
    job_placement:
      - start_notifications: first job with needs: []
      - progress_notifications: after critical jobs
      - final_notifications: always() condition jobs
    
    conditional_logic:
      - success_path: when all jobs succeed  
      - failure_path: when any job fails
      - partial_success: when some matrix jobs fail
```

### 2. Template Selection Algorithm
```yaml
template_selection:
  basic_project:
    triggers: [simple workflow, < 3 jobs]
    recommended_templates: [success, error, warning, info]
    approach: "Use simple success/error templates with custom messages"
    example: "template: success + customMessage in template_vars"
  
  deployment_project:  
    triggers: [build + deploy jobs, CI/CD pipeline]
    recommended_templates: [deploy, success, error]
    approach: "Use deploy template for main deployments, success/error for steps"
    example: "template: deploy with deployStatus, customMessage variables"
  
  testing_project:
    triggers: [test suites, coverage reports]
    recommended_templates: [test, success, error]
    approach: "Use test template for test results, success/error for completion"
    example: "template: test with testStatus, coverage variables"
  
  release_project:
    triggers: [release workflows, tagging]
    recommended_templates: [release, success, error]
    approach: "Use release template for releases, success/error for build steps"
    example: "template: release (automatic variables from release events)"

  monitoring_project:
    triggers: [health checks, alerts, reporting]
    recommended_templates: [warning, error, info]
    approach: "Use warning for alerts, error for critical issues, info for reports"
    example: "Custom messages with detailed monitoring data"
    
  complex_progressive:
    triggers: [matrix builds, multi-stage deployments]
    recommended_templates: [info, deploy, success, error]
    approach: "Progressive notifications with message updates (message_id)"
    example: "Start with info, update with deploy/success/error, use message_id"

  monitoring_system:
    triggers: [health checks, system monitoring, scheduled tasks]
    recommended_templates: [warning, error, info]
    approach: "Scheduled monitoring with custom messages and critical alerting"
    example: "Cron-based health checks with conditional critical alerts"
    
  progressive_deployment:
    triggers: [complex CI/CD pipelines, multi-stage deployments]
    recommended_templates: [info, deploy, success, error]
    approach: "Single message updates with progress tracking"
    example: "Start notification ‚Üí update progress ‚Üí final result, all same message_id"
```

## üõ†Ô∏è Implementation Strategies

### 1. Non-Disruptive Integration
```yaml
integration_approach:
  minimal_changes:
    - add notification steps without modifying existing logic
    - use conditional notifications (success/failure only)
    - preserve existing workflow structure
  
  enhanced_integration:
    - add progress tracking between existing jobs
    - implement dynamic message updates
    - include deployment statistics and timing
  
  comprehensive_overhaul:
    - restructure workflows for optimal notification flow
    - implement advanced features (file uploads, keyboards)
    - add monitoring and alerting capabilities
```

### 2. Configuration Templates

#### A. Simple Integration (Basic Projects)
```yaml
simple_integration:
  add_to_existing_job:
    - name: üì¢ Notify Deployment Status
      if: always()
      uses: asychin/telegram-notify-action@v3
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        template: ${{ job.status == 'success' && 'success' || 'error' }}
        message: ${{ job.status == 'success' && 'Deployment completed!' || 'Deployment failed!' }}
```

#### B. Dynamic Integration (Advanced Projects)  
```yaml
dynamic_integration:
  start_notification:
    job: notify-start
    capture: message_id, start_time
    template: deployment start with progress bar
  
  progress_updates:
    jobs: [build, test, deploy]  
    action: update existing message
    template: progress with stage completion
  
  final_notification:
    job: notify-complete
    condition: always()
    template: comprehensive summary with timings
```

#### C. Progressive Deployment Integration (Recommended)
```yaml
progressive_deployment:
  # Step 1: Start notification with message_id capture
  start_notification:
    - name: üì¢ Start Deployment Notification
      id: start_notification
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message: |
          üöÄ <b>Deployment Started</b>
          
          <b>üìã Repository:</b> ${{ github.repository }}
          <b>üåø Branch:</b> ${{ github.ref_name }}
          <b>üë§ Actor:</b> ${{ github.actor }}
          
          üìä <b>Progress:</b> <code>‚óè‚óè‚óã‚óã‚óã‚óã‚óã‚óã‚óã‚óã 20%</code>
          
          üîç <b>Status:</b> Starting deployment...

  # Step 2: Update same message during build
  update_build:
    - name: üì¢ Update - Build Stage
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.start_notification.outputs.message_id }}
        message: |
          üöÄ <b>Deployment Progress</b>
          
          <b>üìã Repository:</b> ${{ github.repository }}
          <b>üåø Branch:</b> ${{ github.ref_name }}
          <b>üë§ Actor:</b> ${{ github.actor }}
          
          üìä <b>Progress:</b> <code>‚óè‚óè‚óè‚óè‚óè‚óè‚óã‚óã‚óã‚óã 60%</code>
          üîÑ <b>On Success:</b> <code>‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè 100%</code>
          ‚ùå <b>On Failure:</b> <code>‚óè‚óè‚óè‚óè‚úó‚óã‚óã‚óã‚óã‚óã Failed</code>
          
          üîß <b>Status:</b> Building application...

  # Step 3: Final update with result
  final_notification:
    - name: üì¢ Final Result
      if: always()
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.start_notification.outputs.message_id }}
        template: ${{ job.status == 'success' && 'deploy' || 'error' }}
        template_vars: |
          {
            "deployStatus": "${{ job.status == 'success' && 'successful' || 'failed' }}",
            "customMessage": "${{ job.status == 'success' && 'Deployment completed successfully!' || 'Deployment failed!' }}"
          }
```

#### D. Monitoring System Integration (Recommended)
```yaml
monitoring_system:
  # Scheduled health checks
  health_monitoring:
    name: üîç System Health Check
    on:
      schedule:
        - cron: "*/15 * * * *"  # Every 15 minutes
      workflow_dispatch:
    
    jobs:
      health_check:
        runs-on: ubuntu-latest
        permissions:
          contents: read        # ‚úÖ Basic repository access for notifications
        steps:
          - name: üè• Check System Health
            id: health_check
            run: |
              # Your health check logic here
              echo "status=healthy" >> $GITHUB_OUTPUT
              echo "response_time=245" >> $GITHUB_OUTPUT
              echo "error_count=0" >> $GITHUB_OUTPUT

          - name: üì¢ Health Status Report
            uses: asychin/telegram-notify-action@v3.1.0
            with:
              telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
              chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
              template: info
              template_vars: |
                {
                  "customMessage": "üè• System Health: ${{ steps.health_check.outputs.status || 'unknown' }}\nüìä Response Time: ${{ steps.health_check.outputs.response_time || '0' }}ms\nüö® Errors: ${{ steps.health_check.outputs.error_count || '0' }}"
                }

          - name: üö® Critical Alert
            if: steps.health_check.outputs.status != 'healthy'
            uses: asychin/telegram-notify-action@v3.1.0
            with:
              telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
              chat_id: ${{ secrets.TELEGRAM_ALERT_CHAT_ID }}
              template: error
              template_vars: |
                {
                  "customMessage": "üö® CRITICAL SYSTEM ALERT\n\nüí• Health Check Failed\n‚è∞ Time: ${{ github.event.head_commit.timestamp || 'unknown' }}\nüîó Repository: ${{ github.repository }}"
                }
              inline_keyboard: |
                [
                  [
                    {"text": "üîß Fix Now", "url": "${{ github.server_url }}/${{ github.repository }}/actions"},
                    {"text": "üìä Logs", "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}
                  ]
                ]

  # Weekly summary report
  weekly_report:
    name: üìä Weekly System Report
    on:
      schedule:
        - cron: "0 9 * * 1"  # Every Monday at 9 AM
    
    jobs:
      generate_report:
        runs-on: ubuntu-latest
        permissions:
          contents: read        # ‚úÖ Basic repository access for notifications
        steps:
          - name: üìä Generate Weekly Stats
            id: stats
            run: |
              echo "uptime=99.8" >> $GITHUB_OUTPUT
              echo "avg_response=180" >> $GITHUB_OUTPUT
              echo "incidents=2" >> $GITHUB_OUTPUT

          - name: üìà Weekly Report
            uses: asychin/telegram-notify-action@v3.1.0
            with:
              telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
              chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
              message: |
                üìä <b>Weekly System Report</b>
                <i>$(date -d 'last monday' '+%Y-%m-%d') - $(date -d 'sunday' '+%Y-%m-%d')</i>

                üéØ <b>Uptime:</b> ${{ steps.stats.outputs.uptime }}%
                ‚ö° <b>Avg Response:</b> ${{ steps.stats.outputs.avg_response }}ms
                üö® <b>Incidents:</b> ${{ steps.stats.outputs.incidents }}

                üåø <b>Environment:</b> <code>${{ github.ref_name }}</code>

                ${{ steps.stats.outputs.uptime >= 99.5 && 'üéâ Excellent system performance this week!' || '‚ö†Ô∏è System performance needs attention.' }}
```

#### E. Enterprise Integration (Complex Projects)
```yaml
enterprise_integration:
  features:
    - progressive deployment notifications (message updates)
    - comprehensive monitoring systems (scheduled checks)
    - multi-environment support with conditional logic
    - service-specific progress tracking  
    - failure analysis and debugging info
    - rollback notifications with action buttons
    - health check integration with alerting
    - custom keyboards for manual actions
```

## üìö Documentation Integration

### 1. Auto-Documentation Analysis
```yaml
documentation_check:
  read_current_docs:
    - fetch: latest README.md from telegram-notify-action
    - parse: available templates and variables
    - extract: latest features and breaking changes
    - verify: example compatibility with user's setup
  
  version_compatibility:
    - check: action.yml for current version (v3)
    - validate: deprecated features in user's existing setup
    - suggest: migration paths for older versions
    - warn: about breaking changes
```

### 2. Context-Aware Examples
```yaml
example_generation:
  based_on_project_type:
    node_js:
      - npm install/build examples
      - package.json version in notifications
      - test coverage integration
    
    docker:
      - container build notifications
      - image size and layer information
      - registry push confirmations
    
    kubernetes:
      - deployment status tracking
      - pod health notifications  
      - rollout progress updates
```

## üîí Security and Best Practices

### 1. Secrets Management Rules
```yaml
security_rules:
  token_setup:
    - never: expose tokens in code or logs
    - always: use repository/organization secrets
    - suggest: environment-specific token naming
    - validate: token permissions and chat access
  
  data_privacy:
    - avoid: sensitive data in notifications (passwords, keys)
    - sanitize: error messages and logs
    - limit: information exposure in public repositories
```

### 2. Workflow Security
```yaml
workflow_security:
  permissions:
    - minimal: only required permissions for each job
    - secure: use specific action versions (@v3, not @main)
    - validate: third-party action usage
    - explicit: always declare permissions block when using GitHub API
  
  error_handling:
    - graceful: failure handling without breaking pipelines
    - informative: error messages without sensitive data
    - recoverable: continue-on-error for non-critical notifications
```

### 3. GitHub API Integration and Permissions

‚ö†Ô∏è **CRITICAL:** When generating workflow integrations that use GitHub API calls, ALWAYS include appropriate `permissions:` block.

#### üìã **Required Permissions by API Type:**

```yaml
# üîç Repository monitoring and Actions API
permissions:
  contents: read        # ‚úÖ Required - Basic repository access
  actions: read         # ‚úÖ Required - For workflow runs API
  
# üêõ Issues monitoring  
permissions:
  contents: read        # ‚úÖ Required - Basic repository access
  issues: read          # ‚úÖ Required - For issues and comments API

# üîÑ Pull Requests monitoring
permissions:
  contents: read        # ‚úÖ Required - Basic repository access  
  pull-requests: read   # ‚úÖ Required - For PRs and reviews API

# üìä Complex monitoring (Issues + PRs + Actions)
permissions:
  contents: read        # ‚úÖ Required - Basic repository access
  issues: read          # ‚úÖ Required - For issues API
  pull-requests: read   # ‚úÖ Required - For PRs API  
  actions: read         # ‚úÖ Required - For workflow runs API
```

#### ‚úÖ **Complete Workflow Example with Permissions:**

```yaml
name: üîç GitHub Actions Monitoring
on:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours
  workflow_dispatch:

jobs:
  monitor-workflows:
    name: üîç Monitor GitHub Actions Health
    runs-on: ubuntu-latest
    permissions:
      contents: read      # ‚úÖ Basic repository access
      actions: read       # ‚úÖ For GitHub Actions API
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üìä Analyze workflow runs  
        id: analysis
        run: |
          # Get recent workflow runs (using github.token, not secrets.GITHUB_TOKEN)
          recent_data=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=50")
          
          # Count failures in last 24 hours
          failures=$(echo "$recent_data" | jq --arg date "$(date -u -d '24 hours ago' '+%Y-%m-%dT%H:%M:%SZ')" \
            '[.workflow_runs[] | select(.created_at >= $date and .conclusion == "failure")] | length')
          
          echo "failures=${failures:-0}" >> $GITHUB_OUTPUT
      
      - name: üì¢ Send monitoring alert
        if: steps.analysis.outputs.failures > 2
        uses: asychin/telegram-notify-action@v3.1.0
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: warning
          template_vars: |
            {
              "customMessage": "‚ö†Ô∏è GitHub Actions Alert\\n\\nüö® Failed runs: ${{ steps.analysis.outputs.failures }}\\nüè∑Ô∏è Repository: ${{ github.repository }}\\n‚è∞ Last 24 hours"
            }
```

#### üö® **Common Permission Errors:**

```yaml
# ‚ùå WRONG - Missing permissions block
jobs:
  monitor:
    runs-on: ubuntu-latest
    # Missing permissions block!
    steps:
      - run: curl -H "Authorization: token ${{ github.token }}" api.github.com/...
        # Will fail with 403 Forbidden

# ‚ùå WRONG - Using non-existent permission  
permissions:
  contents: read
  metadata: read        # ‚ùå ERROR: 'metadata' permission doesn't exist!

# ‚ùå WRONG - Missing required permission
permissions:
  contents: read        # ‚úÖ OK
  # Missing 'actions: read' for workflow runs API
  
# ‚úÖ CORRECT - Proper permissions
permissions:
  contents: read        # ‚úÖ Basic access
  actions: read         # ‚úÖ For workflow runs API
```

#### üîß **API Troubleshooting:**

**Problem:** `HTTP 403 Forbidden` from GitHub API  
**Solution:** Add missing permissions to workflow job:
```yaml
permissions:
  contents: read
  actions: read         # Add this for workflow runs API
  issues: read          # Add this for issues API  
  pull-requests: read   # Add this for PRs API
```

**Problem:** `HTTP 404 Not Found` from Actions API  
**Solution:** Check if Actions are enabled in repository settings:
- Repository ‚Üí Settings ‚Üí Actions ‚Üí General
- Ensure "Actions permissions" allows workflow runs
- Check "Workflow permissions" has read access

## üîó GitHub Events Integration Patterns

### 1. Issues and Comments Monitoring

```yaml
name: üêõ Issues Notifications
on:
  issues:
    types: [opened, closed, reopened, assigned, labeled]
  issue_comment:
    types: [created, edited, deleted]

jobs:
  issue-notification:
    name: üì¢ Issue Activity Notification  
    runs-on: ubuntu-latest
    permissions:
      contents: read        # ‚úÖ Basic repository access
      issues: read          # ‚úÖ Required for issues API
    
    steps:
      - name: üì¢ Send Issue notification
        uses: asychin/telegram-notify-action@v3.1.0
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            üêõ <b>Issue ${{ github.event.action }}</b>
            
            <b>üìã Title:</b> ${{ github.event.issue.title }}
            <b>üîó Issue:</b> #${{ github.event.issue.number }}
            <b>üë§ Author:</b> @${{ github.event.issue.user.login }}
            <b>üè∑Ô∏è Repository:</b> ${{ github.repository }}
          inline_keyboard: |
            [
              [
                {"text": "üëÄ View Issue", "url": "${{ github.event.issue.html_url }}"},
                {"text": "üìù Comment", "url": "${{ github.event.issue.html_url }}#issuecomment-new"}
              ]
            ]
```

### 2. Pull Request Monitoring  

```yaml
name: üîî Pull Request Notifications
on:
  pull_request:
    types: [opened, closed, reopened, ready_for_review]
  pull_request_review:
    types: [submitted, edited, dismissed]

jobs:
  pr-notification:
    name: üì¢ PR Activity Notification
    runs-on: ubuntu-latest
    permissions:
      contents: read        # ‚úÖ Basic repository access
      pull-requests: read   # ‚úÖ Required for PRs API
    
    steps:
      - name: üì¢ Send PR notification
        uses: asychin/telegram-notify-action@v3.1.0
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            üîÑ <b>Pull Request ${{ github.event.action }}</b>
            
            <b>üìã Title:</b> ${{ github.event.pull_request.title }}
            <b>üë§ Author:</b> @${{ github.event.pull_request.user.login }}
            <b>üåø Branch:</b> ${{ github.head_ref || github.ref_name }} ‚Üí ${{ github.base_ref }}
            <b>üìä Changes:</b> +${{ github.event.pull_request.additions || 0 }} -${{ github.event.pull_request.deletions || 0 }}
          inline_keyboard: |
            [
              [
                {"text": "üëÄ View PR", "url": "${{ github.event.pull_request.html_url }}"},
                {"text": "üìä View Files", "url": "${{ github.event.pull_request.html_url }}/files"}
              ]
            ]
```

### 3. Release and Tag Monitoring

```yaml
name: üè∑Ô∏è Release Notifications  
on:
  release:
    types: [published, prereleased, created]
  create:  # For tags
  delete:  # For tags

jobs:
  release-notification:
    name: üì¢ Release Activity Notification
    runs-on: ubuntu-latest
    permissions:
      contents: read        # ‚úÖ Basic repository access (releases via events, not API)
    
    steps:
      - name: üì¢ Send Release notification  
        if: github.event_name == 'release'
        uses: asychin/telegram-notify-action@v3.1.0
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: release
          template_vars: |
            {
              "customMessage": "üéâ <b>Release Published</b>\\n\\nüè∑Ô∏è <b>Version:</b> ${{ github.event.release.tag_name }}\\nüë§ <b>Author:</b> @${{ github.event.release.author.login }}\\nüè∑Ô∏è <b>Repository:</b> ${{ github.repository }}"
            }
          inline_keyboard: |
            [
              [
                {"text": "üì¶ Download Release", "url": "${{ github.event.release.html_url }}"},
                {"text": "üìã View Release", "url": "${{ github.event.release.html_url }}"}
              ]
            ]
```

### 4. Advanced Workflow Monitoring

```yaml
name: üìä Weekly Repository Reports
on:
  schedule:
    - cron: "0 9 * * 1"  # Every Monday at 9 AM UTC
  workflow_dispatch:

jobs:
  weekly-report:
    name: üìà Generate Weekly Report
    runs-on: ubuntu-latest
    permissions:
      contents: read        # ‚úÖ Basic repository access
      issues: read          # ‚úÖ For issues statistics
      pull-requests: read   # ‚úÖ For PRs statistics  
      actions: read         # ‚úÖ For workflow runs statistics
    
    steps:
      - name: üìä Collect repository statistics
        id: stats  
        run: |
          # GitHub API calls using github.token
          
          # Get PRs opened this week
          START_DATE="$(date -d 'last monday' '+%Y-%m-%dT00:00:00Z')"
          END_DATE="$(date -d 'sunday' '+%Y-%m-%dT23:59:59Z')"
          
          # Get PRs (using proper authentication)
          prs_data=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=all&per_page=100&sort=created&direction=desc")
          prs_opened=$(echo "$prs_data" | jq --arg start "$START_DATE" --arg end "$END_DATE" \
            '[.[] | select(.created_at >= $start and .created_at <= $end)] | length')
            
          # Get workflow runs
          runs_data=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100")
          successful_runs=$(echo "$runs_data" | jq --arg start "$START_DATE" --arg end "$END_DATE" \
            '[.workflow_runs[] | select(.created_at >= $start and .created_at <= $end and .conclusion == "success")] | length')
          
          echo "prs_opened=${prs_opened:-0}" >> $GITHUB_OUTPUT
          echo "successful_runs=${successful_runs:-0}" >> $GITHUB_OUTPUT
      
      - name: üì¢ Send Weekly Report
        uses: asychin/telegram-notify-action@v3.1.0
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          template_vars: |
            {
              "customMessage": "üìä <b>Weekly Repository Report</b>\\n\\nüè∑Ô∏è <b>Repository:</b> ${{ github.repository }}\\nüîÑ <b>PRs Opened:</b> ${{ steps.stats.outputs.prs_opened }}\\n‚úÖ <b>Successful Runs:</b> ${{ steps.stats.outputs.successful_runs }}\\nüìÖ <b>Period:</b> $(date -d 'last monday' '+%Y-%m-%d') to $(date -d 'sunday' '+%Y-%m-%d')"
            }
```

### 5. Event-Specific Authentication Rules

```yaml
# ‚úÖ Use github.token for API calls (recommended)
api_authentication:
  preferred: ${{ github.token }}          # Built-in token with job permissions
  alternative: ${{ secrets.GITHUB_TOKEN }} # Custom token (higher permissions)
  
  # Choose based on needs:
  github_token:
    - pros: ["Automatic permissions based on job config", "No setup required", "Secure by default"]
    - cons: ["Limited to job permissions", "Cannot access private repos outside current"]
    - use_when: "Standard repository monitoring and API access"
  
  secrets_github_token:  
    - pros: ["Full repository access", "Can access external repositories", "Custom permissions"]
    - cons: ["Requires manual setup", "Security risk if overprivileged", "Repository secret needed"]
    - use_when: "Cross-repository access or advanced API operations"
```

## üß™ Testing and Validation

### 1. Integration Testing Strategy
```yaml
testing_approach:
  dry_run:
    - simulate: notification sending without actual Telegram calls
    - validate: message formatting and variable substitution
    - check: conditional logic and job dependencies
  
  staging_test:
    - test: with actual Telegram bot in test environment
    - verify: message delivery and formatting
    - validate: file attachments and special features
  
  production_validation:
    - gradual: rollout with limited notifications
    - monitor: delivery success and error rates
    - feedback: user experience and preferences
```

### 2. Quality Assurance Rules
```yaml
quality_rules:
  message_quality:
    - readable: clear and informative messages
    - actionable: include relevant links and context
    - timely: sent at appropriate workflow stages
  
  performance_impact:
    - minimal: workflow execution time increase
    - reliable: handle Telegram API rate limits
    - resilient: graceful degradation on service issues
```

## üéØ Success Metrics and Monitoring

### 1. Integration Success Criteria
```yaml
success_metrics:
  technical:
    - workflow_completion: no broken pipelines
    - notification_delivery: > 95% success rate
    - user_satisfaction: positive feedback on usefulness
  
  adoption:
    - feature_usage: utilization of advanced features
    - customization: user-specific template modifications
    - retention: continued usage over time
```

### 2. Continuous Improvement
```yaml
improvement_cycle:
  feedback_collection:
    - monitor: common configuration patterns
    - analyze: frequent customization requests  
    - identify: missing features or templates
  
  template_evolution:
    - update: templates based on usage patterns
    - add: new variables for common use cases
    - optimize: message formatting for different project types
```

## üöÄ Deployment Automation

### 1. Auto-PR Generation
```yaml
automated_integration:
  pr_creation:
    title: "üîî Add Telegram Notifications with telegram-notify-action"
    description: |
      This PR adds intelligent Telegram notifications to your workflows using telegram-notify-action@v3.
      
      ## üìã What's Added:
      - [x] Deployment success/failure notifications
      - [x] Real-time progress updates  
      - [x] Rich formatting with emojis
      - [x] Secure secrets configuration
      
      ## ‚öôÔ∏è Configuration Required:
      1. Add `TELEGRAM_BOT_TOKEN` to repository secrets
      2. Add `TELEGRAM_CHAT_ID` to repository secrets
      3. Review and customize notification preferences
      
      ## üß™ Testing:
      - Notifications will be sent to specified chat
      - Use test deployments to verify configuration
    
    files_modified:
      - .github/workflows/*.yml
      - README.md (optional documentation update)
    
    review_checklist:
      - [ ] Secrets are properly configured
      - [ ] Notification timing is appropriate  
      - [ ] Message content is relevant
      - [ ] No sensitive data in notifications
```

## üìñ How to Use These Rules

### ü§ñ **For AI Assistants**
When a user requests Telegram notifications integration:

1. **Check for existing `.ai-integration-rules`** in their repository
2. **If found**: Use their customized rules (they may have modified these)
3. **If not found**: Apply these standard rules from telegram-notify-action repository

### üë®‚Äçüíª **For Developers** 
```bash
# Add these rules to your repository for consistent AI integration
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules

# Customize the rules for your specific project needs
# AI assistants will use your customized version when helping with integrations
```

### üîÑ **Keeping Rules Updated**
```bash
# Check for updates (compare versions)
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules | head -10

# Update to latest version  
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules
```

### üéØ **AI Usage Instructions**

#### **Step 1: Repository Analysis**
- Scan project structure and existing workflows
- Identify deployment patterns and CI/CD setup
- Check for existing Telegram integration

#### **Step 2: MANDATORY User Questionnaire**
üö® **CRITICAL:** Before generating ANY code, AI MUST ask ALL questions and wait for user responses.

**üî¥ STOP HERE - DO NOT PROCEED WITHOUT USER ANSWERS!**

**ü§ñ FIRST: AI Model Self-Identification**
Before asking questions, AI MUST identify itself:
- If AI is Claude Sonnet 3.x or 4.x: Continue normally
- If AI is NOT Sonnet 3.x/4.x: Display warning: "‚ö†Ô∏è These rules are optimized for Claude Sonnet 3.x/4.x. Other AI models may have different capabilities. Recommended to use Sonnet for best results, but proceeding anyway..."

**üìù Answer Format:** User must respond with [y] for YES or [n] for NO in brackets for each question.
**Example:** "1. [y]  2. [n]  3. [y]  4. [n]..." or on separate lines with numbers.

Ask the user these REQUIRED questions:

**üìã Notification Types (answer [y] or [n] for each):**
1. "üî® Do you want build/compilation result notifications?" [ ]
2. "üöÄ Do you want deployment status notifications?" [ ]
3. "üß™ Do you want test result notifications?" [ ]
4. "üè∑Ô∏è Do you want release announcement notifications?" [ ]
5. "üîÑ Do you want pull request update notifications?" [ ]

**üé® Notification Style:**
6. "üìä Do you want detailed notifications with metrics and timings?" [ ]
   (If [n], will use standard format with basic status + commit info)
7. "üé≠ Do you want rich formatting with lots of emojis?" [ ]
   (If [n], will use minimal text-only format)
   
**üåç Language & Format:**
8. "üó£Ô∏è Do you want notifications in English?" [ ]
   (If [n], AI will ask: Which language? Russian/Chinese/Other?)
9. "‚ú® Do you want visual message formatting?" [ ]
   (Emojis, bold text, structured layout. If [n], plain text only)
10. "üìù Do you prefer Markdown or HTML formatting?" [ ]
    (If [y] = Markdown: **bold**, *italic* | If [n] = HTML: <b>bold</b>, <i>italic</i>)
    (DEFAULT: Markdown - if user doesn't specify parse_mode, use Markdown formatting)

**‚öôÔ∏è Technical Setup:**
11. "üè¢ Do you want notifications for Production environment?" [ ]
12. "üß™ Do you want notifications for Staging environment?" [ ]
13. "üíª Do you want notifications for Development environment?" [ ]
14. "üåø Do you want notifications for all feature branches?" [ ]

15. "üîê Do you already have Telegram bot TOKEN and CHAT_ID?" [ ]
    (If [n], I'll provide setup instructions)

**‚ö° Delivery Method:**
16. "üì® Do you want progressive updates (single message that updates)?" [ ]
    (If [n], will send separate messages for each event)

**üîç Repository Monitoring:**
17. "üìä Do you want notifications for GitHub Actions workflow results?" [ ]
    (Build, test, deploy pipeline status notifications)
18. "üîÑ Do you want notifications for Pull Request activity?" [ ]
    (PR opened, merged, reviewed, code changes)
19. "üêõ Do you want notifications for GitHub Issues activity?" [ ]
    (New issues, comments, label changes, assignments)
20. "üè∑Ô∏è Do you want notifications for Releases and Tags?" [ ]
    (New releases, pre-releases, tag creation)
21. "üìà Do you want weekly/monthly repository summary reports?" [ ]
    (Commit statistics, PR metrics, issue resolution stats)

**üéØ Advanced Features:**
22. "üöÄ Do you want interactive action buttons in messages?" [ ]
    (Buttons for: View PR, Approve, Merge, Rerun Workflow, Create Issue)
23. "üìä Do you want real-time progress bars during CI/CD?" [ ]
    (Visual progress: Build ‚óè‚óè‚óè‚óã‚óã ‚Üí Test ‚óè‚óè‚óè‚óè‚óã ‚Üí Deploy ‚óè‚óè‚óè‚óè‚óè | On failure: Build ‚óè‚óè‚óè‚úó‚óã)
24. "üåç Do you want different notification rules per environment?" [ ]
    (Production: all alerts, Staging: important only, Dev: minimal)
25. "üìé Do you want file attachments?" [ ]
    (Attach build logs, test reports, coverage reports to messages)

**‚è∞ Scheduled Workflows:**
26. "‚è∞ Do you want any scheduled/automatic workflows?" [ ]
    (Weekly reports, health checks, maintenance notifications, etc.)

**üìã Message Organization:**
27. "üßµ Do you want to send notifications to specific Telegram topics/threads?" [ ]
    (Organize messages by topics in group chats)
28. "üìä Do you want to split different notification types into separate topics?" [ ]
    (Build notifications in one topic, deploy in another, issues in third, etc.)

**üö® WAIT FOR ALL ANSWERS BEFORE PROCEEDING TO STEP 3!**

### **‚è∞ MANDATORY: Scheduler Configuration (if question 26 = [y])**

**If user answered [y] to question 26, AI MUST ask about scheduling preferences:**

**üìÖ Schedule Configuration Questions:**
```
üïê You selected scheduled workflows. I need to configure the timing:

üìä **For repository summary reports:**
Current default: Weekly on Monday at 9:00 AM UTC
- Do you want to keep this schedule? [y/n]
- If [n]: "Please describe your preferred schedule in your own words"
  Examples: 
  ‚Ä¢ "Every day at 12:00 except Friday and Saturday"
  ‚Ä¢ "Every 6 hours during weekdays only"  
  ‚Ä¢ "First Monday of each month at 9 AM"
  ‚Ä¢ "Every Tuesday and Thursday at 8:30 AM"

üîç **For health checks/monitoring:**
Current default: None (triggered by events only)
- Do you want periodic health checks? [y/n]
- If [y]: "How often should I check system health?"
  Examples:
  ‚Ä¢ "Every 30 minutes during business hours"
  ‚Ä¢ "Every 2 hours, but not at night"
  ‚Ä¢ "Once per hour from 9 AM to 6 PM on weekdays"
  ‚Ä¢ "Every 4 hours, pause on weekends"

üí° **AI Recommendations:**
- For reports: Weekly/daily is usually optimal
- For health checks: 30min-4hours depending on criticality  
- Avoid: Every few minutes (too noisy), very complex schedules
```

**üîß AI Processing Rules:**
1. **Parse user's free-form schedule descriptions**
2. **Convert to valid cron expressions**
3. **Suggest optimizations** if user's schedule seems problematic
4. **Provide timezone clarification** (default to UTC, ask if unclear)
5. **Include schedule explanation** in generated workflow comments

**üìù Common Schedule Patterns:**
```yaml
# Every day at 12:00 UTC except weekends
- cron: '0 12 * * 1-5'

# Every 6 hours during weekdays (6AM, 12PM, 6PM, 12AM)
- cron: '0 6,12,18,0 * * 1-5'

# First Monday of each month at 9 AM UTC  
- cron: '0 9 1-7 * 1'

# Every Tuesday and Thursday at 8:30 AM UTC
- cron: '30 8 * * 2,4'

# Every 2 hours from 9 AM to 6 PM on weekdays
- cron: '0 9,11,13,15,17 * * 1-5'
```

### **üßµ MANDATORY: Topics Configuration (if question 27 or 28 = [y])**

**If user answered [y] to question 27 or 28, AI MUST ask about topic organization:**

**üìã Topic Configuration Questions:**
```
üßµ You selected Telegram topics for message organization. I need configuration details:

üìä **For question 27 (specific topics):**
- Do you already have topic IDs set up? [y/n]
- If [y]: "Please list your GitHub Secrets keys for topic IDs"
  Examples: 
  ‚Ä¢ TELEGRAM_TOPIC_DEPLOY, TELEGRAM_TOPIC_BUILD, TELEGRAM_TOPIC_ISSUES
  ‚Ä¢ DEPLOY_TOPIC_ID, BUILD_TOPIC_ID, PR_TOPIC_ID
  ‚Ä¢ TOPIC_PRODUCTION, TOPIC_STAGING, TOPIC_DEVELOPMENT

üìã **For question 28 (split by notification types):**
- How many different topics do you want? [number]
- What types of notifications per topic?
  Examples:
  ‚Ä¢ Topic 1: Build/Test results
  ‚Ä¢ Topic 2: Deployment notifications  
  ‚Ä¢ Topic 3: PR/Issues activity
  ‚Ä¢ Topic 4: Security/Error alerts
  ‚Ä¢ Topic 5: Scheduled reports
  
üîë **GitHub Secrets Configuration:**
"Please provide the SECRET KEYS (not values) you'll use for topic IDs:"
Examples:
‚Ä¢ TELEGRAM_BUILD_TOPIC_ID
‚Ä¢ TELEGRAM_DEPLOY_TOPIC_ID  
‚Ä¢ TELEGRAM_ISSUES_TOPIC_ID
‚Ä¢ TELEGRAM_REPORTS_TOPIC_ID

üí° **AI Recommendations:**
- Use descriptive secret names for clarity
- Group related notification types in same topic
- Limit to 3-5 topics maximum (avoid over-organization)
- Always include fallback to main chat if topic fails
```

**üîß AI Processing Rules for Topics:**
1. **Validate secret key naming** (should be clear and consistent)
2. **Generate topic-specific configurations** for each workflow type
3. **Include fallback mechanisms** if topic ID is not available
4. **Provide setup instructions** for creating topics in Telegram
5. **Add topic organization to integration plan**

### **üìä MANDATORY: Progress Bars Configuration (if question 23 = [y])**

**If user answered [y] to question 23, AI MUST implement progress bars correctly:**

**üìä Progress Bar Rules:**
```
üîÑ Progress Bar Symbols:
‚óè = Completed step (filled circle)
‚óã = Pending step (empty circle)  
‚úó = Failed/interrupted step (cross mark)

üìà Progress Bar Examples:
üîÑ In Progress: ‚óè‚óè‚óè‚óã‚óã‚óã‚óã‚óã‚óã‚óã 30%
‚úÖ Success: ‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè 100%
‚ùå Failed: ‚óè‚óè‚óè‚óè‚úó‚óã‚óã‚óã‚óã‚óã Failed at step 5
‚ö†Ô∏è Partial: ‚óè‚óè‚óè‚óè‚óè‚óè‚úó‚óã‚óã‚óã Warning at step 7

üéØ Multi-Stage Progress:
Build: ‚óè‚óè‚óè‚óè‚óã (80%) ‚Üí Test: ‚óè‚óè‚óã‚óã‚óã (40%) ‚Üí Deploy: ‚óã‚óã‚óã‚óã‚óã (0%)
Build: ‚óè‚óè‚óè‚óè‚óè (100%) ‚Üí Test: ‚óè‚óè‚óè‚óè‚óè (100%) ‚Üí Deploy: ‚óè‚óè‚óè‚óè‚óè (100%)
Build: ‚óè‚óè‚óè‚úó‚óã (Failed) ‚Üí Test: ‚óã‚óã‚óã‚óã‚óã (Skipped) ‚Üí Deploy: ‚óã‚óã‚óã‚óã‚óã (Skipped)
```

**üîß AI Processing Rules for Progress Bars:**
1. **Use ‚óè for completed steps**, ‚óã for pending steps, ‚úó for failed steps
2. **Always show percentage or status** next to progress bar
3. **Update same message** using message_id for real-time progress
4. **Include stage names** for multi-step processes (Build ‚Üí Test ‚Üí Deploy)
5. **Show failure point clearly** with ‚úó symbol and descriptive text
6. **Maintain consistent bar length** (usually 5-10 symbols)
7. **Add progress to integration plan** with update strategy

### **üö´ FORBIDDEN: What AI Must NEVER Suggest**

**‚ùå NEVER suggest these types of monitoring (outside project scope):**
- Database connection checks
- API response time monitoring  
- Server health monitoring
- System resource monitoring (CPU, memory, disk)
- Application performance monitoring (APM)
- Security vulnerability scanning
- Infrastructure health checks
- Service availability monitoring
- Network monitoring
- Log analysis systems
- Scheduled system health checks (e.g., "every 15 minutes")
- External service monitoring

**üö® If user asks for these, respond:**
"That's outside the scope of telegram-notify-action, which focuses on GitHub repository events. For [specific monitoring type], I recommend using dedicated tools like Prometheus, Datadog, New Relic, or PagerDuty, then integrate their alerts with telegram-notify-action."

**‚úÖ ONLY suggest GitHub-related monitoring:**
- Workflow execution results (CI/CD pipeline status)
- Pull Request activity (opened, merged, reviewed)
- Issue and comment activity  
- Release notifications (published, created)
- Deployment status from GitHub Actions workflows
- Repository events (push, branch creation, repository settings)
- GitHub Actions job success/failure
- Scheduled **repository** reports (weekly stats, contributor activity)

**üéØ Remember: If it's not a GitHub event, don't suggest it!**

## üîç **EXISTING INTEGRATION AUDIT PROCESS**

### **When User Has Existing telegram-notify-action Code**

If user mentions existing implementation, provides files, or asks to "fix/check/update" notifications:

#### **Audit Step 1: Comprehensive Code Analysis**

**üîç MANDATORY: Analyze ALL provided files for these errors:**

1. **‚ùå Template Validation Errors:**
   - Non-existent templates: `deployment_start`, `monitoring_report`, `critical_alert`, etc.
   - ONLY valid: `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`

2. **‚ùå Deprecated Parameter Errors:**
   - `message_thread_id` parameter (removed in v3.0+)
   - Old version references (`@v1`, `@v2`, `@main`)
   - Deprecated input names from older versions

3. **‚ùå Format Errors:**
   ```yaml
   # WRONG - bash style
   template_vars: |
     status=success
     message=Hello
   
   # CORRECT - JSON format  
   template_vars: |
     {
       "status": "success",
       "message": "Hello"
     }
   ```

4. **‚ùå Parameter Conflict Errors:**
   ```yaml
   # WRONG - both template and message
   template: deploy
   message: "Custom message"
   
   # CORRECT - either template OR message
   template: deploy
   template_vars: |
     {"customMessage": "Details"}
   ```

5. **‚ùå Variable Scope Errors:**
   ```yaml
   # WRONG - template variables in JSON/shell context
   template_vars: |
     {
       "msg": "Repository {{repository}}"
     }
   run: echo "{{repository}}"
   
   # CORRECT - GitHub variables in JSON/shell
   template_vars: |
     {
       "msg": "Repository ${{ github.repository }}"
     }
   run: echo "${{ github.repository }}"
   ```

6. **‚ùå Syntax Errors:**
   - Handlebars/Mustache syntax: `{{#if}}`, `{{#each}}`
   - Invalid YAML structure
   - Missing required parameters

#### **Audit Step 2: Documentation Cross-Reference**

**üìö MANDATORY: Read ALL documentation before audit:**

üö® **CRITICAL:** AI MUST read and understand these docs before analyzing user code:

1. **Template System Documentation:**
   ```bash
   https://github.com/asychin/telegram-notify-action/blob/main/docs/en/TEMPLATE-SYSTEM.md
   ```
   - Full list of available variables
   - Template variable vs GitHub variable usage rules
   - Examples of correct variable usage

2. **Main Documentation (All Languages):**
   ```bash
   https://github.com/asychin/telegram-notify-action/blob/main/docs/en/README.md
   https://github.com/asychin/telegram-notify-action/blob/main/docs/ru/README.md  
   https://github.com/asychin/telegram-notify-action/blob/main/docs/zh/README.md
   ```
   - Current parameters and their usage
   - Deprecated features and migration paths
   - Version compatibility information

3. **Examples Repository:**
   ```bash
   https://github.com/asychin/telegram-notify-action/tree/main/examples
   ```
   - Current best practices
   - Correct implementation patterns
   - Real-world usage examples

4. **Validation Steps:**
   - Cross-reference used variables with documented variables
   - Check if custom variables are passed via `template_vars`
   - Compare used features against current version capabilities
   - Identify deprecated/removed features
   - Validate YAML structure and parameter combinations

#### **Audit Step 3: Error Report Generation**

**üìã MANDATORY: Create detailed error report:**

```markdown
# üîç Telegram-Notify-Action Audit Report

## ‚ùå Errors Found: [X] issues

### 1. Template Errors ([count])
- Line X: `template: deployment_start` ‚Üí Use `template: deploy`
- Line Y: `template: monitoring_report` ‚Üí Use custom `message:` instead

### 2. Parameter Errors ([count])  
- Line X: `message_thread_id` ‚Üí Remove (deprecated in v3.0+)
- Line Y: `@v2` ‚Üí Update to `@v3.1.0`

### 3. Format Errors ([count])
- Line X: bash-style template_vars ‚Üí Convert to JSON format
- Line Y: template + message conflict ‚Üí Choose one approach

[Continue for all error categories...]

## ‚úÖ Recommendations
1. Update to `asychin/telegram-notify-action@v3.1.0`
2. Replace custom templates with built-in templates
3. Convert template_vars to JSON format
4. Remove deprecated parameters
5. Fix variable scope issues

## üìã Next Steps
Would you like me to:
- [ ] Generate corrected versions of all files
- [ ] Explain each fix in detail  
- [ ] Update to different notification preferences
- [ ] Add new notification types
```

#### **Audit Step 4: User Preference Collection**

**After error report, ask user:**

1. "üîß Do you want to keep the same notification behavior, or would you like to improve it?"
2. "üìã Should I fix errors while maintaining current functionality, or redesign based on your preferences?"
3. If redesign: Use full questionnaire from Step 2
4. If maintain: Proceed with minimal fixes

#### **Audit Step 5: Generate Corrected Code**

**Based on audit and user preferences:**

1. **Create corrected versions** of all problematic files
2. **Show before/after comparisons** for each fix
3. **Explain reasoning** for each change
4. **Validate final result** against all rules
5. **Provide migration instructions**

### **Example Audit Interaction Flow**

```
üë§ User: "Check my telegram notifications, they have errors"
[Provides files with custom templates, deprecated parameters]

ü§ñ AI: "I'll audit your telegram-notify-action setup against v3.2.5 standards.

üîç **ANALYSIS COMPLETE - Found 15 errors:**

‚ùå **Template Errors (8):**
- monitoring.yaml:134: `template: monitoring_report` (doesn't exist)
- deployment.yaml:42: `template: deployment_start` (doesn't exist)  
[... detailed list ...]

‚ùå **Deprecated Parameters (4):**
- monitoring.yaml:133: `message_thread_id` (removed in v3.0+)
[... detailed list ...]

‚ùå **Format Errors (3):**
- Line 136: bash-style template_vars (should be JSON)
[... detailed list ...]

üìã **Recommendations:**
1. Replace custom templates with built-in: deploy, success, error
2. Remove message_thread_id parameters  
3. Convert template_vars to JSON format
4. Update to @v3.1.0

üîß **Next Steps:**
Do you want me to:
- [ ] Fix all errors while keeping same behavior
- [ ] Redesign notifications with better approach  
- [ ] Explain each fix in detail first"

üë§ User: "Fix all errors, keep same behavior"

ü§ñ AI: "Perfect! Here are your corrected files with explanations..."
[Provides fixed versions with before/after comparisons]
```

### **üîß Quick Audit Checklist for AI**

**Before providing audit results, verify ALL items:**

- [ ] **Templates:** All templates are built-in (`success`, `error`, `warning`, `info`, `deploy`, `test`, `release`)
- [ ] **Parameters:** No `message_thread_id` or other deprecated parameters  
- [ ] **Versions:** Using `@v3.2.5` or newer (not `@main`, `@v1`, `@v2`) - examples show v3.1.0 for reference
- [ ] **template_vars:** All in JSON format, no bash-style assignments
- [ ] **Conflicts:** No mixing of `template:` and `message:` parameters
- [ ] **Variable Scopes:** `{{}}` only in `message:`/`caption:` WITH `template:`, `${{}}` in JSON/shell
- [ ] **Syntax:** No Handlebars (`{{#if}}`, `{{#each}}`) or invalid YAML
- [ ] **Documentation:** Cross-referenced against current docs
- [ ] **Variables:** All used variables exist in documentation or passed via `template_vars`
- [ ] **Migration:** Provided clear upgrade path for deprecated features

### **üìä Audit Error Categories Priority**

**üî¥ Critical (Must Fix):**
- Non-existent templates 
- Deprecated parameters (`message_thread_id`)
- Wrong variable scopes
- Version references to non-existent versions

**üü° Important (Should Fix):**  
- template_vars format (bash ‚Üí JSON)
- Template + message conflicts
- Version updates (`@v2` ‚Üí `@v3.1.0`)

**üü¢ Minor (Nice to Fix):**
- Code formatting and organization
- Adding more informative messages
- Optimization of notification frequency

#### **Step 3: Create Integration Plan (MANDATORY BEFORE CODE)**

**üö® CRITICAL: AI MUST create integration plan BEFORE any code generation!**

**üìã Integration Plan Requirements:**
1. **Check for existing plan:** Look for `noty4u-integration-plan.md` in project root
2. **If plan exists:** ‚ùå **STOP! Display error:** "‚ö†Ô∏è Integration plan file `noty4u-integration-plan.md` already exists! Please delete the old file before proceeding. This prevents conflicts and ensures clean integration."
3. **If no plan exists:** ‚úÖ Create new plan file

**üìù Plan File Structure (`noty4u-integration-plan.md`):**
```markdown
# Telegram Notify Integration Plan

## üìä User Requirements Summary
[Parse and list all [y]/[n] answers with explanations]

## üéØ Integration Scope  
[What will be implemented based on user answers]

## ‚è∞ Scheduled Workflows Configuration
[If user selected scheduled workflows (question 25 = [y])]
- Summary reports schedule: [user's preference converted to cron]
- Health checks schedule: [user's preference converted to cron] 
- Timezone: [UTC or user-specified]
- Schedule reasoning: [why this schedule was chosen]

## üßµ Telegram Topics Configuration
[If user selected topics (question 26 or 27 = [y])]
- Topic organization type: [specific topics vs split by notification types]
- Number of topics: [user-specified number]
- Secret keys mapping: [list of GitHub Secrets keys for topic IDs]
- Topic assignments: [which notification types go to which topics]
- Fallback strategy: [what happens if topic ID is missing]

## üìä Progress Bars Configuration
[If user selected progress bars (question 22 = [y])]
- Progress bar style: [‚óè for completed, ‚óã for pending, ‚úó for failed]
- Update strategy: [progressive message updates using message_id]
- Progress stages: [Build ‚Üí Test ‚Üí Deploy or custom stages]
- Failure handling: [show failure point with ‚úó and descriptive status]
- Bar length: [5-10 symbols for optimal display]

## üìÇ Files to Create/Modify
[List all workflow files, modifications, new files]

## üîß Technical Implementation
[Templates to use, variables needed, configurations]

## üîê Required Secrets
[List GitHub Secrets needed: TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, etc.]

## üìã Testing Plan
[How to test the integration, including scheduled workflow testing]

## üö® Potential Issues & Solutions
[Common problems and troubleshooting, including cron schedule issues]
```

**üìÅ .gitignore Update:**
- **ALWAYS** add `noty4u-integration-plan.md` to `.gitignore`
- This keeps integration plans out of version control
- Add line: `# Telegram integration plans` and `noty4u-integration-plan.md`

#### **Step 4: Generate Integration (ONLY after plan creation)**
- **Parse user [y]/[n] answers:** Interpret each [y] as "YES, include this feature" and [n] as "NO, skip this"
- Apply appropriate template based on user answers and created plan
- Create workflow files based on user responses
- Use ONLY built-in templates (success, error, warning, info, deploy, test, release)
- Generate workflow modifications with proper variable usage
- Ensure security best practices (secrets, permissions)
- Include setup instructions for secrets
- Generate test cases for notification validation
- Include troubleshooting guidance

#### **Step 5: MANDATORY Self-Check Before Delivery**
- ‚úÖ **Integration Plan:** Created `noty4u-integration-plan.md` with complete analysis
- ‚úÖ **GitIgnore Update:** Added plan file to `.gitignore` 
- ‚úÖ **Template Validation:** Only use `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- ‚úÖ **Parameter Check:** No `message_thread_id` or other deprecated parameters
- ‚úÖ **JSON Format:** All `template_vars` must be valid JSON format
- ‚úÖ **No Conflicts:** Never use `template:` and `message:` together
- ‚úÖ **Version Check:** Always use `@v3.2.5` or newer specific version (examples use v3.1.0 for stability)
- ‚úÖ **GitHub Variables:** Use `${{ github.* }}` in `template_vars`, `inline_keyboard`, `run:` commands
- ‚úÖ **Template Variables:** Use `{{var}}` ONLY in `message:`/`caption:` WITH `template:`
- ‚úÖ **User Requirements:** Generated code matches ALL user questionnaire answers
- ‚úÖ **Language & Format:** Applied user's language and formatting preferences
- ‚úÖ **Scheduler Configuration:** If user selected scheduled workflows, applied custom cron expressions from user's free-form descriptions
- ‚úÖ **Cron Validation:** All schedule expressions are valid and include explanatory comments
- ‚úÖ **Topics Configuration:** If user selected topics, configured message_thread_id based on user's secret keys
- ‚úÖ **Topic Fallbacks:** All topic configurations include fallback to main chat if topic ID is missing
- ‚úÖ **Progress Bars:** If user selected progress bars, implemented with correct symbols (‚óè‚óã‚úó) and message updates
- ‚úÖ **Progress Failure Handling:** Progress bars show failure points with ‚úó and descriptive status messages

### **üéØ Example of CORRECT AI Interaction Flow**

```
üë§ User: "Add Telegram notifications to my project"

ü§ñ AI: "I'm Claude Sonnet 4.0, optimized for telegram-notify-action integration. I'll help you set this up! Please answer with [y] or [n] for each question:

üìã Notification Types:
1. üî® Do you want build/compilation result notifications? [ ]
2. üöÄ Do you want deployment status notifications? [ ]
3. üß™ Do you want test result notifications? [ ]
4. üè∑Ô∏è Do you want release announcement notifications? [ ]
5. üîÑ Do you want pull request update notifications? [ ]

üé® Notification Style:
6. üìä Do you want detailed notifications with metrics? [ ]
7. üé≠ Do you want rich formatting with lots of emojis? [ ]

üåç Language & Format:  
8. üó£Ô∏è Do you want notifications in English? [ ]
9. ‚ú® Do you want visual message formatting? [ ]

‚öôÔ∏è Technical Setup:
10. üè¢ Do you want notifications for Production environment? [ ]
11. üß™ Do you want notifications for Staging environment? [ ]
12. üíª Do you want notifications for Development environment? [ ]
13. üåø Do you want notifications for all feature branches? [ ]
14. üîê Do you already have Telegram bot TOKEN and CHAT_ID? [ ]

‚ö° Delivery Method:
15. üì® Do you want progressive updates (single message)? [ ]

üîç Repository Monitoring:
16. üìä Do you want GitHub Actions workflow results? [ ]
17. üîÑ Do you want Pull Request activity notifications? [ ]
18. üêõ Do you want GitHub Issues activity notifications? [ ]
19. üè∑Ô∏è Do you want Releases and Tags notifications? [ ]
20. üìà Do you want weekly/monthly summary reports? [ ]

üéØ Advanced Features:
21. üöÄ Do you want interactive action buttons? [ ]
22. üìä Do you want real-time progress bars? [ ]
    (Visual progress: Build ‚óè‚óè‚óè‚óã‚óã ‚Üí Test ‚óè‚óè‚óè‚óè‚óã ‚Üí Deploy ‚óè‚óè‚óè‚óè‚óè | On failure: Build ‚óè‚óè‚óè‚úó‚óã)
23. üåç Do you want different rules per environment? [ ]
24. üìé Do you want file attachments? [ ]

‚è∞ Scheduled Workflows:
25. ‚è∞ Do you want any scheduled/automatic workflows? [ ]

üìã Message Organization:
26. üßµ Do you want to send notifications to specific Telegram topics/threads? [ ]
27. üìä Do you want to split different notification types into separate topics? [ ]"

üë§ User: "1.[y] 2.[y] 3.[y] 4.[n] 5.[y] 6.[n] 7.[y] 8.[y] 9.[y] 10.[y] 11.[y] 12.[n] 13.[n] 14.[n] 15.[y] 16.[y] 17.[y] 18.[y] 19.[n] 20.[n] 21.[y] 22.[y] 23.[y] 24.[n] 25.[n] 26.[y] 27.[n] 28.[y]"

ü§ñ AI: "You selected scheduled workflows and topic organization! Let me configure:

‚è∞ **Scheduling Configuration:**
üìä For repository summary reports:
Current default: Weekly on Monday at 9:00 AM UTC
- Do you want to keep this schedule? [y/n]

üîç For health checks/monitoring:  
Current default: None (triggered by events only)
- Do you want periodic health checks? [y/n]

üßµ **Topics Configuration:**
You selected to split notification types into separate topics.
- How many different topics do you want? [number]
- Please provide the SECRET KEYS (not values) for topic IDs"

üë§ User: "Scheduling: First [n] - I want every day at 12:00 except Friday and Saturday. Second [y] - every 6 hours but only during weekdays. Topics: 3 topics. Keys: TELEGRAM_BUILD_TOPIC_ID, TELEGRAM_DEPLOY_TOPIC_ID, TELEGRAM_ISSUES_TOPIC_ID"

ü§ñ AI: "Perfect! I'll configure:
üìä Reports: Daily at 12:00 UTC, Monday-Thursday only (cron: '0 12 * * 1-4')
üîç Health checks: Every 6 hours on weekdays (cron: '0 6,12,18,0 * * 1-5')
üßµ Topics: 
  - Build/Test notifications ‚Üí TELEGRAM_BUILD_TOPIC_ID
  - Deployment notifications ‚Üí TELEGRAM_DEPLOY_TOPIC_ID  
  - PR/Issues activity ‚Üí TELEGRAM_ISSUES_TOPIC_ID"

ü§ñ AI: "Perfect! Based on your answers, I'll create:
- ‚úÖ Build, deploy, test, and PR notifications in English with visual formatting
- ‚úÖ Rich emoji formatting with progressive updates  
- ‚úÖ Production environment only with interactive buttons and progress bars
- ‚ùå No release notifications or summary reports

üö® Checking for existing integration plan...
‚úÖ No existing noty4u-integration-plan.md found.

üìã Creating integration plan first...

[Creates noty4u-integration-plan.md with detailed analysis]
[Updates .gitignore to exclude plan file]

‚úÖ Integration plan created! Now generating:
1. Progressive deployment workflow (single message updates)
2. GitHub Actions integration with progress bars
3. PR notification system with action buttons  
4. Rich template formatting in English with emojis

[Generates CORRECT code with both deployment and monitoring workflows]"
```

### **‚ùå WRONG AI Behavior (What NOT to do)**

#### **üÜï New Integration Mistakes:**
```
üë§ User: "Add Telegram notifications to my project"

ü§ñ AI: "I'll create monitoring and deployment pipelines for you!"
[Immediately generates 1000+ lines with custom templates, deprecated parameters, wrong formats]

üë§ User: "This is wrong, you used non-existent templates!"

ü§ñ AI: "Let me fix that..." [More iterations]
```

#### **üîç Audit Mistakes:**
```
üë§ User: "Check my telegram notifications setup"
[Provides files with 15+ errors]

ü§ñ AI: "I see some issues. Here's the fixed version:"
[Provides corrected code without explaining what was wrong or why]

üë§ User: "What exactly was wrong? I don't understand the changes"

ü§ñ AI: [Tries to explain afterwards, confusing the user]
```

**üö® Problems with wrong audit approach:**
- No systematic error analysis
- Skipped documentation cross-reference
- No detailed error report
- Immediate code generation without explanation
- No user preference collection
- Missing before/after comparisons

#### **üö´ Infrastructure Monitoring Mistakes:**
```
üë§ User: "Set up Telegram notifications for my project"
[AI follows questionnaire correctly, user selects some GitHub events]

ü§ñ AI: "Great! I'll set that up. Also, would you like to add:
üìà N—É–∂–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã?
- Scheduled health checks (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
- API response time monitoring
- Database connection checks"

üë§ User: "This is wrong! The project is about GitHub events, not infrastructure!"
```

**üö® Problems with this approach:**
- Suggesting infrastructure monitoring despite clear project scope
- Ignoring the FORBIDDEN list in the rules
- Not understanding the difference between GitHub events and system monitoring
- Going beyond the defined scope of telegram-notify-action

**‚úÖ CORRECT approach:**
```
üë§ User: "Set up Telegram notifications for my project"

ü§ñ AI: [Follows questionnaire correctly, focuses ONLY on GitHub events]
"Based on your answers, I'll set up:
‚úÖ Pull Request notifications (opened, merged, reviewed)
‚úÖ Deployment status from GitHub Actions workflows  
‚úÖ Release announcements
‚úÖ Weekly repository activity reports

Note: For infrastructure monitoring (API health, database checks, etc.), 
I recommend dedicated tools like Prometheus or Datadog, which you can 
then integrate with telegram-notify-action for alerts."
```

### üìù **Integration Examples Reference**

#### **Quick Commands for AI**
```bash
# Get latest action version
curl -s https://api.github.com/repos/asychin/telegram-notify-action/releases/latest | grep '"tag_name"'

# Check template variables  
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/docs/en/TEMPLATE-SYSTEM.md

# View examples
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/examples/
```

### **üö® CRITICAL: Correct Integration Examples**

#### **‚úÖ CORRECT: Using Built-in Templates**
```yaml
# Deployment success with built-in template
- name: üì¢ Notify Deployment Success
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    template: deploy  # ‚úÖ Built-in template
    template_vars: |  # ‚úÖ JSON format with null safety
      {
        "customMessage": "Deployed to ${{ github.ref_name }}!",
        "deployStatus": "${{ job.status == 'success' && 'successful' || 'failed' }}"
      }
```

#### **‚úÖ CORRECT: Null-Safe template_vars**
```yaml
# ‚úÖ CORRECT - All step outputs have fallbacks
- name: üìä Get Statistics
  id: stats
  run: |
    # This step might fail and produce null outputs
    echo "total_runs=25" >> $GITHUB_OUTPUT
    echo "success_runs=20" >> $GITHUB_OUTPUT
    # failed_runs not set = null

- name: üì¢ Send Statistics Report
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    template: info
    template_vars: |
      {
        "customMessage": "üìä Build Statistics Report",
        "totalRuns": "${{ steps.stats.outputs.total_runs || '0' }}",
        "successRuns": "${{ steps.stats.outputs.success_runs || '0' }}",
        "failedRuns": "${{ steps.stats.outputs.failed_runs || '0' }}",
        "successRate": "${{ steps.stats.outputs.success_rate || 'N/A' }}%"
      }
```

#### **‚ùå WRONG: Null Values in template_vars**
```yaml
# ‚ùå WRONG - No fallback values
- name: üì¢ Send Statistics Report
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    template: info
    template_vars: |
      {
        "customMessage": "üìä Build Statistics Report",
        "totalRuns": "${{ steps.stats.outputs.total_runs }}",      # Could be null
        "successRuns": "${{ steps.stats.outputs.success_runs }}",  # Could be null
        "failedRuns": "${{ steps.stats.outputs.failed_runs }}"     # Could be null
      }
# Result: Template shows "Total Runs: null" instead of actual data
```

#### **‚úÖ CORRECT: Custom Message (No Template)**
```yaml
# Custom message without template
- name: üì¢ Send Custom Notification  
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message: |  # ‚úÖ Custom message, no template
      üöÄ <b>Custom Deployment Started</b>
      
      <b>Repository:</b> ${{ github.repository }}
      <b>Branch:</b> ${{ github.ref_name }}
      <b>Commit:</b> ${{ github.sha }}
```

#### **‚úÖ CORRECT: Progressive Notifications**
```yaml
# 1. Start notification with message_id capture
- name: üì¢ Start Notification
  id: start_notification
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message: "üöÄ Deployment started..."

# 2. Update same message
- name: üì¢ Update Notification  
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message_id: ${{ steps.start_notification.outputs.message_id }}
    message: "‚úÖ Deployment completed!"
```

#### **‚úÖ CORRECT: Scheduled Workflows with Custom Cron**
```yaml
# ‚úÖ CORRECT: User said "every day at 12:00 except Friday and Saturday"
name: üìä Daily Repository Report
on:
  schedule:
    # Daily at 12:00 UTC, Monday through Thursday (1-4)
    - cron: '0 12 * * 1-4'  
  workflow_dispatch: # Allow manual trigger

jobs:
  report:
    runs-on: ubuntu-latest
    steps:
    - name: üìä Send Repository Summary
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        template: info
        message: |
          üìä **Daily Repository Summary**
          Repository: {{repository}}
          Period: Last 24 hours
```

```yaml  
# ‚úÖ CORRECT: User said "every 6 hours but only during weekdays"
name: üîç System Health Check
on:
  schedule:
    # Every 6 hours (6AM, 12PM, 6PM, 12AM UTC) on weekdays (1-5)
    - cron: '0 6,12,18,0 * * 1-5'
  workflow_dispatch:

jobs:
  health_check:
    runs-on: ubuntu-latest 
    steps:
    - name: üîç Health Check Notification
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        template: info
        message: |
          üîç **System Health Check**
          Status: All systems operational
          Time: {{currentTime}}
```

#### **‚úÖ CORRECT: Telegram Topics Configuration**
```yaml
# ‚úÖ CORRECT: User provided topic secret keys
name: üî® Build Notification
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: üî® Build Complete
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        # Use build-specific topic, fallback to main chat
        message_thread_id: ${{ secrets.TELEGRAM_BUILD_TOPIC_ID || '' }}
        template: success
        message: |
          üî® **Build Completed**
          Repository: {{repository}}
          Branch: {{refName}}
```

```yaml
# ‚úÖ CORRECT: Multiple topics for different notification types
name: üöÄ Deploy Notification  
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: üöÄ Deploy to Production
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        # Use deployment-specific topic
        message_thread_id: ${{ secrets.TELEGRAM_DEPLOY_TOPIC_ID }}
        template: deploy
        message: |
          üöÄ **Production Deployment**
          Status: {{deploymentStatus}}
          Environment: {{environment}}
```

```yaml
# ‚úÖ CORRECT: Issue notifications in separate topic
name: üêõ Issue Notification
on:
  issues:
    types: [opened, closed]
jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
    - name: üêõ Issue Activity
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        # Use issues-specific topic, fallback if not available
        message_thread_id: ${{ secrets.TELEGRAM_ISSUES_TOPIC_ID || secrets.TELEGRAM_MAIN_TOPIC_ID }}
        template: info
        message: |
          üêõ **Issue Activity**
          Issue: {{issueTitle}}
          Action: {{issueAction}}
          Author: {{author}}
```

#### **‚úÖ CORRECT: Progress Bars Implementation**
```yaml
# ‚úÖ CORRECT: Progressive updates with progress bars
name: üöÄ CI/CD Pipeline with Progress
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Start notification with initial progress
    - name: üì¢ Start Pipeline
      id: start_notification
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message: |
          üöÄ **CI/CD Pipeline Started**
          
          üìä **Progress:** `‚óè‚óã‚óã‚óã‚óã Build starting...`
          
          üè† **Repository:** ${{ github.repository }}
          üåø **Branch:** ${{ github.ref_name }}

    # Step 2: Update progress - Build complete
    - name: üî® Build Complete
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.start_notification.outputs.message_id }}
        message: |
          üöÄ **CI/CD Pipeline In Progress**
          
          üìä **Progress:** `‚óè‚óè‚óã‚óã‚óã Build complete, testing...`
          
          üè† **Repository:** ${{ github.repository }}
          üåø **Branch:** ${{ github.ref_name }}

    # Step 3: Update progress - Tests complete
    - name: üß™ Tests Complete  
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.start_notification.outputs.message_id }}
        message: |
          üöÄ **CI/CD Pipeline In Progress**
          
          üìä **Progress:** `‚óè‚óè‚óè‚óã‚óã Tests passed, deploying...`
          
          üè† **Repository:** ${{ github.repository }}
          üåø **Branch:** ${{ github.ref_name }}

    # Step 4: Final update - Success
    - name: ‚úÖ Pipeline Complete
      if: success()
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.start_notification.outputs.message_id }}
        message: |
          ‚úÖ **CI/CD Pipeline Completed**
          
          üìä **Progress:** `‚óè‚óè‚óè‚óè‚óè Pipeline completed successfully!`
          
          üè† **Repository:** ${{ github.repository }}
          üåø **Branch:** ${{ github.ref_name }}
          ‚è±Ô∏è **Duration:** ${{ job.duration }}

    # Step 5: Final update - Failure with ‚úó
    - name: ‚ùå Pipeline Failed
      if: failure()
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.start_notification.outputs.message_id }}
        message: |
          ‚ùå **CI/CD Pipeline Failed**
          
          üìä **Progress:** `‚óè‚óè‚úó‚óã‚óã Failed at testing stage`
          
          üè† **Repository:** ${{ github.repository }}
          üåø **Branch:** ${{ github.ref_name }}
          üö® **Error:** Check workflow logs for details
```

```yaml
# ‚úÖ CORRECT: Multi-stage progress with detailed status
name: üîÑ Complex Deployment Pipeline
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read        # ‚úÖ Basic repository access for notifications
    steps:
    - name: üìä Update Progress - Building
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message: |
          üöÄ **Multi-Stage Deployment**
          
          **Build:** `‚óè‚óè‚óè‚óè‚óã 80%` ‚úÖ Compiling...
          **Test:** `‚óã‚óã‚óã‚óã‚óã 0%` ‚è≥ Waiting...
          **Deploy:** `‚óã‚óã‚óã‚óã‚óã 0%` ‚è≥ Waiting...
          
          üè† Repository: ${{ github.repository }}

    - name: üìä Update Progress - Testing
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.previous.outputs.message_id }}
        message: |
          üöÄ **Multi-Stage Deployment**
          
          **Build:** `‚óè‚óè‚óè‚óè‚óè 100%` ‚úÖ Complete
          **Test:** `‚óè‚óè‚óè‚óã‚óã 60%` üß™ Running tests...
          **Deploy:** `‚óã‚óã‚óã‚óã‚óã 0%` ‚è≥ Waiting...
          
          üè† Repository: ${{ github.repository }}

    - name: üìä Update Progress - Failed Test
      if: failure()
      uses: asychin/telegram-notify-action@v3.1.0
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        message_id: ${{ steps.previous.outputs.message_id }}
        message: |
          ‚ùå **Multi-Stage Deployment Failed**
          
          **Build:** `‚óè‚óè‚óè‚óè‚óè 100%` ‚úÖ Complete
          **Test:** `‚óè‚óè‚úó‚óã‚óã Failed` ‚ùå Test suite failed
          **Deploy:** `‚óã‚óã‚óã‚óã‚óã 0%` ‚ö†Ô∏è Skipped
          
          üè† Repository: ${{ github.repository }}
          üö® **Action Required:** Fix failing tests before retry
```

#### **‚ùå WRONG Examples (What NOT to do)**
```yaml
# ‚ùå WRONG: Non-existent template
template: deployment_start  # Does not exist!

# ‚ùå WRONG: Both template and message
template: deploy
message: "Custom message"  # Conflicts with template

# ‚ùå WRONG: Deprecated parameter
message_thread_id: ${{ vars.THREAD_ID }}  # Removed in v3

# ‚ùå WRONG: Bash-style template_vars
template_vars: |
  customMessage=Hello
  status=success

# ‚ùå WRONG: Handlebars syntax
message: |
  {{#if success}}
  ‚úÖ Success
  {{/if}}
```

---

## üö® **Critical Reminders**

### **Version Management**
- ‚ö†Ô∏è **Always** use specific version tags: `@v3.1.0` (not `@main` or `@latest`)
- üîÑ Update version references when new releases are available
- üìã Check CHANGELOG.md for breaking changes between versions

### **Variable Usage Rules** 
- üéØ Template variables (`{{var}}`) work ONLY in `message:`/`caption:` WITH `template:`
- ‚öôÔ∏è GitHub Actions variables (`${{var}}`) work in `template_vars:`, `inline_keyboard:`, `run:` commands
- üö´ Never mix template and GitHub Actions variable types

### **Available Templates (v3.1.0)**
- ‚úÖ **ONLY these templates exist:** `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- üö´ **DO NOT create custom templates** - they don't exist in the action
- üìã **For custom messages:** Use `message:` field WITHOUT `template:` parameter
- üîÑ **Template OR Message:** Never use both `template:` and `message:` together

### **Deprecated Parameters (v3.1.0)**
- ‚ùå **REMOVED:** `message_thread_id` parameter (no longer supported)
- ‚ùå **REMOVED:** Custom template support (only built-in templates work)
- ‚ùå **NOT SUPPORTED:** Handlebars syntax (`{{#if}}`, `{{#each}}`, etc.)

### **Template Variables JSON Format**
```yaml
# ‚úÖ CORRECT JSON format
template_vars: |
  {
    "customMessage": "Value with ${{ github.repository }}",
    "deployStatus": "successful",
    "version": "${{ github.ref_name }}"
  }

# ‚ùå WRONG bash-style assignment  
template_vars: |
  customMessage=Value
  deployStatus=successful
```

### **Message Formatting (v3.1.1+)**
- üìù **DEFAULT**: Markdown formatting (`**bold**`, `*italic*`) as of v3.1.1  
- üîÑ **User Settings**: Respect existing `parse_mode` parameter if specified
- üö® **Migration**: When updating existing integrations, ask user about format preference
- ‚úÖ **Templates**: All built-in templates support both HTML and Markdown automatically

### **Security First**
- üîê Always use repository/organization secrets
- üö´ Never expose tokens in code or logs  
- üõ°Ô∏è Use minimal required permissions
- üîç Sanitize sensitive data in notifications

---

**Remember: This is an intelligent integration system. Always prioritize user experience, security, and non-disruptive implementation. The goal is to enhance existing workflows, not replace them.**

---

## üö® **COMMON AI INTEGRATION MISTAKES & SOLUTIONS**

### **‚ùå Mistake 1: Using Custom Templates**
```yaml
# WRONG
template: deployment_start
template: monitoring_report
template: custom_alert
```
**‚úÖ Solution:** Use ONLY built-in templates: `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`

### **‚ùå Mistake 2: Wrong template_vars Format**
```yaml
# WRONG - bash style
template_vars: |
  status=success
  message=Hello
```
**‚úÖ Solution:** Always use JSON format:
```yaml
template_vars: |
  {
    "status": "success", 
    "message": "Hello"
  }
```

### **‚ùå Mistake 3: Using Deprecated Parameters**
```yaml
# WRONG - removed in v3
message_thread_id: ${{ vars.THREAD_ID }}
```
**‚úÖ Solution:** Remove deprecated parameters completely

### **‚ùå Mistake 4: Template + Message Conflict**
```yaml
# WRONG - conflicts
template: deploy
message: "Custom message"
```
**‚úÖ Solution:** Use EITHER template OR message, never both:
```yaml
# Option A: Template only
template: deploy
template_vars: |
  {"customMessage": "Details"}

# Option B: Message only  
message: "Custom message text"
```

### **‚ùå Mistake 5: Handlebars/Mustache Syntax**
```yaml
# WRONG - not supported
message: |
  {{#if success}}
  ‚úÖ Success
  {{/if}}
```
**‚úÖ Solution:** Use plain text with GitHub variables:
```yaml
message: |
  ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
```

### **‚ùå Mistake 6: Wrong Scheduler Configuration**
```yaml
# WRONG - Invalid cron expression
on:
  schedule:
    - cron: '0 12 * * 1,2,3,4'  # Harder to read

# WRONG - No explanatory comments  
on:
  schedule:
    - cron: '*/15 * * * *'  # What does this mean?

# WRONG - User said "every day at 12:00 except Friday and Saturday" but AI used:
on:
  schedule:
    - cron: '0 12 * * *'  # This runs EVERY day including weekends!
```
**‚úÖ Solution:** Convert user's free-form descriptions accurately with comments:
```yaml
# CORRECT - User said "every day at 12:00 except Friday and Saturday"
on:
  schedule:
    # Daily at 12:00 UTC, Monday through Thursday (excluding Fri/Sat)
    - cron: '0 12 * * 1-4'
  workflow_dispatch: # Always include manual trigger option

# CORRECT - User said "every 6 hours but only during weekdays"  
on:
  schedule:
    # Every 6 hours (6AM, 12PM, 6PM, 12AM UTC) on weekdays only
    - cron: '0 6,12,18,0 * * 1-5'
  workflow_dispatch:
```

### **‚ùå Mistake 7: Wrong Topic Configuration**
```yaml
# WRONG - Hardcoded topic ID
message_thread_id: 123456  # Never hardcode topic IDs!

# WRONG - Using wrong secret name that user didn't provide
message_thread_id: ${{ secrets.TOPIC_ID }}  # User provided different key names

# WRONG - No fallback if topic ID is missing
message_thread_id: ${{ secrets.TELEGRAM_BUILD_TOPIC_ID }}  # Will fail if secret not set

# WRONG - Mixing all notification types in same topic despite user wanting separation
# User said: "3 topics: build, deploy, issues" but AI put everything in build topic
message_thread_id: ${{ secrets.TELEGRAM_BUILD_TOPIC_ID }}  # Used for all notifications
```
**‚úÖ Solution:** Use user's exact secret key names with proper fallbacks:
```yaml
# CORRECT - Use exact secret keys user provided
message_thread_id: ${{ secrets.TELEGRAM_BUILD_TOPIC_ID || '' }}  # With fallback

# CORRECT - Proper topic separation per user request
# Build notifications
message_thread_id: ${{ secrets.TELEGRAM_BUILD_TOPIC_ID }}
# Deploy notifications  
message_thread_id: ${{ secrets.TELEGRAM_DEPLOY_TOPIC_ID }}
# Issues notifications
message_thread_id: ${{ secrets.TELEGRAM_ISSUES_TOPIC_ID }}

# CORRECT - Multiple fallback levels
message_thread_id: ${{ secrets.TELEGRAM_BUILD_TOPIC_ID || secrets.TELEGRAM_MAIN_TOPIC_ID || '' }}
```

### **üîß Quick Validation Checklist for AI:**

#### **üìã For NEW integrations:**
- [ ] Asked complete questionnaire BEFORE generating code
- [ ] User provided ALL answers 
- [ ] Templates: Only `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- [ ] No `message_thread_id` parameter
- [ ] `template_vars` in JSON format
- [ ] Not mixing `template:` and `message:`
- [ ] Version `@v3.2.5` or newer (MANDATORY for security - zero vulnerabilities)
- [ ] GitHub variables `${{}}` in JSON/shell contexts
- [ ] Template variables `{{}}` only in `message:`/`caption:` WITH `template:`
- [ ] **AI Identification**: Identified AI model at start (Sonnet 3.x/4.x recommended)
- [ ] **Integration Plan**: Created `noty4u-integration-plan.md` BEFORE code generation
- [ ] **GitIgnore Update**: Added plan file to `.gitignore` 
- [ ] **Plan Conflict Check**: Verified no existing plan file before proceeding
- [ ] **Language Settings**: Applied user's language preference (English/Russian/Chinese)
- [ ] **Visual Formatting**: Applied user's formatting preferences (emojis/plain text)
- [ ] **Scheduler Configuration**: If user wanted scheduled workflows, converted free-form descriptions to valid cron expressions
- [ ] **Cron Comments**: All scheduled workflows include explanatory comments about timing
- [ ] **Topics Configuration**: If user wanted topics, configured message_thread_id using user's provided secret keys
- [ ] **Topic Organization**: Properly assigned notification types to appropriate topics with fallbacks
- [ ] **Progress Bars**: If user wanted progress bars, implemented with ‚óè‚óã‚úó symbols and progressive message updates
- [ ] **Progress Failure Handling**: Progress bars clearly show failure points and maintain consistent formatting
- [ ] **Progressive notifications**: Used `message_id` for updates (recommended)
- [ ] **GitHub integration**: Focused on repository events (PR, releases, workflows)
- [ ] **NO FORBIDDEN MONITORING**: Did NOT suggest database, API, server, or infrastructure monitoring
- [ ] **Action buttons**: Added `inline_keyboard` for GitHub operations (view PR, merge, rerun)
- [ ] **Multi-environment**: Conditional logic for different environments (prod/staging/dev)
- [ ] **üõ°Ô∏è Valid Permissions**: Only used valid GitHub Actions permissions (no `metadata: read`)
- [ ] **üîí Null Safety**: All dynamic values have fallback operators (`|| 'default'`)
- [ ] **üìã template_vars Null Safety**: All step outputs in template_vars have fallbacks (`${{ steps.x.outputs.y || '0' }}`)
- [ ] **üîç JSON Validation**: template_vars generate valid JSON (no unescaped quotes, newlines, or null values)
- [ ] **‚ö° No Shell Commands**: No `$(command)` syntax in message content
- [ ] **üì° API Access**: Included proper permissions for GitHub API endpoints
- [ ] **üéØ Error Resilience**: Workflows continue gracefully on notification failures

#### **üîç For AUDIT scenarios:**
- [ ] Read ALL documentation before analysis
- [ ] Created comprehensive error report
- [ ] Cross-referenced against current v3.2.5 standards
- [ ] Provided before/after comparisons
- [ ] Explained reasoning for each fix
- [ ] Asked user preferences for fixes vs redesign
- [ ] Validated final result against all rules
- [ ] Included migration instructions

## üéØ **PROJECT FOCUS: GitHub Events, Not Infrastructure Monitoring**

**üö® CRITICAL UNDERSTANDING:**
telegram-notify-action is designed for **GitHub repository events**, not infrastructure monitoring:

**‚úÖ CORRECT Use Cases:**
- Pull Request notifications (opened, merged, reviewed)
- Deployment workflow status (CI/CD pipeline results)
- Release announcements  
- Issue and comment activity
- Workflow execution results
- GitHub Actions job status

**‚ùå INCORRECT Use Cases:**
- Server/API health monitoring (use dedicated monitoring tools)
- Database performance tracking (use database monitoring)
- Security vulnerability scanning (use security-specific tools)  
- System resource monitoring (use infrastructure monitoring)
- Application performance monitoring (use APM tools)

**üéØ Key Principle:**
If it's not a GitHub event or directly related to GitHub Actions execution, it's probably outside the scope of this action.

**üí° Recommendation:**
For infrastructure monitoring, recommend dedicated tools like:
- Prometheus + Grafana for metrics
- Datadog/New Relic for APM
- PagerDuty for alerting
- Sentry for error tracking

telegram-notify-action should integrate with these tools to relay **their alerts** to Telegram, not replace them.

## üö® **COMMON INTEGRATION PITFALLS & SOLUTIONS**

### **‚ùå Problem 1: Invalid GitHub Actions Permissions**
```yaml
# ‚ùå WRONG - metadata: read doesn't exist
permissions:
  contents: read
  actions: read
  metadata: read  # Invalid permission!
```
**‚úÖ Solution:** Use only valid permissions:
```yaml
# ‚úÖ CORRECT - Only valid permissions
permissions:
  contents: read
  actions: read     # For reading workflow runs
```

### **‚ùå Problem 2: Null Values in Messages**
User workflows might pass null/undefined values to telegram-notify-action:
```yaml
# Example that produces null values
message: |
  üìä Total Runs: ${{ steps.analysis.outputs.runs }}  
  # If analysis step fails, outputs.runs = null
```
**üí° Result:** Message shows "Total Runs: null"

**‚úÖ Solutions:**
```yaml
# Option A: Validate in workflow
message: |
  üìä Total Runs: ${{ steps.analysis.outputs.runs || 'N/A' }}

# Option B: Use fallback values
message: |
  üìä Total Runs: ${{ steps.analysis.outputs.runs || '0' }}
  
# Option C: Conditional messaging
message: |
  ${{ steps.analysis.outputs.runs && format('üìä Total Runs: {0}', steps.analysis.outputs.runs) || 'üìä Data unavailable' }}
```

### **‚ùå Problem 6: Null Values in template_vars JSON**
This is a **CRITICAL** issue that often causes "dry data" in Telegram messages:
```yaml
# ‚ùå WRONG - NULL values break template rendering
template_vars: |
  {
    "customMessage": "üîÑ Workflow Runs: ${{ steps.workflow_stats.outputs.workflow_runs }}"
  }
# If workflow_stats.outputs.workflow_runs = null, generates:
# {"customMessage": "üîÑ Workflow Runs: null"}
# Result: Template shows literal "null" text
```

**üí° Problem:** When step outputs return `null`, the JSON becomes invalid or contains literal "null" strings, breaking template variable substitution.

**‚úÖ Solutions:**
```yaml
# Option A: Add fallbacks in template_vars JSON
template_vars: |
  {
    "customMessage": "üîÑ Workflow Runs: ${{ steps.workflow_stats.outputs.workflow_runs || '0' }}",
    "successCount": "${{ steps.stats.outputs.success || 'N/A' }}",
    "failureCount": "${{ steps.stats.outputs.failures || '0' }}"
  }

# Option B: Validate step outputs before template_vars
- name: üîç Validate outputs
  id: validated_stats
  run: |
    echo "runs=${{ steps.stats.outputs.runs || '0' }}" >> $GITHUB_OUTPUT
    echo "success=${{ steps.stats.outputs.success || '0' }}" >> $GITHUB_OUTPUT
    
- name: üì¢ Send notification
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    template: success
    template_vars: |
      {
        "customMessage": "üîÑ Workflow Runs: ${{ steps.validated_stats.outputs.runs }}",
        "successCount": "${{ steps.validated_stats.outputs.success }}"
      }

# Option C: Use conditional JSON generation
template_vars: |
  {
    "customMessage": "${{ steps.stats.outputs.runs && format('üîÑ Runs: {0}', steps.stats.outputs.runs) || 'üîÑ No data available' }}",
    "status": "${{ job.status == 'success' && 'completed' || 'failed' }}"
  }
```

### **‚ùå Problem 7: Complex Conditional Logic in template_vars**
```yaml
# ‚ùå WRONG - Complex conditions can break JSON
template_vars: |
  {
    "customMessage": "${{ steps.stats.outputs.commits_count == '0' && 'üò¥ Quiet week' || 'üéâ Active week!' }}"
  }
```
**üí° Problem:** GitHub Actions conditional logic with special characters can generate invalid JSON.

**‚úÖ Solutions:**
```yaml
# Option A: Pre-calculate in workflow step
- name: üìä Calculate message
  id: calc_message
  run: |
    if [ "${{ steps.stats.outputs.commits_count }}" = "0" ]; then
      echo "weekly_message=üò¥ Quiet week" >> $GITHUB_OUTPUT
    else
      echo "weekly_message=üéâ Active week!" >> $GITHUB_OUTPUT
    fi

- name: üì¢ Send notification
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    template: info
    template_vars: |
      {
        "customMessage": "${{ steps.calc_message.outputs.weekly_message }}"
      }

# Option B: Use simple fallback pattern
template_vars: |
  {
    "customMessage": "${{ steps.stats.outputs.commits_count || '0' }} commits this week",
    "activityLevel": "${{ steps.stats.outputs.commits_count != '0' && 'üéâ Active' || 'üò¥ Quiet' }}"
  }
```

### **‚ùå Problem 3: Shell Commands in Messages**
```yaml
# ‚ùå WRONG - $(date) won't execute in action context
message: |
  ‚è∞ Check Time: $(date -u '+%Y-%m-%d %H:%M UTC')
```
**üí° Problem:** Shell commands execute on GitHub runner, not in action environment.

**‚úÖ Solutions:**
```yaml
# Option A: Pre-calculate in workflow step
- name: Get timestamp
  id: timestamp
  run: echo "time=$(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_OUTPUT

- name: Send notification
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    message: |
      ‚è∞ Check Time: ${{ steps.timestamp.outputs.time }}

# Option B: Use GitHub context variables
message: |
  ‚è∞ Check Time: ${{ github.event.head_commit.timestamp }}

# Option C: Use template variables (when using template:)
template: info
message: |
  ‚è∞ Check Time: {{currentTime}}
```

### **‚ùå Problem 4: GitHub API Permission Issues**
```bash
# Error: "Resource not accessible by integration"
{"total_count":null,"message":"Resource not accessible by integration"}
```
**üí° Cause:** Insufficient permissions for GitHub Actions API access.

**‚úÖ Solutions:**
```yaml
# Add proper permissions to job
jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read       # Essential for workflow runs API
    steps:
      # Your monitoring steps
```

### **‚ùå Problem 5: Date Range API Issues**
GitHub Actions API date range filtering may not work as expected:
```bash
# This API endpoint may return unexpected results
/actions/runs?created=2025-01-01..2025-01-31
```
**‚úÖ Solution:** Use client-side filtering:
```yaml
- name: Get workflow data
  run: |
    # Get recent runs without date filter
    all_runs=$(curl -s -H "Authorization: token ${{ github.token }}" \
      "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100")
    
    # Filter by date using jq
    filtered_runs=$(echo "$all_runs" | jq --arg date "2025-01-01T00:00:00Z" \
      '[.workflow_runs[] | select(.created_at >= $date)] | length')
    
    echo "runs=$filtered_runs" >> $GITHUB_OUTPUT
```

### **‚ùå Problem 8: Heredoc Syntax in GitHub Release Workflows**
üö® **CRITICAL:** When creating workflows that process GitHub release content, improper heredoc syntax can cause shell command interpretation errors.

```yaml
# ‚ùå WRONG - Unquoted EOF allows shell expansion
- name: Get release info
  run: |
    echo "release_notes<<EOF" >> $GITHUB_OUTPUT
    echo "${{ github.event.release.body }}" >> $GITHUB_OUTPUT
    echo "EOF" >> $GITHUB_OUTPUT
```

**üí° Problem:** When release body contains template variables like `{{repository}}`, `{{baseBranch}}`, file names like `.ai-integration-rules`, or shell-special characters, they get executed as shell commands causing errors:

```bash
.ai-integration-rules: command not found
{{repository}}: command not found  
{{baseBranch}}: command not found
refs/heads/: No such file or directory
```

**‚úÖ Solutions:**
```yaml
# Option A: Quote the EOF delimiter to prevent expansion
- name: Get release info
  run: |
    {
      echo "release_notes<<'EOF'"
      echo "${{ github.event.release.body }}"
      echo "EOF"
    } >> $GITHUB_OUTPUT

# Option B: Use alternative delimiter approach
- name: Get release info  
  run: |
    RELEASE_BODY="${{ github.event.release.body }}"
    {
      echo "release_notes<<'RELEASE_END'"
      echo "$RELEASE_BODY"
      echo "RELEASE_END"
    } >> $GITHUB_OUTPUT

# Option C: Use jq for safe JSON processing
- name: Get release info
  run: |
    release_body=$(echo '${{ toJSON(github.event.release.body) }}' | jq -r '.')
    echo "release_notes=$release_body" >> $GITHUB_OUTPUT

# Option D: Use echo commands instead of heredoc (SAFEST for file creation)
- name: Create release notes safely
  run: |
    # Replace unsafe heredoc with secure echo commands
    echo "# Release ${{ github.event.release.tag_name }}" > RELEASE_NOTES.md
    echo "" >> RELEASE_NOTES.md
    echo "## Release Notes" >> RELEASE_NOTES.md
    printf '%s\n' "${{ github.event.release.body }}" >> RELEASE_NOTES.md
    echo "" >> RELEASE_NOTES.md
    echo "## Download" >> RELEASE_NOTES.md
    echo "- [Download](${{ github.event.release.html_url }})" >> RELEASE_NOTES.md
```

**üö® REAL CASE (Fixed in v3.2.2):**
When creating release notes from CHANGELOG containing emoji and template variables:
```yaml
# ‚ùå WRONG - Shell injection vulnerability
cat > RELEASE_NOTES.md << 'EOF'
${{ steps.release-info.outputs.release_notes }}
EOF

# ‚úÖ FIXED - Safe echo-based approach  
echo "## Release Notes" >> RELEASE_NOTES.md
printf '%s\n' "${{ steps.release-info.outputs.release_notes }}" >> RELEASE_NOTES.md
```

**‚ùó Impact:** CHANGELOG.md with content like `inline_keyboard: |` was interpreted as shell command causing `inline_keyboard: command not found` errors.

**üõ°Ô∏è Key Points:**
- Always quote heredoc delimiters: `'EOF'` instead of `EOF`
- Group output redirection using `{}` for complex heredoc
- Be especially careful with content from external sources (release notes, PR descriptions)
- Test workflows with complex CHANGELOG content that contains template variables

---

## üõ°Ô∏è **VALIDATION & BEST PRACTICES**

### **üìã Pre-Deployment Checklist:**
- [ ] **Permissions:** Only use valid GitHub Actions permissions
- [ ] **Null Safety:** All dynamic values have fallbacks (`|| 'default'`)
- [ ] **Shell Commands:** No `$(command)` in message content
- [ ] **API Access:** Test GitHub API endpoints in controlled environment
- [ ] **Error Handling:** Workflows continue gracefully on notification failures

### **üîç Message Content Validation:**
```yaml
# ‚úÖ GOOD - Validated message content
message: |
  üìä **Statistics Summary**
  
  üîÑ Total Runs: ${{ steps.stats.outputs.total || '0' }}
  ‚úÖ Successful: ${{ steps.stats.outputs.success || '0' }}
  ‚ùå Failed: ${{ steps.stats.outputs.failed || '0' }}
  üìà Success Rate: ${{ steps.stats.outputs.rate || '0' }}%
  
  ‚è∞ Generated: ${{ steps.timestamp.outputs.time }}
```

### **‚ö†Ô∏è Common Warning Signs:**
- Messages containing literal "null" or "undefined" text
- Shell commands `$(...)` in message fields
- Missing fallback values for API-dependent data
- Invalid permissions causing API access errors
- Hard-coded timestamps instead of dynamic generation
- üö® **Heredoc without quotes:** `EOF` instead of `'EOF'` in release workflows
- üö® **Shell command errors:** `.ai-integration-rules: command not found` or `{{variable}}: command not found`

---

## üö® **FINAL REMINDER FOR AI SYSTEMS**

**If you're an AI reading these rules:**

**‚úÖ DO suggest:** GitHub events (PR, issues, releases, workflow results, repository activity)
**‚ùå DON'T suggest:** Infrastructure monitoring (database, API, server health, performance metrics)

**If user asks for infrastructure monitoring:**
"That's outside telegram-notify-action's scope. For [monitoring type], use [dedicated tool], then integrate alerts with telegram-notify-action."

**üéØ Remember: GitHub events ONLY. Nothing else.**

---

---

## üìù **CHANGELOG**

### v3.2.5 (2025-08-02) - COMPLETE SECURITY FIX - ALL VULNERABILITIES ELIMINATED
- üö® **CRITICAL SECURITY FIXES:** Eliminated ALL shell injection vulnerabilities in workflows
- üõ°Ô∏è **Complete Heredoc Security:** Fixed github.event.release.body processing with base64 encoding approach
- ‚úÖ **Template Variables Security:** Removed ALL GitHub variables from template_vars JSON contexts
- üß™ **Security Infrastructure:** Added comprehensive security-audit.sh for continuous vulnerability detection
- üìã **Multi-file Fixes:** Fixed vulnerabilities in release.yml, monitoring.yml, test.yml workflows
- üîí **ZERO VULNERABILITIES:** Achieved complete security compliance with automated verification

**CRITICAL SECURITY LESSONS FOR AI:**
‚ùå **NEVER use:** GitHub variables like ${{github.event.release.body}} in heredoc contexts
‚ùå **NEVER use:** GitHub variables like ${{github.repository}} in template_vars JSON
‚ùå **NEVER use:** cat << EOF patterns with dynamic content from GitHub events
‚ùå **NEVER mix:** {{template}} and ${{github}} variables in same JSON contexts

‚úÖ **ALWAYS use:** base64 encoding for dynamic content: echo '${{ toJSON(github.event.release.body) }}' | jq -r '.' | base64 -w 0
‚úÖ **ALWAYS use:** static text in template_vars: "customMessage": "Release published successfully"
‚úÖ **ALWAYS use:** printf or echo commands instead of heredoc for dynamic content
‚úÖ **ALWAYS use:** scripts/security-audit.sh to verify no vulnerabilities

### v3.2.4 (2025-08-02) - Final Syntax Fix - Quote Escaping
- üö® **FINAL SYNTAX PATCH:** Fixed unescaped quote in date format causing 'unexpected EOF while looking for matching quote' error
- üõ†Ô∏è **SHELL SYNTAX:** Properly escaped quotes in timestamp generation command in release workflow
- ‚úÖ **COMPLETE FIX:** All shell syntax errors now resolved in release.yml - no remaining parsing errors
- üîí **FINAL PATCH:** Eliminated final shell parsing error causing workflow failure
- üéØ **COMPLETED:** ALL fix series - security, injection, JSON, and syntax now complete

### v3.2.3 (2025-08-02) - Complete Shell Injection Security Fix
- üö® **FINAL SECURITY PATCH:** Fixed remaining heredoc vulnerability in release-info step processing github.event.release.body
- üõ°Ô∏è **COMPLETE FIX:** Replaced unsafe 'release_notes<<EOF' with secure 'RELEASE_BODY_END' delimiter
- ‚úÖ **SECURITY:** Used safe printf '%s\n' for multiline content handling in release notes extraction
- üîí **ELIMINATED:** All shell command interpretation vectors in release workflow now secure
- üéØ **COMPLETED:** Security fix series - no remaining shell injection vulnerabilities

### v3.2.2 (2025-08-02) - Critical Security Fixes & Enhanced Shell Injection Prevention
- üö® **SECURITY FIX:** Added Option D - Echo-based approach to replace unsafe heredoc in file creation
- üõ°Ô∏è **REAL CASE:** Documented actual shell injection vulnerability fixed in telegram-notify-action@v3.2.2
- üîß **CRITICAL:** Added specific example of CHANGELOG.md content causing `inline_keyboard: command not found`
- ‚úÖ **SOLUTION:** Demonstrated safe `printf '%s\n'` approach for multiline content handling
- üìã **ENHANCED:** Problem 8 now includes real production fix with before/after examples
- üîß **UPDATED:** Latest Version reference to v3.2.2 with security patches
- üéØ **IMPACT:** Prevents shell command interpretation of release notes containing special characters

### v3.2.1 (2025-08-02) - JSON Parsing & Telegram API Compliance Fix
- üêõ **FIXED:** Inline keyboard JSON format from `[{...}],[{...}]` to `[[{...}],[{...}]]`
- ‚úÖ **COMPLIANCE:** Restored Telegram Bot API compatibility for inline_keyboard parameter
- üìã **UPDATED:** All workflow examples and documentation with correct JSON structure
- üîß **TECHNICAL:** Fixed `Unexpected non-whitespace character after JSON` parsing errors

### v3.2.0 (2025-08-02) - AI Integration Rules Update & Critical Workflow Fix
- üö® **NEW:** Added Problem 8 - Heredoc Syntax in GitHub Release Workflows
- üõ°Ô∏è **CRITICAL:** Warning about unquoted EOF delimiters causing shell command interpretation
- üí° **ADDED:** Three different solutions for safe heredoc handling in workflows
- ‚ö†Ô∏è **ENHANCED:** Common Warning Signs section with heredoc-specific warnings  
- üîß **FIXED:** Updated Latest Version reference to v3.2.0
- üìã **EXAMPLES:** Comprehensive examples of problematic vs. correct heredoc syntax
- üéØ **FOCUS:** Special attention to GitHub release content processing safety

### v3.1.1.3 (2025-08-02) - GitHub API Integration & Permissions Update
- üîê **NEW:** Comprehensive GitHub API permissions guidelines and examples
- üìã **NEW:** Required permissions by API type (contents, actions, issues, pull-requests)
- üîó **NEW:** Complete GitHub Events Integration Patterns section
- üõ°Ô∏è **NEW:** Detailed permissions troubleshooting (HTTP 403/404 solutions)
- ‚öôÔ∏è **NEW:** Event-specific authentication rules (github.token vs secrets.GITHUB_TOKEN)
- üìä **ENHANCED:** All workflow examples now include proper permissions blocks
- üîß **FIXED:** Token usage recommendations - prefer github.token for standard API access
- ‚úÖ **ADDED:** Complete workflow examples for Issues, PRs, Releases, Actions monitoring
- üö® **CRITICAL:** All AI integrations MUST include permissions blocks when using GitHub API
- üìö **EXPANDED:** Security best practices with explicit permission requirements

### v3.1.1.2 (2025-08-01) - Critical template_vars Null Safety Update
- üö® **CRITICAL:** Added comprehensive null safety guidelines for `template_vars` JSON
- üîß **NEW:** Problem 6 & 7 - Null values and complex conditions in `template_vars`
- üìã **ADDED:** Null-safe template_vars examples with fallback patterns
- üõ°Ô∏è **UPDATED:** Validation checklist includes template_vars null safety checks
- üí° **FIXED:** All examples now use proper fallback operators (`|| 'default'`)
- ‚ö†Ô∏è **WARNING:** Added specific guidance on complex conditional logic in JSON
- üéØ **ENHANCED:** Pre-calculation workflow patterns for complex template_vars

### v3.1.1.1 (2025-08-01) - Critical Updates Based on Real-World Issues
- üö® **NEW:** Added "Common Integration Pitfalls & Solutions" section
- üõ°Ô∏è **FIXED:** Invalid `metadata: read` permission (doesn't exist in GitHub Actions)
- üîí **ADDED:** Null safety validation for dynamic message content
- ‚ö° **ADDED:** Shell command warnings and solutions
- üì° **ADDED:** GitHub API permission troubleshooting
- üéØ **ADDED:** Enhanced validation checklist with 5 new critical checks
- üí° **ADDED:** Best practices for error-resilient workflows

### v3.1.1 (2025-01-31) - Original Release
- Initial comprehensive AI integration rules
- Template system documentation
- Multi-language support guidelines
- Progressive deployment patterns

---

*Last updated: v3.1.1.3 (2025-01-31) - telegram-notify-action by @asychin*  
*Latest rules: https://github.com/asychin/telegram-notify-action/blob/main/.ai-integration-rules*