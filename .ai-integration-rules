# ü§ñ AI Integration Rules for telegram-notify-action

## üìã Mission Statement
Automatically analyze user repositories and intelligently integrate `telegram-notify-action@v3` with optimal configuration based on project structure, existing workflows, and user preferences.

## üîó Source & Usage Information

### üìç **Original Repository**
- **GitHub**: https://github.com/asychin/telegram-notify-action
- **Latest Version**: v3.1.0
- **Action Marketplace**: https://github.com/marketplace/actions/telegram-notify-action

### üìÑ **Get These Rules**
```bash
# Download latest AI integration rules
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules

# Or view in browser
https://github.com/asychin/telegram-notify-action/blob/main/.ai-integration-rules
```

### üß† **For AI Systems**
These rules should be used by AI assistants (ChatGPT, Claude, Copilot, etc.) when users request:
- "Add Telegram notifications to my project"
- "Integrate telegram-notify-action into my workflows"  
- "Set up GitHub Actions notifications"
- "Add deployment notifications"

### üìö **Documentation Links**
- **Full Documentation**: https://github.com/asychin/telegram-notify-action/tree/main/docs
- **English Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/en/README.md
- **Russian Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/ru/README.md
- **Chinese Docs**: https://github.com/asychin/telegram-notify-action/blob/main/docs/zh/README.md
- **Template System**: https://github.com/asychin/telegram-notify-action/blob/main/docs/en/TEMPLATE-SYSTEM.md
- **Examples**: https://github.com/asychin/telegram-notify-action/tree/main/examples

### üöÄ **Quick Start Reference**
```yaml
# Basic integration example
- name: üì¢ Notify Telegram
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    template: success
    message: "Deployment completed!"
```

### ‚ö†Ô∏è **Important Notes**
- Always use specific version tags (e.g., `@v3.1.0`) not `@main`
- These rules are updated with each major release
- Check repository for latest template variables and features
- Verify examples compatibility with current version

---

## üîç Repository Analysis Phase

### 1. Repository Structure Analysis
```yaml
analyze_repository:
  project_type:
    - detect: package.json ‚Üí Node.js project
    - detect: requirements.txt/pyproject.toml ‚Üí Python project  
    - detect: pom.xml/build.gradle ‚Üí Java project
    - detect: go.mod ‚Üí Go project
    - detect: Cargo.toml ‚Üí Rust project
    - detect: composer.json ‚Üí PHP project
    - detect: Dockerfile ‚Üí Containerized project
  
  deployment_indicators:
    - check: .github/workflows/*.yml ‚Üí existing CI/CD
    - check: docker-compose.yml ‚Üí local/staging deployment
    - check: k8s/*.yml ‚Üí Kubernetes deployment
    - check: terraform/*.tf ‚Üí Infrastructure as Code
    - check: ansible/*.yml ‚Üí Configuration management
```

### 2. Existing Workflow Analysis
```yaml
workflow_analysis:
  scan_workflows:  
    - path: .github/workflows/
    - identify_jobs: [build, test, deploy, release]
    - detect_triggers: [push, pull_request, release, workflow_dispatch]
    - find_secrets: [TELEGRAM_*, *_TOKEN, *_CHAT_ID]
    - analyze_steps: [checkout, build, docker, deploy]
  
  deployment_patterns:
    simple_deploy: 
      - single job deployment
      - basic build ‚Üí deploy flow
    complex_deploy:
      - multi-stage deployment (build ‚Üí test ‚Üí deploy)
      - matrix deployments
      - environment-specific deployments
    advanced_deploy:
      - progressive deployments
      - rollback capabilities
      - health checks
```

## üí¨ User Interaction Questionnaire

### 1. Core Integration Questions
```yaml
user_questions:
  notification_preference:
    question: "üîî How detailed should your Telegram notifications be?"
    options:
      - basic: "Simple success/failure notifications"
      - detailed: "Include commit info, branch, and duration"
      - dynamic: "Real-time updates with progress tracking"
      - comprehensive: "Full deployment pipeline with statistics"
  
  visual_preference:
    question: "üé® Do you want emojis and visual formatting?"
    options:
      - minimal: "Text-only notifications"
      - standard: "Basic emojis for status"
      - rich: "Rich emojis and formatting"
      - animated: "Progress bars and dynamic indicators"
  
  update_style:
    question: "üì± How should notifications be delivered?"
    options:
      - separate: "Send separate messages for each stage"
      - update: "Update single message with progress"
      - thread: "Use threaded messages in topics"
      - hybrid: "Combine updates with final summary"
```

### 2. Technical Configuration Questions
```yaml
technical_questions:
  deployment_environments:
    question: "üåç Which environments do you deploy to?"
    detect_from: [workflow branches, environment secrets]
    options: [development, staging, production, feature-branches]
  
  notification_triggers:
    question: "‚ö° When should notifications be sent?"
    options:
      - all_events: "Every push, PR, and deployment"
      - deployments_only: "Only deployment workflows"  
      - failures_only: "Only failures and errors"
      - custom: "Specific events and conditions"
  
  file_attachments:
    question: "üìé Should notifications include file attachments?"  
    detect_artifacts: [build logs, test reports, coverage reports]
    options:
      - none: "No file attachments"
      - logs: "Include build/deployment logs"
      - reports: "Include test and coverage reports"
      - screenshots: "Include UI test screenshots"
```

## üß† Intelligence Rules

### 1. Smart Configuration Detection
```yaml
smart_detection:
  secrets_analysis:
    existing_telegram:
      - scan: repository secrets for TELEGRAM_*
      - detect: organization-level telegram configs
      - identify: multi-environment setups
    
    missing_secrets:
      - generate: setup instructions
      - suggest: naming conventions (TELEGRAM_BOT_TOKEN_{ENV})
      - create: environment-specific variables
  
  workflow_optimization:
    job_placement:
      - start_notifications: first job with needs: []
      - progress_notifications: after critical jobs
      - final_notifications: always() condition jobs
    
    conditional_logic:
      - success_path: when all jobs succeed  
      - failure_path: when any job fails
      - partial_success: when some matrix jobs fail
```

### 2. Template Selection Algorithm
```yaml
template_selection:
  basic_project:
    triggers: [simple workflow, < 3 jobs]
    recommended_templates: [success, error, warning, info]
    approach: "Use simple success/error templates with custom messages"
    example: "template: success + customMessage in template_vars"
  
  deployment_project:  
    triggers: [build + deploy jobs, CI/CD pipeline]
    recommended_templates: [deploy, success, error]
    approach: "Use deploy template for main deployments, success/error for steps"
    example: "template: deploy with deployStatus, customMessage variables"
  
  testing_project:
    triggers: [test suites, coverage reports]
    recommended_templates: [test, success, error]
    approach: "Use test template for test results, success/error for completion"
    example: "template: test with testStatus, coverage variables"
  
  release_project:
    triggers: [release workflows, tagging]
    recommended_templates: [release, success, error]
    approach: "Use release template for releases, success/error for build steps"
    example: "template: release (automatic variables from release events)"

  monitoring_project:
    triggers: [health checks, alerts, reporting]
    recommended_templates: [warning, error, info]
    approach: "Use warning for alerts, error for critical issues, info for reports"
    example: "Custom messages with detailed monitoring data"
    
  complex_progressive:
    triggers: [matrix builds, multi-stage deployments]
    recommended_templates: [info, deploy, success, error]
    approach: "Progressive notifications with message updates (message_id)"
    example: "Start with info, update with deploy/success/error, use message_id"
```

## üõ†Ô∏è Implementation Strategies

### 1. Non-Disruptive Integration
```yaml
integration_approach:
  minimal_changes:
    - add notification steps without modifying existing logic
    - use conditional notifications (success/failure only)
    - preserve existing workflow structure
  
  enhanced_integration:
    - add progress tracking between existing jobs
    - implement dynamic message updates
    - include deployment statistics and timing
  
  comprehensive_overhaul:
    - restructure workflows for optimal notification flow
    - implement advanced features (file uploads, keyboards)
    - add monitoring and alerting capabilities
```

### 2. Configuration Templates

#### A. Simple Integration (Basic Projects)
```yaml
simple_integration:
  add_to_existing_job:
    - name: üì¢ Notify Deployment Status
      if: always()
      uses: asychin/telegram-notify-action@v3
      with:
        telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
        template: ${{ job.status == 'success' && 'success' || 'error' }}
        message: ${{ job.status == 'success' && 'Deployment completed!' || 'Deployment failed!' }}
```

#### B. Dynamic Integration (Advanced Projects)  
```yaml
dynamic_integration:
  start_notification:
    job: notify-start
    capture: message_id, start_time
    template: deployment start with progress bar
  
  progress_updates:
    jobs: [build, test, deploy]  
    action: update existing message
    template: progress with stage completion
  
  final_notification:
    job: notify-complete
    condition: always()
    template: comprehensive summary with timings
```

#### C. Enterprise Integration (Complex Projects)
```yaml
enterprise_integration:
  features:
    - multi-environment notifications
    - service-specific progress tracking  
    - failure analysis and debugging info
    - rollback notifications
    - health check integration
    - custom keyboards for manual actions
```

## üìö Documentation Integration

### 1. Auto-Documentation Analysis
```yaml
documentation_check:
  read_current_docs:
    - fetch: latest README.md from telegram-notify-action
    - parse: available templates and variables
    - extract: latest features and breaking changes
    - verify: example compatibility with user's setup
  
  version_compatibility:
    - check: action.yml for current version (v3)
    - validate: deprecated features in user's existing setup
    - suggest: migration paths for older versions
    - warn: about breaking changes
```

### 2. Context-Aware Examples
```yaml
example_generation:
  based_on_project_type:
    node_js:
      - npm install/build examples
      - package.json version in notifications
      - test coverage integration
    
    docker:
      - container build notifications
      - image size and layer information
      - registry push confirmations
    
    kubernetes:
      - deployment status tracking
      - pod health notifications  
      - rollout progress updates
```

## üîí Security and Best Practices

### 1. Secrets Management Rules
```yaml
security_rules:
  token_setup:
    - never: expose tokens in code or logs
    - always: use repository/organization secrets
    - suggest: environment-specific token naming
    - validate: token permissions and chat access
  
  data_privacy:
    - avoid: sensitive data in notifications (passwords, keys)
    - sanitize: error messages and logs
    - limit: information exposure in public repositories
```

### 2. Workflow Security
```yaml
workflow_security:
  permissions:
    - minimal: only required permissions for each job
    - secure: use specific action versions (@v3, not @main)
    - validate: third-party action usage
  
  error_handling:
    - graceful: failure handling without breaking pipelines
    - informative: error messages without sensitive data
    - recoverable: continue-on-error for non-critical notifications
```

## üß™ Testing and Validation

### 1. Integration Testing Strategy
```yaml
testing_approach:
  dry_run:
    - simulate: notification sending without actual Telegram calls
    - validate: message formatting and variable substitution
    - check: conditional logic and job dependencies
  
  staging_test:
    - test: with actual Telegram bot in test environment
    - verify: message delivery and formatting
    - validate: file attachments and special features
  
  production_validation:
    - gradual: rollout with limited notifications
    - monitor: delivery success and error rates
    - feedback: user experience and preferences
```

### 2. Quality Assurance Rules
```yaml
quality_rules:
  message_quality:
    - readable: clear and informative messages
    - actionable: include relevant links and context
    - timely: sent at appropriate workflow stages
  
  performance_impact:
    - minimal: workflow execution time increase
    - reliable: handle Telegram API rate limits
    - resilient: graceful degradation on service issues
```

## üéØ Success Metrics and Monitoring

### 1. Integration Success Criteria
```yaml
success_metrics:
  technical:
    - workflow_completion: no broken pipelines
    - notification_delivery: > 95% success rate
    - user_satisfaction: positive feedback on usefulness
  
  adoption:
    - feature_usage: utilization of advanced features
    - customization: user-specific template modifications
    - retention: continued usage over time
```

### 2. Continuous Improvement
```yaml
improvement_cycle:
  feedback_collection:
    - monitor: common configuration patterns
    - analyze: frequent customization requests  
    - identify: missing features or templates
  
  template_evolution:
    - update: templates based on usage patterns
    - add: new variables for common use cases
    - optimize: message formatting for different project types
```

## üöÄ Deployment Automation

### 1. Auto-PR Generation
```yaml
automated_integration:
  pr_creation:
    title: "üîî Add Telegram Notifications with telegram-notify-action"
    description: |
      This PR adds intelligent Telegram notifications to your workflows using telegram-notify-action@v3.
      
      ## üìã What's Added:
      - [x] Deployment success/failure notifications
      - [x] Real-time progress updates  
      - [x] Rich formatting with emojis
      - [x] Secure secrets configuration
      
      ## ‚öôÔ∏è Configuration Required:
      1. Add `TELEGRAM_BOT_TOKEN` to repository secrets
      2. Add `TELEGRAM_CHAT_ID` to repository secrets
      3. Review and customize notification preferences
      
      ## üß™ Testing:
      - Notifications will be sent to specified chat
      - Use test deployments to verify configuration
    
    files_modified:
      - .github/workflows/*.yml
      - README.md (optional documentation update)
    
    review_checklist:
      - [ ] Secrets are properly configured
      - [ ] Notification timing is appropriate  
      - [ ] Message content is relevant
      - [ ] No sensitive data in notifications
```

## üìñ How to Use These Rules

### ü§ñ **For AI Assistants**
When a user requests Telegram notifications integration:

1. **Check for existing `.ai-integration-rules`** in their repository
2. **If found**: Use their customized rules (they may have modified these)
3. **If not found**: Apply these standard rules from telegram-notify-action repository

### üë®‚Äçüíª **For Developers** 
```bash
# Add these rules to your repository for consistent AI integration
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules

# Customize the rules for your specific project needs
# AI assistants will use your customized version when helping with integrations
```

### üîÑ **Keeping Rules Updated**
```bash
# Check for updates (compare versions)
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules | head -10

# Update to latest version  
curl -o .ai-integration-rules https://raw.githubusercontent.com/asychin/telegram-notify-action/main/.ai-integration-rules
```

### üéØ **AI Usage Instructions**

#### **Step 1: Repository Analysis**
- Scan project structure and existing workflows
- Identify deployment patterns and CI/CD setup
- Check for existing Telegram integration

#### **Step 2: User Questionnaire**  
- Ask about notification preferences (basic/detailed/dynamic)
- Determine visual formatting preferences (minimal/rich emojis)
- Identify deployment environments and triggers

#### **Step 3: Smart Integration**
- Apply appropriate template based on project complexity
- Generate workflow modifications with proper variable usage
- Ensure security best practices (secrets, permissions)

#### **Step 4: Documentation & Testing**
- Provide setup instructions for secrets
- Generate test cases for notification validation
- Include troubleshooting guidance

#### **Step 5: MANDATORY Self-Check Before Delivery**
- ‚úÖ **Template Validation:** Only use `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- ‚úÖ **Parameter Check:** No `message_thread_id` or other deprecated parameters
- ‚úÖ **JSON Format:** All `template_vars` must be valid JSON format
- ‚úÖ **No Conflicts:** Never use `template:` and `message:` together
- ‚úÖ **Version Check:** Always use `@v3.1.0` or newer specific version
- ‚úÖ **GitHub Variables:** Use `${{ github.* }}` in `template_vars`, `inline_keyboard`, `run:` commands
- ‚úÖ **Template Variables:** Use `{{var}}` ONLY in `message:`/`caption:` WITH `template:`

### üìù **Integration Examples Reference**

#### **Quick Commands for AI**
```bash
# Get latest action version
curl -s https://api.github.com/repos/asychin/telegram-notify-action/releases/latest | grep '"tag_name"'

# Check template variables  
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/docs/en/TEMPLATE-SYSTEM.md

# View examples
curl -s https://raw.githubusercontent.com/asychin/telegram-notify-action/main/examples/
```

### **üö® CRITICAL: Correct Integration Examples**

#### **‚úÖ CORRECT: Using Built-in Templates**
```yaml
# Deployment success with built-in template
- name: üì¢ Notify Deployment Success
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    template: deploy  # ‚úÖ Built-in template
    template_vars: |  # ‚úÖ JSON format
      {
        "customMessage": "Deployed to ${{ github.ref_name }}!",
        "deployStatus": "successful"
      }
```

#### **‚úÖ CORRECT: Custom Message (No Template)**
```yaml
# Custom message without template
- name: üì¢ Send Custom Notification  
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message: |  # ‚úÖ Custom message, no template
      üöÄ <b>Custom Deployment Started</b>
      
      <b>Repository:</b> ${{ github.repository }}
      <b>Branch:</b> ${{ github.ref_name }}
      <b>Commit:</b> ${{ github.sha }}
```

#### **‚úÖ CORRECT: Progressive Notifications**
```yaml
# 1. Start notification with message_id capture
- name: üì¢ Start Notification
  id: start_notification
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message: "üöÄ Deployment started..."

# 2. Update same message
- name: üì¢ Update Notification  
  uses: asychin/telegram-notify-action@v3.1.0
  with:
    telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
    message_id: ${{ steps.start_notification.outputs.message_id }}
    message: "‚úÖ Deployment completed!"
```

#### **‚ùå WRONG Examples (What NOT to do)**
```yaml
# ‚ùå WRONG: Non-existent template
template: deployment_start  # Does not exist!

# ‚ùå WRONG: Both template and message
template: deploy
message: "Custom message"  # Conflicts with template

# ‚ùå WRONG: Deprecated parameter
message_thread_id: ${{ vars.THREAD_ID }}  # Removed in v3

# ‚ùå WRONG: Bash-style template_vars
template_vars: |
  customMessage=Hello
  status=success

# ‚ùå WRONG: Handlebars syntax
message: |
  {{#if success}}
  ‚úÖ Success
  {{/if}}
```

---

## üö® **Critical Reminders**

### **Version Management**
- ‚ö†Ô∏è **Always** use specific version tags: `@v3.1.0` (not `@main` or `@latest`)
- üîÑ Update version references when new releases are available
- üìã Check CHANGELOG.md for breaking changes between versions

### **Variable Usage Rules** 
- üéØ Template variables (`{{var}}`) work ONLY in `message:`/`caption:` WITH `template:`
- ‚öôÔ∏è GitHub Actions variables (`${{var}}`) work in `template_vars:`, `inline_keyboard:`, `run:` commands
- üö´ Never mix template and GitHub Actions variable types

### **Available Templates (v3.1.0)**
- ‚úÖ **ONLY these templates exist:** `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- üö´ **DO NOT create custom templates** - they don't exist in the action
- üìã **For custom messages:** Use `message:` field WITHOUT `template:` parameter
- üîÑ **Template OR Message:** Never use both `template:` and `message:` together

### **Deprecated Parameters (v3.1.0)**
- ‚ùå **REMOVED:** `message_thread_id` parameter (no longer supported)
- ‚ùå **REMOVED:** Custom template support (only built-in templates work)
- ‚ùå **NOT SUPPORTED:** Handlebars syntax (`{{#if}}`, `{{#each}}`, etc.)

### **Template Variables JSON Format**
```yaml
# ‚úÖ CORRECT JSON format
template_vars: |
  {
    "customMessage": "Value with ${{ github.repository }}",
    "deployStatus": "successful",
    "version": "${{ github.ref_name }}"
  }

# ‚ùå WRONG bash-style assignment  
template_vars: |
  customMessage=Value
  deployStatus=successful
```

### **Security First**
- üîê Always use repository/organization secrets
- üö´ Never expose tokens in code or logs  
- üõ°Ô∏è Use minimal required permissions
- üîç Sanitize sensitive data in notifications

---

**Remember: This is an intelligent integration system. Always prioritize user experience, security, and non-disruptive implementation. The goal is to enhance existing workflows, not replace them.**

---

## üö® **COMMON AI INTEGRATION MISTAKES & SOLUTIONS**

### **‚ùå Mistake 1: Using Custom Templates**
```yaml
# WRONG
template: deployment_start
template: monitoring_report
template: custom_alert
```
**‚úÖ Solution:** Use ONLY built-in templates: `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`

### **‚ùå Mistake 2: Wrong template_vars Format**
```yaml
# WRONG - bash style
template_vars: |
  status=success
  message=Hello
```
**‚úÖ Solution:** Always use JSON format:
```yaml
template_vars: |
  {
    "status": "success", 
    "message": "Hello"
  }
```

### **‚ùå Mistake 3: Using Deprecated Parameters**
```yaml
# WRONG - removed in v3
message_thread_id: ${{ vars.THREAD_ID }}
```
**‚úÖ Solution:** Remove deprecated parameters completely

### **‚ùå Mistake 4: Template + Message Conflict**
```yaml
# WRONG - conflicts
template: deploy
message: "Custom message"
```
**‚úÖ Solution:** Use EITHER template OR message, never both:
```yaml
# Option A: Template only
template: deploy
template_vars: |
  {"customMessage": "Details"}

# Option B: Message only  
message: "Custom message text"
```

### **‚ùå Mistake 5: Handlebars/Mustache Syntax**
```yaml
# WRONG - not supported
message: |
  {{#if success}}
  ‚úÖ Success
  {{/if}}
```
**‚úÖ Solution:** Use plain text with GitHub variables:
```yaml
message: |
  ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
```

### **üîß Quick Validation Checklist for AI:**
- [ ] Templates: Only `success`, `error`, `warning`, `info`, `deploy`, `test`, `release`
- [ ] No `message_thread_id` parameter
- [ ] `template_vars` in JSON format
- [ ] Not mixing `template:` and `message:`
- [ ] Version `@v3.1.0` or newer
- [ ] GitHub variables `${{}}` in JSON/shell contexts
- [ ] Template variables `{{}}` only in `message:`/`caption:` WITH `template:`

---

*Last updated: v3.1.0 (2025-01-31) - telegram-notify-action by @asychin*  
*Latest rules: https://github.com/asychin/telegram-notify-action/blob/main/.ai-integration-rules*