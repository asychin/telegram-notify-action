# üéØ Comprehensive Usage Examples for Telegram Notify Action
#
# This file demonstrates various use cases and configurations
# for the telegram-notify-action with AUTO-CONTEXT VARIABLES

name: Telegram Notify Usage Examples

on:
  workflow_dispatch:
    inputs:
      example_type:
        description: "Choose example to run"
        required: true
        default: "basic"
        type: choice
        options:
          - basic
          - templates
          - files
          - keyboards
          - conditions

jobs:
  # üìù BASIC MESSAGING EXAMPLES
  basic-examples:
    name: Basic Examples
    runs-on: ubuntu-latest
    if: github.event.inputs.example_type == 'basic'
    steps:
      - uses: actions/checkout@v4

      - name: Simple text message
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            üì¢ **–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**
            
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - –í–ª–∞–¥–µ–ª–µ—Ü: {{repositoryOwner}}
            - Workflow: {{workflow}}
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}

      - name: HTML formatted message
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          parse_mode: "HTML"
          message: |
            <b>üé® HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>
            
            <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> <code>{{repository}}</code>
            <b>–ê–∫—Ç–æ—Ä:</b> <i>{{actor}}</i>
            <b>SHA:</b> <code>{{sha}}</code>
            <b>Runner:</b> {{runnerName}} ({{runnerOs}})

      - name: Markdown formatted message
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          parse_mode: "Markdown"
          message: |
            **üìã Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**
            
            **Workflow:** `{{workflow}}`
            **–ó–∞–ø—É—Å–∫:** #{{runNumber}}
            **–í–µ—Ç–∫–∞:** `{{refName}}`
            **–í—Ä–µ–º—è:** {{triggeredAt}}

  # üé® TEMPLATE EXAMPLES
  template-examples:
    name: Template Examples
    runs-on: ubuntu-latest
    if: github.event.inputs.example_type == 'templates'
    strategy:
      matrix:
        template: [success, error, warning, info, deploy, test, release]
    steps:
      - uses: actions/checkout@v4

      - name: ${{ matrix.template }} template example
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: ${{ matrix.template }}
          message: |
            üé® **–®–∞–±–ª–æ–Ω: ${{ matrix.template }}**
            
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –¥–µ–π—Å—Ç–≤–∏–∏:
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - –í–ª–∞–¥–µ–ª–µ—Ü: {{repositoryOwner}}
            - ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {{repositoryId}}
            - Workflow: {{workflow}}
            - –ó–∞–¥–∞—á–∞: {{job}}
            - –ó–∞–ø—É—Å–∫: #{{runNumber}} (ID: {{runId}})
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}
            - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {{runnerArch}}
            - –ê–∫—Ç–æ—Ä: {{actor}}
            - –°–æ–±—ã—Ç–∏–µ: {{eventName}}
            - –í—Ä–µ–º—è: {{triggeredAt}}

  # üìé FILE UPLOAD EXAMPLES
  file-examples:
    name: File Upload Examples
    runs-on: ubuntu-latest
    if: github.event.inputs.example_type == 'files'
    steps:
      - uses: actions/checkout@v4

      - name: Create sample files
        run: |
          echo "Sample document content" > sample.txt
          echo "Repository: {{repository}}" >> sample.txt
          echo "Workflow: {{workflow}}" >> sample.txt
          echo "Runner: {{runnerName}}" >> sample.txt
          
          # Create a simple JSON file
          cat > data.json << EOF
          {
            "repository": "{{repository}}",
            "workflow": "{{workflow}}",
            "runNumber": "{{runNumber}}",
            "actor": "{{actor}}"
          }
          EOF

      - name: Send document
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          file_path: "sample.txt"
          file_type: "document"
          caption: |
            üìÑ **–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω**
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç:
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - Workflow: {{workflow}}
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}
            - –í—Ä–µ–º—è: {{triggeredAt}}

      - name: Send JSON data
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          file_path: "data.json"
          file_type: "document"
          caption: |
            üìä **JSON –¥–∞–Ω–Ω—ã–µ**
            
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ GitHub:
            - ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {{repositoryId}}
            - –í–ª–∞–¥–µ–ª–µ—Ü: {{repositoryOwner}}
            - SHA: {{sha}}
            - –í–µ—Ç–∫–∞: {{refName}} ({{refType}})

  # ‚å®Ô∏è KEYBOARD EXAMPLES
  keyboard-examples:
    name: Inline Keyboard Examples
    runs-on: ubuntu-latest
    if: github.event.inputs.example_type == 'keyboards'
    steps:
      - uses: actions/checkout@v4

      - name: Simple inline keyboard
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            ‚å®Ô∏è **–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞**
            
            –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            Workflow: {{workflow}}
            Runner: {{runnerName}}
          inline_keyboard: |
            [
              {"text": "üè† –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", "url": "{{serverUrl}}/{{repository}}"},
              {"text": "üîÑ Workflow", "url": "{{serverUrl}}/{{repository}}/actions/runs/{{runId}}"}
            ]

      - name: Multi-row keyboard
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: "info"
          message: |
            üéõÔ∏è **–ú–Ω–æ–≥–æ—Ä—è–¥–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞**
            
            GitHub –∫–æ–Ω—Ç–µ–∫—Å—Ç:
            - –°–µ—Ä–≤–µ—Ä: {{serverUrl}}
            - API: {{apiUrl}}
            - GraphQL: {{graphqlUrl}}
          inline_keyboard: |
            [
              [
                {"text": "üìä Actions", "url": "{{serverUrl}}/{{repository}}/actions"},
                {"text": "üìà Insights", "url": "{{serverUrl}}/{{repository}}/pulse"}
              ],
              [
                {"text": "üîí Security", "url": "{{serverUrl}}/{{repository}}/security"},
                {"text": "‚öôÔ∏è Settings", "url": "{{serverUrl}}/{{repository}}/settings"}
              ],
              [
                {"text": "üìù Issues", "url": "{{serverUrl}}/{{repository}}/issues"},
                {"text": "üîÄ Pull Requests", "url": "{{serverUrl}}/{{repository}}/pulls"}
              ]
            ]

  # üîÄ CONDITIONAL EXAMPLES
  conditional-examples:
    name: Conditional Sending Examples
    runs-on: ubuntu-latest
    if: github.event.inputs.example_type == 'conditions'
    steps:
      - uses: actions/checkout@v4

      - name: Success only notification
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          send_on_success: true
          send_on_failure: false
          template: "success"
          message: |
            ‚úÖ **–¢–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ**
            
            –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç:
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {{jobStatus}}
            - Runner: {{runnerName}}

      - name: Always send notification
        uses: ./
        if: always()
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: "info"
          message: |
            üì¢ **–í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è**
            
            –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
            
            GitHub Actions –∫–æ–Ω—Ç–µ–∫—Å—Ç:
            - Workflow: {{workflow}}
            - –ó–∞–¥–∞—á–∞: {{job}}
            - –ó–∞–ø—É—Å–∫: #{{runNumber}}
            - –ê–∫—Ç–æ—Ä: {{actor}}
            - –û–∫—Ä—É–∂–µ–Ω–∏–µ: {{actionsEnvironment}}
            - Workspace: {{workspace}}
            - Tool Cache: {{runnerToolCache}}

  # üìä COMPREHENSIVE EXAMPLE
  comprehensive-example:
    name: Comprehensive Example
    runs-on: ubuntu-latest
    if: always()
    needs: [basic-examples, template-examples, file-examples, keyboard-examples, conditional-examples]
    steps:
      - uses: actions/checkout@v4

      - name: Final comprehensive notification
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: "release"
          language: "ru"
          message: |
            üéâ **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω**
            
            üìä **–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç GitHub Actions:**
            
            üè¢ **–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:**
            - –ù–∞–∑–≤–∞–Ω–∏–µ: {{repository}}
            - –í–ª–∞–¥–µ–ª–µ—Ü: {{repositoryOwner}}
            - ID: {{repositoryId}}
            - ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: {{repositoryOwnerId}}
            
            üåø **Git –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
            - –°—Å—ã–ª–∫–∞: {{ref}}
            - –ò–º—è –≤–µ—Ç–∫–∏: {{refName}}
            - –¢–∏–ø: {{refType}}
            - –ó–∞—â–∏—â–µ–Ω–∞: {{refProtected}}
            - SHA: {{sha}}
            
            üîÑ **Workflow –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
            - –ù–∞–∑–≤–∞–Ω–∏–µ: {{workflow}}
            - –°—Å—ã–ª–∫–∞: {{workflowRef}}
            - SHA: {{workflowSha}}
            - –ó–∞–¥–∞—á–∞: {{job}}
            - –°—Ç–∞—Ç—É—Å: {{jobStatus}}
            
            üèÉ **–ó–∞–ø—É—Å–∫:**
            - ID: {{runId}}
            - –ù–æ–º–µ—Ä: {{runNumber}}
            - –ü–æ–ø—ã—Ç–∫–∞: {{runAttempt}}
            - –°–æ–±—ã—Ç–∏–µ: {{eventName}}
            - –ê–∫—Ç–æ—Ä: {{actor}}
            - ID –∞–∫—Ç–æ—Ä–∞: {{actorId}}
            - –í—Ä–µ–º—è: {{triggeredAt}}
            
            üñ•Ô∏è **Runner:**
            - –ò–º—è: {{runnerName}}
            - –û–°: {{runnerOs}}
            - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {{runnerArch}}
            - Workspace: {{workspace}}
            - Tool Cache: {{runnerToolCache}}
            - Temp: {{runnerTemp}}
            
            üåê **–û–∫—Ä—É–∂–µ–Ω–∏–µ:**
            - GitHub Actions: {{actionsEnvironment}}
            - ID –æ–∫—Ä—É–∂–µ–Ω–∏—è: {{actionsEnvironmentId}}
            - URL –æ–∫—Ä—É–∂–µ–Ω–∏—è: {{actionsEnvironmentUrl}}
            
            üîó **URLs:**
            - –°–µ—Ä–≤–µ—Ä: {{serverUrl}}
            - API: {{apiUrl}}
            - GraphQL: {{graphqlUrl}}
          inline_keyboard: |
            [
              [
                {"text": "üè† –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", "url": "{{serverUrl}}/{{repository}}"},
                {"text": "üîÑ –≠—Ç–æ—Ç –∑–∞–ø—É—Å–∫", "url": "{{serverUrl}}/{{repository}}/actions/runs/{{runId}}"}
              ],
              [
                {"text": "üìä –í—Å–µ Actions", "url": "{{serverUrl}}/{{repository}}/actions"},
                {"text": "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "url": "{{serverUrl}}/{{repository}}/pulse"}
              ],
              [
                {"text": "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "url": "{{serverUrl}}/{{repository}}/security"},
                {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "url": "{{serverUrl}}/{{repository}}/settings"}
              ]
            ]