name: Test and Validate Action

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_scenario:
        description: "Test scenario to run"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - basic
          - templates
          - files
          - error-handling

jobs:
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Check for security vulnerabilities
        run: npm audit --audit-level high

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == '' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        test-case:
          - name: "Basic Message"
            template: ""
            message: "üß™ Basic test message from GitHub Actions"
          - name: "Success Template"
            template: "success"
            message: "Integration test completed successfully!"
          - name: "Error Template"
            template: "error"
            message: "Simulated error for testing"
          - name: "Deploy Template"
            template: "deploy"
            message: ""
          - name: "With Inline Keyboard"
            template: ""
            message: "Test with inline keyboard"
            keyboard: '[{"text": "‚úÖ Success", "callback_data": "success"}, {"text": "‚ùå Failed", "callback_data": "failed"}]'
    steps:
      - uses: actions/checkout@v4

      - name: Test ${{ matrix.test-case.name }}
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            ${{ matrix.test-case.message }}
            
            üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - –í–ª–∞–¥–µ–ª–µ—Ü: {{repositoryOwner}}
            - –í–µ—Ç–∫–∞: {{refName}}
            - SHA: {{sha}}
            - Workflow: {{workflow}}
            - –ó–∞–¥–∞—á–∞: {{job}}
            - –ó–∞–ø—É—Å–∫: #{{runNumber}}
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}
            - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {{runnerArch}}
            - –ê–∫—Ç–æ—Ä: {{actor}}
            - –í—Ä–µ–º—è: {{triggeredAt}}
            
            üåê **–û–∫—Ä—É–∂–µ–Ω–∏–µ:**
            - Actions Environment: {{actionsEnvironment}}
            - Workspace: {{workspace}}
            - Server: {{serverUrl}}
          template: ${{ matrix.test-case.template }}
          inline_keyboard: ${{ matrix.test-case.keyboard || '' }}
          max_retries: 2
          retry_delay: 1

  conditional-tests:
    name: Conditional Sending Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'error-handling' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        condition:
          - name: "Send on Success Only"
            send_on_success: "true"
            send_on_failure: "false"
            simulate_failure: "false"
          - name: "Send on Failure Only"
            send_on_success: "false"
            send_on_failure: "true"
            simulate_failure: "true"
    steps:
      - uses: actions/checkout@v4

      - name: Simulate job failure
        if: matrix.condition.simulate_failure == 'true'
        run: |
          echo "Simulating failure for testing conditional sending"
          exit 1
        continue-on-error: true
        id: simulate-fail

      - name: Test conditional sending - ${{ matrix.condition.name }}
        uses: ./
        if: always()
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            üß™ **–£—Å–ª–æ–≤–Ω—ã–π —Ç–µ—Å—Ç: ${{ matrix.condition.name }}**
            
            **–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:** ${{ job.status }}
            **–°—Ç–∞—Ç—É—Å —à–∞–≥–∞:** ${{ steps.simulate-fail.outcome }}
            **–î–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:** ${{ (matrix.condition.send_on_success == 'true' && job.status == 'success') || (matrix.condition.send_on_failure == 'true' && steps.simulate-fail.outcome == 'failure') }}
            
            üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç GitHub:**
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - Workflow: {{workflow}}
            - –ó–∞–¥–∞—á–∞: {{job}}
            - –ó–∞–ø—É—Å–∫: #{{runNumber}}
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}
            - –ê–∫—Ç–æ—Ä: {{actor}}
            - –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {{jobStatus}}
          send_on_success: ${{ matrix.condition.send_on_success }}
          send_on_failure: ${{ matrix.condition.send_on_failure }}
          template: "info"

  file-upload-tests:
    name: File Upload Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'files' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        file-type:
          - type: "document"
            extension: "txt"
            content: "Test document content\nGenerated by GitHub Actions"
          - type: "photo"
            extension: "png"
    steps:
      - uses: actions/checkout@v4

      - name: Create test document
        if: matrix.file-type.type == 'document'
        run: |
          echo "${{ matrix.file-type.content }}" > test-file.${{ matrix.file-type.extension }}
          echo "Build Date: $(date)" >> test-file.${{ matrix.file-type.extension }}

      - name: Create test image
        if: matrix.file-type.type == 'photo'
        run: |
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > test-file.png
          echo "Created 1x1 PNG test file ($(stat -c%s test-file.png) bytes)"

      - name: Test file upload - ${{ matrix.file-type.type }}
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          file_path: test-file.${{ matrix.file-type.extension }}
          file_type: ${{ matrix.file-type.type }}
          caption: |
            üìé **–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞**
            
            **–¢–∏–ø:** ${{ matrix.file-type.type }}
            **–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** {{repository}}
            **–í–ª–∞–¥–µ–ª–µ—Ü:** {{repositoryOwner}}
            **–í–µ—Ç–∫–∞:** {{refName}}
            **Workflow:** {{workflow}}
            **–ó–∞–ø—É—Å–∫:** #{{runNumber}}
            **Runner:** {{runnerName}} –Ω–∞ {{runnerOs}}
            **SHA:** {{sha}}
            **–ê–∫—Ç–æ—Ä:** {{actor}}
            **–í—Ä–µ–º—è:** {{triggeredAt}}

  error-handling-tests:
    name: Error Handling Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'error-handling' || github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Test retry mechanism with invalid token
        uses: ./
        continue-on-error: true
        with:
          telegram_token: "invalid_token_for_testing"
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            ‚ùå **–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤**
            
            –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤.
            
            üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:**
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - Workflow: {{workflow}}
            - –ó–∞–ø—É—Å–∫: #{{runNumber}}
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}
          max_retries: 2
          retry_delay: 1
        id: retry-test

      - name: Verify retry test failed as expected
        run: |
          if [ "${{ steps.retry-test.outcome }}" != "failure" ]; then
            echo "Error: Retry test should have failed but didn't"
            exit 1
          fi
          echo "‚úÖ Retry test failed as expected"

  template-tests:
    name: Template Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'templates' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        template: [success, error, warning, info, deploy, test, release]
        language: [en, ru]
    steps:
      - uses: actions/checkout@v4

      - name: Test ${{ matrix.template }} template in ${{ matrix.language }}
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: ${{ matrix.template }}
          language: ${{ matrix.language }}
          message: |
            üé® **–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞: ${{ matrix.template }}**
            **–Ø–∑—ã–∫:** ${{ matrix.language }}
            
            üìä **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:**
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - –í–ª–∞–¥–µ–ª–µ—Ü: {{repositoryOwner}}
            - ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {{repositoryId}}
            - –í–µ—Ç–∫–∞: {{refName}} ({{refType}})
            - SHA: {{sha}}
            - Workflow: {{workflow}}
            - –ó–∞–¥–∞—á–∞: {{job}}
            - –ó–∞–ø—É—Å–∫: #{{runNumber}} (ID: {{runId}})
            - –ü–æ–ø—ã—Ç–∫–∞: {{runAttempt}}
            - –°–æ–±—ã—Ç–∏–µ: {{eventName}}
            - –ê–∫—Ç–æ—Ä: {{actor}}
            - –í—Ä–µ–º—è: {{triggeredAt}}
            
            üñ•Ô∏è **Runner –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
            - –ò–º—è: {{runnerName}}
            - –û–°: {{runnerOs}}
            - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {{runnerArch}}
            - Workspace: {{workspace}}
            - Tool Cache: {{runnerToolCache}}
            - Temp: {{runnerTemp}}
            
            üåê **GitHub URLs:**
            - –°–µ—Ä–≤–µ—Ä: {{serverUrl}}
            - API: {{apiUrl}}
            - GraphQL: {{graphqlUrl}}

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for hardcoded secrets
        run: |
          if grep -r "bot[0-9]\+:" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå Found potential hardcoded bot tokens"
            exit 1
          fi
          echo "‚úÖ No hardcoded secrets found"

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Test action performance
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: "test"
          message: |
            ‚ö° **–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**
            
            –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è action —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.
            
            üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:**
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - Workflow: {{workflow}}
            - –ó–∞–¥–∞—á–∞: {{job}}
            - –ó–∞–ø—É—Å–∫: #{{runNumber}}
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}
            - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {{runnerArch}}
            - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {{triggeredAt}}
        id: perf-test

      - name: Check execution time
        run: |
          echo "Performance test completed"
          echo "Message ID: ${{ steps.perf-test.outputs.message_id }}"
          echo "Retry count: ${{ steps.perf-test.outputs.retry_count }}"

  image-upload-tests:
    name: Image Upload Tests (C2PA)
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'files' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        test-case:
          - name: "C2PA Photo Auto-Convert"
            file_type: "photo"
            caption: "üß™ C2PA Test: Should auto-convert to document"
            expected_behavior: "auto-convert"
          - name: "Document Upload (Recommended)"
            file_type: "document"
            caption: "üìÑ Recommended: Document type for C2PA images"
            expected_behavior: "success"
    steps:
      - uses: actions/checkout@v4

      - name: üñºÔ∏è Test ${{ matrix.test-case.name }}
        uses: ./
        id: image-test
        continue-on-error: true
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          file_path: "test-image.png"
          file_type: ${{ matrix.test-case.file_type }}
          caption: |
            ${{ matrix.test-case.caption }}
            
            üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:**
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - Workflow: {{workflow}}
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}
            - SHA: {{sha}}
          language: "ru"
          max_retries: 2

      - name: üìä Validate Results
        run: |
          echo "Test: ${{ matrix.test-case.name }}"
          echo "Success: ${{ steps.image-test.outputs.success }}"
          echo "File ID: ${{ steps.image-test.outputs.file_id }}"
          echo "Retry Count: ${{ steps.image-test.outputs.retry_count }}"

  final-notification:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        integration-tests,
        conditional-tests,
        file-upload-tests,
        error-handling-tests,
        template-tests,
        security-tests,
        performance-tests,
        image-upload-tests,
      ]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Send test summary
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: ${{ needs.integration-tests.result == 'success' && needs.conditional-tests.result == 'success' && needs.file-upload-tests.result == 'success' && needs.template-tests.result == 'success' && needs.image-upload-tests.result == 'success' && 'success' || 'error' }}
          message: |
            üß™ **–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω**
            
            üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
            ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: ${{ needs.integration-tests.result }}
            ‚Ä¢ –£—Å–ª–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã: ${{ needs.conditional-tests.result }}  
            ‚Ä¢ –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ${{ needs.file-upload-tests.result }}
            ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: ${{ needs.error-handling-tests.result }}
            ‚Ä¢ –¢–µ—Å—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤: ${{ needs.template-tests.result }}
            ‚Ä¢ –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${{ needs.security-tests.result }}
            ‚Ä¢ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${{ needs.performance-tests.result }}
            ‚Ä¢ üñºÔ∏è –¢–µ—Å—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (C2PA): ${{ needs.image-upload-tests.result }}
            
            üìã **–ö–æ–Ω—Ç–µ–∫—Å—Ç GitHub:**
            - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {{repository}}
            - –í–ª–∞–¥–µ–ª–µ—Ü: {{repositoryOwner}}
            - Workflow: {{workflow}}
            - –ó–∞–ø—É—Å–∫: #{{runNumber}} (ID: {{runId}})
            - SHA: {{sha}}
            - –ê–∫—Ç–æ—Ä: {{actor}}
            - Runner: {{runnerName}} –Ω–∞ {{runnerOs}}
            - –í—Ä–µ–º—è: {{triggeredAt}}
            
            üåê **–û–∫—Ä—É–∂–µ–Ω–∏–µ:**
            - Actions Environment: {{actionsEnvironment}}
            - Server: {{serverUrl}}
            - Workspace: {{workspace}}
          inline_keyboard: |
            [
              {"text": "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Workflow", "url": "{{serverUrl}}/{{repository}}/actions/runs/{{runId}}"},
              {"text": "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç", "url": "{{serverUrl}}/{{repository}}/commit/{{sha}}"}
            ]
