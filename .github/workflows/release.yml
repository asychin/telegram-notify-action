name: Release Notification

on:
  release:
    types: [published, prereleased]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true
        default: "v2.0.0"
      prerelease:
        description: "Is this a prerelease?"
        required: false
        default: false
        type: boolean

jobs:
  release-notification:
    name: Send Release Notification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get release info
        id: release-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
            echo "release_notes=Manual release triggered via workflow dispatch" >> $GITHUB_OUTPUT
            echo "download_url=https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ github.event.release.prerelease }}" >> $GITHUB_OUTPUT
            # Use base64 encoding to safely handle release body with any content
            RELEASE_BODY_B64=$(echo '${{ toJSON(github.event.release.body) }}' | jq -r '.' | base64 -w 0)
            echo "release_notes_b64=${RELEASE_BODY_B64}" >> $GITHUB_OUTPUT
            echo "release_notes=Release notes (see base64 decoded content)" >> $GITHUB_OUTPUT
            echo "download_url=${{ github.event.release.html_url }}" >> $GITHUB_OUTPUT
          fi

      - name: 🕐 Get current timestamp
        id: timestamp
        run: echo "time=$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")" >> $GITHUB_OUTPUT

      - name: Create release asset (changelog)
        run: |
          # Create release notes safely without heredoc to avoid shell injection
          echo "# Release ${{ steps.release-info.outputs.version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Repository:** ${{ github.repository }}" >> RELEASE_NOTES.md
          echo "**Released by:** ${{ github.actor }}" >> RELEASE_NOTES.md
          echo "**Date:** ${{ steps.timestamp.outputs.time }}" >> RELEASE_NOTES.md
          echo "**Prerelease:** ${{ steps.release-info.outputs.prerelease }}" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Release Notes" >> RELEASE_NOTES.md
          # Safely decode base64 release notes
          if [ -n "${{ steps.release-info.outputs.release_notes_b64 }}" ]; then
            echo "${{ steps.release-info.outputs.release_notes_b64 }}" | base64 -d >> RELEASE_NOTES.md
          else
            echo "${{ steps.release-info.outputs.release_notes }}" >> RELEASE_NOTES.md
          fi
          echo "" >> RELEASE_NOTES.md
          echo "## What's Changed" >> RELEASE_NOTES.md
          echo "- Enhanced Telegram notifications with file support" >> RELEASE_NOTES.md
          echo "- Added message templates for different scenarios" >> RELEASE_NOTES.md
          echo "- Implemented retry logic with exponential backoff" >> RELEASE_NOTES.md
          echo "- Added inline keyboard support" >> RELEASE_NOTES.md
          echo "- Comprehensive testing suite" >> RELEASE_NOTES.md
          echo "- Improved error handling and logging" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo '```yaml' >> RELEASE_NOTES.md
          echo "- uses: asychin/telegram-notify-action@${{ steps.release-info.outputs.version }}" >> RELEASE_NOTES.md
          echo "  with:" >> RELEASE_NOTES.md
          echo "    telegram_token: \${{ secrets.TELEGRAM_BOT_TOKEN }}" >> RELEASE_NOTES.md
          echo "    chat_id: \${{ secrets.TELEGRAM_CHAT_ID }}" >> RELEASE_NOTES.md
          echo '    message: "Your notification message"' >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Links" >> RELEASE_NOTES.md
          echo "- [Download](${{ steps.release-info.outputs.download_url }})" >> RELEASE_NOTES.md
          echo "- [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)" >> RELEASE_NOTES.md
          echo "- [Examples](https://github.com/${{ github.repository }}/tree/main/examples)" >> RELEASE_NOTES.md

      - name: Send release notification to Telegram
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: release
          parse_mode: "Markdown"
          language: en
          template_vars: |
            {
              "customMessage": "New release published successfully with enhanced features and improvements!"
            }
          inline_keyboard: |
            [
              [
                {"text": "📥 Download Release", "url": "${{ steps.release-info.outputs.download_url }}"},
                {"text": "📖 Documentation", "url": "https://github.com/${{ github.repository }}/blob/main/README.md"}
              ],
              [
                {"text": "💬 Discussions", "url": "https://github.com/${{ github.repository }}/discussions"},
                {"text": "🐛 Report Issue", "url": "https://github.com/${{ github.repository }}/issues/new"}
              ],
              [
                {"text": "🏠 Repository", "url": "https://github.com/${{ github.repository }}"},
                {"text": "📋 All Releases", "url": "https://github.com/${{ github.repository }}/releases"}
              ]
            ]

      - name: Send release notes as document
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          file_path: RELEASE_NOTES.md
          file_type: document
          parse_mode: "Markdown"
          caption: |
            📋 **Complete Release Notes**

            **🏷️ Version:** ${{ steps.release-info.outputs.version }}
            **🏠 Repository:** ${{ github.repository }}
            **👤 Owner:** ${{ github.repository_owner }}
            **📅 Published:** ${{ steps.timestamp.outputs.time }}
            **🔖 Tag:** ${{ steps.release-info.outputs.version }}
            **👤 Author:** ${{ github.actor }}

            **📄 File Contents:**
            • Detailed description of changes
            • Installation instructions
            • Usage examples
            • Documentation links

            File contains comprehensive information about the new release ${{ steps.release-info.outputs.version }}

      - name: Notify development team (if prerelease)
        if: steps.release-info.outputs.prerelease == 'true'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_DEV_CHAT_ID }}
          template: warning
          parse_mode: "Markdown"
          language: en
          message: |
            🚧 **Prerelease Published!**

            **🏷️ Version:** {{releaseName}}
            **🏠 Repository:** {{repository}}
            **👤 Author:** {{releaseAuthor}}
            **📅 Published:** {{releaseCreatedAt}}
            **🔖 Tag:** {{releaseTag}}

            **⚠️ Development Team Attention:**
            A prerelease version has been published and requires team testing.

            **📋 Required Actions:**
            • 🧪 Conduct thorough testing
            • 🔍 Check compatibility
            • 📝 Update documentation
            • 🐛 Fix any found bugs
            • ✅ Confirm readiness for stable release

            **📋 Release Notes:**
            See attached release notes document for full details.

            Please test thoroughly before promoting to stable release.

            **🌿 Branch:** {{refName}}
            **👤 Workflow:** {{workflow}}
          template_vars: |
            {
              "customMessage": "Attention! New prerelease requires team testing and thorough validation"
            }
          inline_keyboard: |
            [
              [
                {"text": "🧪 Test Release", "url": "${{ steps.release-info.outputs.download_url }}"},
                {"text": "📖 Documentation", "url": "https://github.com/${{ github.repository }}/blob/main/README.md"}
              ],
              [
                {"text": "🐛 Report Bug", "url": "https://github.com/${{ github.repository }}/issues/new"},
                {"text": "💬 Discussion", "url": "https://github.com/${{ github.repository }}/discussions"}
              ],
              [
                {"text": "🏠 Repository", "url": "https://github.com/${{ github.repository }}"},
                {"text": "📋 All Releases", "url": "https://github.com/${{ github.repository }}/releases"}
              ]
            ]

  post-release-tasks:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: release-notification
    if: github.event.release.prerelease != true
    steps:
      - uses: actions/checkout@v4

      - name: Update marketplace listing
        run: |
          echo "Updating GitHub Marketplace listing..."
          # Add logic to update marketplace if needed

      - name: Notify success
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: success
          message: |
            ✅ **Release Process Completed**

            All post-release tasks have been completed successfully.
            The action is now available on GitHub Marketplace.
          template_vars: |
            {
              "customMessage": "Release process completed successfully - all post-release tasks finished"
            }
