name: Repository Monitoring

on:
  issues:
    types: [opened, closed, reopened, labeled]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, closed, ready_for_review]
  pull_request_review:
    types: [submitted]
  discussion:
    types: [created, answered]
  schedule:
    # Daily health check at 9:00 UTC
    - cron: "0 9 * * *"
  workflow_dispatch:
    inputs:
      check_type:
        description: "Type of check to perform"
        required: false
        default: "health"
        type: choice
        options:
          - health
          - stats
          - security

jobs:
  issue-notifications:
    name: Issue Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'issue_comment'
    steps:
      - uses: actions/checkout@v4

      - name: Determine notification type
        id: notification-type
        run: |
          case "${{ github.event.action }}" in
            "opened")
              echo "template=warning" >> $GITHUB_OUTPUT
              echo "emoji=🐛" >> $GITHUB_OUTPUT
              echo "action_text=opened" >> $GITHUB_OUTPUT
              ;;
            "closed")
              echo "template=success" >> $GITHUB_OUTPUT
              echo "emoji=✅" >> $GITHUB_OUTPUT
              echo "action_text=closed" >> $GITHUB_OUTPUT
              ;;
            "reopened")
              echo "template=warning" >> $GITHUB_OUTPUT
              echo "emoji=🔄" >> $GITHUB_OUTPUT
              echo "action_text=reopened" >> $GITHUB_OUTPUT
              ;;
            "labeled")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=🏷️" >> $GITHUB_OUTPUT
              echo "action_text=labeled" >> $GITHUB_OUTPUT
              ;;
            "created")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=💬" >> $GITHUB_OUTPUT
              echo "action_text=commented on" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Send issue notification
        if: github.event_name == 'issues'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: ${{ steps.notification-type.outputs.template }}
          language: en
          parse_mode: "Markdown"
          message: |
            ${{ steps.notification-type.outputs.emoji }} **Issue ${{ steps.notification-type.outputs.action_text }}**

            **📋 Title:** {{issueTitle}}
            **👤 Author:** `{{author}}`
            **🔢 Number:** #{{issueNumber}}
            **📊 State:** `{{issueState}}`
            **🏷️ Labels:** {{labels}}
            **👥 Assignees:** {{assignees}}
            **📅 Created:** {{createdAt}}
            **🔄 Updated:** {{updatedAt}}

            **📝 Description:**
            {{issueBody}}

            **🏠 Repository:** {{repository}}
            **🌿 Branch:** {{refName}}
          template_vars: |
            {
              "action": "${{ steps.notification-type.outputs.action_text }}",
              "emoji": "${{ steps.notification-type.outputs.emoji }}",
              "customMessage": "New activity in repository {{repositoryName}}"
            }
          inline_keyboard: |
            [
              {"text": "👀 View Issue", "url": "${{ github.event.issue.html_url }}"},
              {"text": "💬 Add Comment", "url": "${{ github.event.issue.html_url }}#issuecomment-new"}
            ],
            [
              {"text": "✏️ Edit Issue", "url": "${{ github.event.issue.html_url }}"},
              {"text": "🔒 Close Issue", "url": "${{ github.event.issue.html_url }}"}
            ],
            [
              {"text": "🏠 Repository", "url": "${{ github.server_url }}/${{ github.repository }}"},
              {"text": "📊 All Issues", "url": "${{ github.server_url }}/${{ github.repository }}/issues"}
            ]

      - name: Send comment notification
        if: github.event_name == 'issue_comment'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          parse_mode: "Markdown"
          message: |
            💬 **New Issue Comment**

            **📋 Issue:** {{issueTitle}}
            **🔢 Number:** #{{issueNumber}}
            **📊 Issue State:** {{issueState}}

            **👤 Comment Author:** {{commentAuthor}}
            **🕐 Comment Time:** {{commentCreatedAt}}
            **🆔 Comment ID:** {{commentId}}

            **💭 Comment Text:**
            {{commentBody}}

            **🏠 Repository:** {{repository}}
            **🌿 Branch:** {{refName}}
          template_vars: |
            {
              "customMessage": "Activity in repository {{repositoryName}} - new comment from {{commentAuthor}}"
            }
          inline_keyboard: |
            [
              {"text": "👀 View Comment", "url": "${{ github.event.comment.html_url }}"},
              {"text": "📝 Reply", "url": "${{ github.event.issue.html_url }}#issuecomment-new"}
            ],
            [
              {"text": "🔗 Go to Issue", "url": "${{ github.event.issue.html_url }}"},
              {"text": "✏️ Edit Issue", "url": "${{ github.event.issue.html_url }}"}
            ],
            [
              {"text": "🏠 Repository", "url": "${{ github.server_url }}/${{ github.repository }}"},
              {"text": "📊 All Issues", "url": "${{ github.server_url }}/${{ github.repository }}/issues"}
            ]

  pr-notifications:
    name: Pull Request Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review'
    steps:
      - uses: actions/checkout@v4

      - name: Determine PR notification type
        id: pr-notification-type
        run: |
          case "${{ github.event.action }}" in
            "opened")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=🔄" >> $GITHUB_OUTPUT
              echo "action_text=opened" >> $GITHUB_OUTPUT
              ;;
            "closed")
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                echo "template=success" >> $GITHUB_OUTPUT
                echo "emoji=🎉" >> $GITHUB_OUTPUT
                echo "action_text=merged" >> $GITHUB_OUTPUT
              else
                echo "template=warning" >> $GITHUB_OUTPUT
                echo "emoji=❌" >> $GITHUB_OUTPUT
                echo "action_text=closed" >> $GITHUB_OUTPUT
              fi
              ;;
            "ready_for_review")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=👀" >> $GITHUB_OUTPUT
              echo "action_text=marked ready for review" >> $GITHUB_OUTPUT
              ;;
            "submitted")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=📝" >> $GITHUB_OUTPUT
              echo "action_text=reviewed" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Send PR notification
        if: github.event_name == 'pull_request'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: deploy # Use deploy template for PR as code deployment
          language: en
          parse_mode: "Markdown"
          message: |
            ${{ steps.pr-notification-type.outputs.emoji }} **Pull Request ${{ steps.pr-notification-type.outputs.action_text }}**

            **📋 Title:** {{prTitle}}
            **🔢 Number:** #{{prNumber}}
            **👤 Author:** {{author}}
            **📊 State:** `{{prState}}`
            **✏️ Draft:** {{isDraft}}
            **🔀 Mergeable:** {{mergeable}}

            **🌿 Branches:** `{{headBranch}}` → `{{baseBranch}}`
            **🏷️ Labels:** {{labels}}
            **👥 Assignees:** {{assignees}}

            **📈 Change Statistics:**
            • 📁 **Files changed:** ${{ github.event.pull_request.changed_files }}
            • 📝 **Commits:** ${{ github.event.pull_request.commits }}
            • 📊 **Changes:** `+${{ github.event.pull_request.additions }} ➕ -${{ github.event.pull_request.deletions }} ➖`
            • 📅 **Created:** {{prCreatedAt}}
            • 🔄 **Updated:** {{prUpdatedAt}}

            **📝 Description:**
            {{prBody}}

            **🏠 Repository:** {{repository}}
          template_vars: |
            {
              "deployStatus": "${{ steps.pr-notification-type.outputs.action_text }}",
              "version": "PR#${{ github.event.pull_request.number }}",
              "customMessage": "Pull Request {{prNumber}} in repository {{repositoryName}}"
            }
          inline_keyboard: |
            [
              {"text": "👀 View PR", "url": "${{ github.event.pull_request.html_url }}"},
              {"text": "📝 Review", "url": "${{ github.event.pull_request.html_url }}/files"}
            ],
            [
              {"text": "✅ Approve", "url": "${{ github.event.pull_request.html_url }}/files#submit-review"},
              {"text": "❌ Request Changes", "url": "${{ github.event.pull_request.html_url }}/files#submit-review"}
            ],
            [
              {"text": "🔄 Merge PR", "url": "${{ github.event.pull_request.html_url }}"},
              {"text": "🔒 Close PR", "url": "${{ github.event.pull_request.html_url }}"}
            ],
            [
              {"text": "🏠 Repository", "url": "${{ github.server_url }}/${{ github.repository }}"},
              {"text": "📊 All PRs", "url": "${{ github.server_url }}/${{ github.repository }}/pulls"}
            ]

      - name: Send review notification
        if: github.event_name == 'pull_request_review'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          parse_mode: "Markdown"
          message: |
            📝 **Pull Request Review**

            **📋 PR:** {{prTitle}}
            **🔢 Number:** #{{prNumber}}
            **📊 PR State:** {{prState}}
            **🔗 URL:** {{prUrl}}

            **👤 Reviewer:** {{reviewAuthor}}
            **⭐ Review Status:** {{reviewState}}
            **🆔 Review ID:** {{reviewId}}
            **🕐 Time:** ${{ github.event.review.submitted_at }}

            **💭 Review Comment:**
            {{reviewBody}}

            **🏠 Repository:** {{repository}}
            **🌿 Branch:** {{refName}}
          template_vars: |
            {
              "customMessage": "New review from {{reviewAuthor}} for PR #{{prNumber}}"
            }
          inline_keyboard: |
            [
              {"text": "👀 View Review", "url": "${{ github.event.review.html_url }}"},
              {"text": "📝 Go to PR", "url": "${{ github.event.pull_request.html_url }}"}
            ],
            [
              {"text": "💬 Reply to Review", "url": "${{ github.event.pull_request.html_url }}#discussion_r"},
              {"text": "✏️ Edit PR", "url": "${{ github.event.pull_request.html_url }}"}
            ],
            [
              {"text": "🏠 Repository", "url": "${{ github.server_url }}/${{ github.repository }}"},
              {"text": "📊 All PRs", "url": "${{ github.server_url }}/${{ github.repository }}/pulls"}
            ]

  discussion-notifications:
    name: Discussion Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'discussion'
    steps:
      - uses: actions/checkout@v4

      - name: Send discussion notification
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          parse_mode: "Markdown"
          language: en
          message: |
            💬 **New Discussion ${{ github.event.action == 'created' && 'Created' || github.event.action == 'answered' && 'Answered' || github.event.action }}**

            **📢 Title:** ${{ github.event.discussion.title }}
            **👤 Author:** ${{ github.event.discussion.user.login }}
            **🏷️ Category:** ${{ github.event.discussion.category.name }}
            **📅 Created:** ${{ github.event.discussion.created_at }}
            **🆔 Discussion ID:** ${{ github.event.discussion.number }}
            **💬 Answer Status:** ${{ github.event.discussion.answer_chosen_at && '✅ Has chosen answer' || '❓ Awaiting answer' }}
            **🔒 Locked:** ${{ github.event.discussion.locked && '🔒 Yes' || '🔓 No' }}

            **📝 Content:**
            ${{ github.event.discussion.body }}

            **🏠 Repository:** {{repository}}
            **🌿 Branch:** {{refName}}
          template_vars: |
            {
              "customMessage": "New discussion in repository {{repositoryName}}"
            }
          inline_keyboard: |
            [
              {"text": "💬 Join Discussion", "url": "${{ github.event.discussion.html_url }}"},
              {"text": "✍️ Reply", "url": "${{ github.event.discussion.html_url }}#discussioncomment-new"}
            ],
            [
              {"text": "👍 React", "url": "${{ github.event.discussion.html_url }}"},
              {"text": "🔖 Subscribe", "url": "${{ github.event.discussion.html_url }}"}
            ],
            [
              {"text": "🏠 Repository", "url": "${{ github.server_url }}/${{ github.repository }}"},
              {"text": "💬 All Discussions", "url": "${{ github.server_url }}/${{ github.repository }}/discussions"}
            ]

  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.check_type == 'health')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run health checks
        id: health-check
        run: |
          echo "Running repository health checks..."

          # Generate current timestamp
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT

          # Check for security vulnerabilities
          AUDIT_RESULT=$(npm audit --audit-level high --json || echo '{}')
          VULNERABILITIES=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.total // 0')

          # Check test coverage
          npm run test:coverage > /dev/null 2>&1 || true
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          else
            COVERAGE="N/A"
          fi

          # Check for outdated dependencies
          OUTDATED=$(npm outdated --json 2>/dev/null | jq -r 'keys | length' || echo "0")

          # Check repository size
          REPO_SIZE=$(du -sh . | cut -f1)

          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT
          echo "repo_size=$REPO_SIZE" >> $GITHUB_OUTPUT

          # Determine health status
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "health_emoji=⚠️" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "health_emoji=✅" >> $GITHUB_OUTPUT
          fi

      - name: Send health check notification
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: test # Используем шаблон test для health check
          language: ru
          parse_mode: "Markdown"
          message: |
            ${{ steps.health-check.outputs.health_emoji }} **Отчет о здоровье репозитория**

            **🏠 Репозиторий:** {{repository}}
            **📅 Дата проверки:** ${{ steps.health-check.outputs.current_date }}
            **🎯 Общий статус:** ${{ steps.health-check.outputs.status == 'success' && '✅ Отличное здоровье' || '⚠️ Требует внимания' }}
            **🏆 Оценка здоровья:** ${{ steps.health-check.outputs.vulnerabilities == '0' && steps.health-check.outputs.outdated < '5' && '95%' || '70%' }}

            **📊 Детальная статистика:**
            • 💾 **Размер репозитория:** `${{ steps.health-check.outputs.repo_size }}`
            • 🧪 **Покрытие тестами:** {{coverage}}
            • 🔒 **Уязвимости:** ${{ steps.health-check.outputs.vulnerabilities == '0' && '✅ Не найдено' || format('⚠️ {0} найдено', steps.health-check.outputs.vulnerabilities) }}
            • 📦 **Устаревшие пакеты:** ${{ steps.health-check.outputs.outdated == '0' && '✅ Все актуальны' || format('📦 {0} требуют обновления', steps.health-check.outputs.outdated) }}

            **🎯 Ключевые показатели:**
            • ⭐ **Статус тестов:** {{testStatus}}
            • 🛡️ **Безопасность:** ${{ steps.health-check.outputs.vulnerabilities == '0' && '🟢 Отлично' || '🟡 Требует внимания' }}
            • 📈 **Актуальность:** ${{ steps.health-check.outputs.outdated < '3' && '🟢 Отлично' || '🟡 Нужно обновление' }}

            **📋 Рекомендации:**
            ${{ steps.health-check.outputs.vulnerabilities > 0 && '• ⚠️ Обновить зависимости с уязвимостями' || '• ✅ Безопасность в порядке' }}
            ${{ steps.health-check.outputs.outdated > 0 && format('• 📦 Обновить {0} устаревших пакетов', steps.health-check.outputs.outdated) || '• ✅ Все пакеты актуальны' }}
            • 📈 Поддерживать покрытие тестами выше 80%
            • 🔄 Регулярно запускать проверки безопасности

            **🌿 Ветка:** {{refName}}
            **👤 Проверка запущена:** {{actor}}
          template_vars: |
            {
              "testStatus": "${{ steps.health-check.outputs.status == 'success' && '✅ Все проверки пройдены' || '⚠️ Есть проблемы' }}",
              "coverage": "${{ steps.health-check.outputs.coverage }}%",
              "customMessage": "Автоматическая проверка здоровья репозитория {{repositoryName}} завершена"
            }
          inline_keyboard: |
            [
              {"text": "📊 Actions", "url": "${{ github.server_url }}/${{ github.repository }}/actions"},
              {"text": "🔒 Безопасность", "url": "${{ github.server_url }}/${{ github.repository }}/security"}
            ],
            [
              {"text": "📈 Аналитика", "url": "${{ github.server_url }}/${{ github.repository }}/pulse"},
              {"text": "📋 Issues", "url": "${{ github.server_url }}/${{ github.repository }}/issues"}
            ],
            [
              {"text": "🔧 Настройки", "url": "${{ github.server_url }}/${{ github.repository }}/settings"},
              {"text": "🏠 Репозиторий", "url": "${{ github.server_url }}/${{ github.repository }}"}
            ]

  repository-stats:
    name: Repository Statistics
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.check_type == 'stats'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for stats

      - name: Generate repository statistics
        id: stats
        run: |
          # Generate current timestamp
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT

          # Get commit statistics
          TOTAL_COMMITS=$(git rev-list --all --count)
          COMMITS_THIS_MONTH=$(git rev-list --since="1 month ago" --count HEAD)
          CONTRIBUTORS=$(git log --format='%ae' | sort | uniq | wc -l)

          # Get file statistics
          TOTAL_FILES=$(find . -type f -not -path './.git/*' -not -path './node_modules/*' | wc -l)
          CODE_LINES=$(find . -name "*.js" -not -path './node_modules/*' -not -path './.git/*' | xargs wc -l | tail -1 | awk '{print $1}')

          # Get latest release
          LATEST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || echo "No releases")

          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "commits_this_month=$COMMITS_THIS_MONTH" >> $GITHUB_OUTPUT
          echo "contributors=$CONTRIBUTORS" >> $GITHUB_OUTPUT
          echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
          echo "code_lines=$CODE_LINES" >> $GITHUB_OUTPUT
          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Send statistics report
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          parse_mode: "Markdown"
          language: ru
          message: |
            📊 **Детальная статистика репозитория**

            **🏠 Репозиторий:** {{repository}}
            **👤 Владелец:** {{repositoryOwnerName}}
            **📅 Отчет сгенерирован:** ${{ steps.stats.outputs.current_date }}
            **🌿 Текущая ветка:** {{refName}}

            **🚀 Активность разработки:**
            • 📝 **Всего коммитов:** `${{ steps.stats.outputs.total_commits }}`
            • 📈 **Коммитов за месяц:** `${{ steps.stats.outputs.commits_this_month }}`
            • 👥 **Уникальных участников:** `${{ steps.stats.outputs.contributors }}`
            • ⚡ **Активность:** ${{ steps.stats.outputs.commits_this_month > 10 && '🟢 Высокая' || steps.stats.outputs.commits_this_month > 5 && '🟡 Средняя' || '🔴 Низкая' }}

            **💻 Состав кодовой базы:**
            • 📁 **Всего файлов:** `${{ steps.stats.outputs.total_files }}`
            • 📏 **Строк кода:** `${{ steps.stats.outputs.code_lines }}`
            • 🏷️ **Последний релиз:** `${{ steps.stats.outputs.latest_release }}`
            • 📊 **Размер проекта:** ${{ steps.stats.outputs.code_lines > 10000 && '🟢 Крупный' || steps.stats.outputs.code_lines > 1000 && '🟡 Средний' || '🟣 Малый' }}

            **📈 Показатели:**
            • 🎯 **Коммитов на участника:** ~${{ steps.stats.outputs.contributors > 0 && github_action_expressions.round(steps.stats.outputs.total_commits / steps.stats.outputs.contributors) || '0' }}
            • 🔥 **Месячная активность:** ${{ steps.stats.outputs.commits_this_month }}/${{ steps.stats.outputs.total_commits }} коммитов
            • 👨‍💻 **Уровень сотрудничества:** ${{ steps.stats.outputs.contributors > 5 && '🟢 Командный' || steps.stats.outputs.contributors > 1 && '🟡 Малая команда' || '🟣 Индивидуальный' }}

            **🔗 Полезные ресурсы:**
            • 👥 [Участники](https://github.com/${{ github.repository }}/graphs/contributors)
            • 📈 [График коммитов](https://github.com/${{ github.repository }}/graphs/commit-activity)
            • 📊 [Частота изменений](https://github.com/${{ github.repository }}/graphs/code-frequency)
            • 🌐 [Сетевой граф](https://github.com/${{ github.repository }}/network)
          template_vars: |
            {
              "customMessage": "Подробная статистика репозитория {{repositoryName}} за все время"
            }
          inline_keyboard: |
            [
              {"text": "📈 Аналитика", "url": "${{ github.server_url }}/${{ github.repository }}/pulse"},
              {"text": "👥 Участники", "url": "${{ github.server_url }}/${{ github.repository }}/graphs/contributors"}
            ],
            [
              {"text": "📊 Трафик", "url": "${{ github.server_url }}/${{ github.repository }}/graphs/traffic"},
              {"text": "🏷️ Релизы", "url": "${{ github.server_url }}/${{ github.repository }}/releases"}
            ],
            [
              {"text": "🌐 Сетевой граф", "url": "${{ github.server_url }}/${{ github.repository }}/network"},
              {"text": "📋 Все коммиты", "url": "${{ github.server_url }}/${{ github.repository }}/commits"}
            ],
            [
              {"text": "🏠 К репозиторию", "url": "${{ github.server_url }}/${{ github.repository }}"},
              {"text": "⚙️ Новый отчет", "url": "${{ github.server_url }}/${{ github.repository }}/actions/workflows/monitoring.yml"}
            ]
