name: Repository Monitoring

on:
  issues:
    types: [opened, closed, reopened, labeled]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, closed, ready_for_review]
  pull_request_review:
    types: [submitted]
  discussion:
    types: [created, answered]
  schedule:
    # Daily health check at 9:00 UTC
    - cron: "0 9 * * *"
  workflow_dispatch:
    inputs:
      check_type:
        description: "Type of check to perform"
        required: false
        default: "health"
        type: choice
        options:
          - health
          - stats
          - security

jobs:
  issue-notifications:
    name: Issue Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'issue_comment'
    steps:
      - uses: actions/checkout@v4

      - name: Determine notification type
        id: notification-type
        run: |
          case "${{ github.event.action }}" in
            "opened")
              echo "template=warning" >> $GITHUB_OUTPUT
              echo "emoji=🐛" >> $GITHUB_OUTPUT
              echo "action_text=opened" >> $GITHUB_OUTPUT
              ;;
            "closed")
              echo "template=success" >> $GITHUB_OUTPUT
              echo "emoji=✅" >> $GITHUB_OUTPUT
              echo "action_text=closed" >> $GITHUB_OUTPUT
              ;;
            "reopened")
              echo "template=warning" >> $GITHUB_OUTPUT
              echo "emoji=🔄" >> $GITHUB_OUTPUT
              echo "action_text=reopened" >> $GITHUB_OUTPUT
              ;;
            "labeled")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=🏷️" >> $GITHUB_OUTPUT
              echo "action_text=labeled" >> $GITHUB_OUTPUT
              ;;
            "created")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=💬" >> $GITHUB_OUTPUT
              echo "action_text=commented on" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Send issue notification
        if: github.event_name == 'issues'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: ${{ steps.notification-type.outputs.template }}
          language: ru
          parse_mode: "Markdown"
          message: |
            **🎯 Детали Issue:**

            **📊 Статус:** {{action}}
            **👤 Автор:** `{{author}}`
            **🏷️ Метки:** {{labels}}
            **📅 Создан:** {{createdAt}}

            **📝 Номер Issue:** #{{issueNumber}}
          template_vars: |
            {
              "action": "${{ steps.notification-type.outputs.action_text }}",
              "emoji": "${{ steps.notification-type.outputs.emoji }}"
            }
          inline_keyboard: |
            [
              {"text": "👀 Посмотреть Issue", "url": "${{ github.event.issue.html_url }}"},
              {"text": "💬 Добавить комментарий", "url": "${{ github.event.issue.html_url }}#issuecomment-new"},
              {"text": "✏️ Редактировать", "url": "${{ github.event.issue.html_url }}"}
            ]

      - name: Send comment notification
        if: github.event_name == 'issue_comment'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          parse_mode: "Markdown"
          message: |
            💬 **Новый комментарий к Issue**

            **🔢 #${{ github.event.issue.number }}** - 📝 ${{ github.event.issue.title }}

            **👤 Комментатор:** ${{ github.event.comment.user.login }}
            **🕐 Время:** ${{ github.event.comment.created_at }}

            **💭 Комментарий:**
            ${{ github.event.comment.body }}
          inline_keyboard: |
            [
              {"text": "👀 Посмотреть комментарий", "url": "${{ github.event.comment.html_url }}"},
              {"text": "📝 Ответить", "url": "${{ github.event.issue.html_url }}#issuecomment-new"},
              {"text": "🔗 Перейти к Issue", "url": "${{ github.event.issue.html_url }}"}
            ]

  pr-notifications:
    name: Pull Request Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review'
    steps:
      - uses: actions/checkout@v4

      - name: Determine PR notification type
        id: pr-notification-type
        run: |
          case "${{ github.event.action }}" in
            "opened")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=🔄" >> $GITHUB_OUTPUT
              echo "action_text=opened" >> $GITHUB_OUTPUT
              ;;
            "closed")
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                echo "template=success" >> $GITHUB_OUTPUT
                echo "emoji=🎉" >> $GITHUB_OUTPUT
                echo "action_text=merged" >> $GITHUB_OUTPUT
              else
                echo "template=warning" >> $GITHUB_OUTPUT
                echo "emoji=❌" >> $GITHUB_OUTPUT
                echo "action_text=closed" >> $GITHUB_OUTPUT
              fi
              ;;
            "ready_for_review")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=👀" >> $GITHUB_OUTPUT
              echo "action_text=marked ready for review" >> $GITHUB_OUTPUT
              ;;
            "submitted")
              echo "template=info" >> $GITHUB_OUTPUT
              echo "emoji=📝" >> $GITHUB_OUTPUT
              echo "action_text=reviewed" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Send PR notification
        if: github.event_name == 'pull_request'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: deploy # Используем шаблон deploy для PR как развертывания кода
          language: ru
          parse_mode: "Markdown"
          message: |
            **📈 Статистика изменений:**

            **🌿 Ветка:** `${{ github.event.pull_request.head.ref }}` → `${{ github.event.pull_request.base.ref }}`
            **📁 Файлов изменено:** ${{ github.event.pull_request.changed_files }}
            **📝 Коммитов:** ${{ github.event.pull_request.commits }}
            **📊 Изменения:** `+${{ github.event.pull_request.additions }} ➕ -${{ github.event.pull_request.deletions }} ➖`
            **👤 Автор:** ${{ github.event.pull_request.user.login }}
            **📅 Создан:** ${{ github.event.pull_request.created_at }}

            **📝 Краткое описание:**
            *${{ github.event.pull_request.title }}*
          template_vars: |
            {
              "prNumber": "${{ github.event.pull_request.number }}",
              "prTitle": "${{ github.event.pull_request.title }}",
              "author": "${{ github.event.pull_request.user.login }}",
              "deployStatus": "${{ steps.pr-notification-type.outputs.action_text }}",
              "version": "PR#${{ github.event.pull_request.number }}",
              "additions": "${{ github.event.pull_request.additions }}",
              "deletions": "${{ github.event.pull_request.deletions }}",
              "changedFiles": "${{ github.event.pull_request.changed_files }}",
              "commits": "${{ github.event.pull_request.commits }}",
              "headBranch": "${{ github.event.pull_request.head.ref }}",
              "baseBranch": "${{ github.event.pull_request.base.ref }}"
            }
          inline_keyboard: |
            [
              {"text": "👀 Посмотреть PR", "url": "${{ github.event.pull_request.html_url }}"},
              {"text": "📝 Сделать ревью", "url": "${{ github.event.pull_request.html_url }}/files"},
              {"text": "✅ Одобрить", "url": "${{ github.event.pull_request.html_url }}/files#submit-review"},
              {"text": "🔄 Слить", "url": "${{ github.event.pull_request.html_url }}"}
            ]

      - name: Send review notification
        if: github.event_name == 'pull_request_review'
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          parse_mode: "Markdown"
          message: |
            📝 **Обзор Pull Request**

            **🔢 #${{ github.event.pull_request.number }}** - 📑 ${{ github.event.pull_request.title }}

            **👤 Ревьюер:** ${{ github.event.review.user.login }}
            **📊 Статус:** ${{ github.event.review.state == 'approved' && '✅ Одобрено' || github.event.review.state == 'changes_requested' && '❌ Требуются изменения' || '💬 Комментарий' }}
            **🕐 Время:** ${{ github.event.review.submitted_at }}

            ${{ github.event.review.body && format('**💭 Комментарий к обзору:**\n{0}', github.event.review.body) || '' }}
          inline_keyboard: |
            [
              {"text": "👀 Посмотреть ревью", "url": "${{ github.event.review.html_url }}"},
              {"text": "📝 Перейти к PR", "url": "${{ github.event.pull_request.html_url }}"},
              {"text": "💬 Ответить на ревью", "url": "${{ github.event.pull_request.html_url }}#discussion_r"}
            ]

  discussion-notifications:
    name: Discussion Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'discussion'
    steps:
      - uses: actions/checkout@v4

      - name: Send discussion notification
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          parse_mode: "Markdown"
          message: |
            💬 **Новое обсуждение ${{ github.event.action == 'created' && 'создано' || github.event.action == 'answered' && 'отвечено' || github.event.action }}**

            **📢 ${{ github.event.discussion.title }}**

            **👤 Автор:** ${{ github.event.discussion.user.login }}
            **🏷️ Категория:** ${{ github.event.discussion.category.name }}
            **📅 Создано:** ${{ github.event.discussion.created_at }}
            **💬 Ответов:** ${{ github.event.discussion.answer_chosen_at && '✅ Есть выбранный ответ' || '❓ Ждет ответа' }}

            **📝 Содержание:**
            ${{ github.event.discussion.body }}
          inline_keyboard: |
            [
              {"text": "💬 Присоединиться к обсуждению", "url": "${{ github.event.discussion.html_url }}"},
              {"text": "👍 Поставить реакцию", "url": "${{ github.event.discussion.html_url }}"},
              {"text": "✍️ Ответить", "url": "${{ github.event.discussion.html_url }}#discussioncomment-new"}
            ]

  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.check_type == 'health')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run health checks
        id: health-check
        run: |
          echo "Running repository health checks..."

          # Generate current timestamp
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT

          # Check for security vulnerabilities
          AUDIT_RESULT=$(npm audit --audit-level high --json || echo '{}')
          VULNERABILITIES=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.total // 0')

          # Check test coverage
          npm run test:coverage > /dev/null 2>&1 || true
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          else
            COVERAGE="N/A"
          fi

          # Check for outdated dependencies
          OUTDATED=$(npm outdated --json 2>/dev/null | jq -r 'keys | length' || echo "0")

          # Check repository size
          REPO_SIZE=$(du -sh . | cut -f1)

          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT
          echo "repo_size=$REPO_SIZE" >> $GITHUB_OUTPUT

          # Determine health status
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "health_emoji=⚠️" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "health_emoji=✅" >> $GITHUB_OUTPUT
          fi

      - name: Send health check notification
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: test # Используем шаблон test для health check
          language: ru
          parse_mode: "Markdown"
          message: |
            **🏥 Детальный отчет здоровья репозитория:**

            **📅 Дата проверки:** ${{ steps.health-check.outputs.current_date }}
            **💾 Размер репозитория:** `${{ steps.health-check.outputs.repo_size }}`
            **🎯 Общий статус:** ${{ steps.health-check.outputs.status == 'success' && '✅ Отличное здоровье' || '⚠️ Требует внимания' }}
            **📊 Покрытие тестами:** ${{ steps.health-check.outputs.coverage }}%
            **🔒 Уязвимости:** ${{ steps.health-check.outputs.vulnerabilities == '0' && '✅ Не найдено' || format('⚠️ {0} найдено', steps.health-check.outputs.vulnerabilities) }}
            **📦 Устаревшие пакеты:** ${{ steps.health-check.outputs.outdated == '0' && '✅ Все актуальны' || format('📦 {0} требуют обновления', steps.health-check.outputs.outdated) }}

            **📋 Рекомендации:**
            ${{ steps.health-check.outputs.vulnerabilities > 0 && '• ⚠️ Обновить зависимости с уязвимостями' || '• ✅ Безопасность в порядке' }}
            ${{ steps.health-check.outputs.outdated > 0 && format('• 📦 Обновить {0} устаревших пакетов', steps.health-check.outputs.outdated) || '• ✅ Все пакеты актуальны' }}
            • 📈 Поддерживать покрытие тестами выше 80%
          template_vars: |
            {
              "testStatus": "${{ steps.health-check.outputs.status == 'success' && '✅ Все проверки пройдены' || '⚠️ Есть проблемы' }}",
              "coverage": "${{ steps.health-check.outputs.coverage }}%",
              "vulnerabilities": "${{ steps.health-check.outputs.vulnerabilities }}",
              "outdatedPackages": "${{ steps.health-check.outputs.outdated }}",
              "repoSize": "${{ steps.health-check.outputs.repo_size }}",
              "healthScore": "${{ steps.health-check.outputs.vulnerabilities == '0' && steps.health-check.outputs.outdated < '5' && '95%' || '70%' }}",
              "checkDate": "${{ steps.health-check.outputs.current_date }}",
              "totalIssues": "${{ steps.health-check.outputs.vulnerabilities }}+${{ steps.health-check.outputs.outdated }}"
            }
          inline_keyboard: |
            [
              {"text": "📊 Действия", "url": "${{ github.server_url }}/${{ github.repository }}/actions"},
              {"text": "🔒 Безопасность", "url": "${{ github.server_url }}/${{ github.repository }}/security"},
              {"text": "📈 Аналитика", "url": "${{ github.server_url }}/${{ github.repository }}/pulse"},
              {"text": "🔧 Настройки", "url": "${{ github.server_url }}/${{ github.repository }}/settings"}
            ]

  repository-stats:
    name: Repository Statistics
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.check_type == 'stats'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for stats

      - name: Generate repository statistics
        id: stats
        run: |
          # Generate current timestamp
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT

          # Get commit statistics
          TOTAL_COMMITS=$(git rev-list --all --count)
          COMMITS_THIS_MONTH=$(git rev-list --since="1 month ago" --count HEAD)
          CONTRIBUTORS=$(git log --format='%ae' | sort | uniq | wc -l)

          # Get file statistics
          TOTAL_FILES=$(find . -type f -not -path './.git/*' -not -path './node_modules/*' | wc -l)
          CODE_LINES=$(find . -name "*.js" -not -path './node_modules/*' -not -path './.git/*' | xargs wc -l | tail -1 | awk '{print $1}')

          # Get latest release
          LATEST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || echo "No releases")

          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "commits_this_month=$COMMITS_THIS_MONTH" >> $GITHUB_OUTPUT
          echo "contributors=$CONTRIBUTORS" >> $GITHUB_OUTPUT
          echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
          echo "code_lines=$CODE_LINES" >> $GITHUB_OUTPUT
          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Send statistics report
        uses: ./
        with:
          telegram_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          template: info
          parse_mode: "Markdown"
          message: |
            📊 **Отчет по статистике репозитория**

            **🏠 Репозиторий:** ${{ github.repository }}
            **📅 Сгенерирован:** ${{ steps.stats.outputs.current_date }}

            **🚀 Активность разработки:**
            • 📝 Всего коммитов: **${{ steps.stats.outputs.total_commits }}**
            • 📈 Коммитов за месяц: **${{ steps.stats.outputs.commits_this_month }}**
            • 👥 Участников: **${{ steps.stats.outputs.contributors }}**

            **💻 Кодовая база:**
            • 📁 Всего файлов: **${{ steps.stats.outputs.total_files }}**
            • 📏 Строк кода: **${{ steps.stats.outputs.code_lines }}**
            • 🏷️ Последний релиз: **${{ steps.stats.outputs.latest_release }}**

            **🔗 Полезные ссылки:**
            • 👥 [Участники](https://github.com/${{ github.repository }}/graphs/contributors)
            • 📈 [Активность коммитов](https://github.com/${{ github.repository }}/graphs/commit-activity)
            • 📊 [Частота кода](https://github.com/${{ github.repository }}/graphs/code-frequency)
          template_vars: |
            {
              "totalCommits": "${{ steps.stats.outputs.total_commits }}",
              "monthlyCommits": "${{ steps.stats.outputs.commits_this_month }}",
              "contributors": "${{ steps.stats.outputs.contributors }}"
            }
          inline_keyboard: |
            [
              {"text": "📈 Аналитика", "url": "${{ github.server_url }}/${{ github.repository }}/pulse"},
              {"text": "👥 Участники", "url": "${{ github.server_url }}/${{ github.repository }}/graphs/contributors"},
              {"text": "📊 Статистика", "url": "${{ github.server_url }}/${{ github.repository }}/graphs/traffic"},
              {"text": "🏷️ Релизы", "url": "${{ github.server_url }}/${{ github.repository }}/releases"}
            ]
